// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/city"
	"github.com/iter-x/iter-x/internal/repo/ent/continent"
	"github.com/iter-x/iter-x/internal/repo/ent/country"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
)

// PointsOfInterestUpdate is the builder for updating PointsOfInterest entities.
type PointsOfInterestUpdate struct {
	config
	hooks    []Hook
	mutation *PointsOfInterestMutation
}

// Where appends a list predicates to the PointsOfInterestUpdate builder.
func (poiu *PointsOfInterestUpdate) Where(ps ...predicate.PointsOfInterest) *PointsOfInterestUpdate {
	poiu.mutation.Where(ps...)
	return poiu
}

// SetUpdatedAt sets the "updated_at" field.
func (poiu *PointsOfInterestUpdate) SetUpdatedAt(t time.Time) *PointsOfInterestUpdate {
	poiu.mutation.SetUpdatedAt(t)
	return poiu
}

// SetName sets the "name" field.
func (poiu *PointsOfInterestUpdate) SetName(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetName(s)
	return poiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableName(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetName(*s)
	}
	return poiu
}

// SetNameEn sets the "name_en" field.
func (poiu *PointsOfInterestUpdate) SetNameEn(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetNameEn(s)
	return poiu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableNameEn(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetNameEn(*s)
	}
	return poiu
}

// SetNameCn sets the "name_cn" field.
func (poiu *PointsOfInterestUpdate) SetNameCn(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetNameCn(s)
	return poiu
}

// SetNillableNameCn sets the "name_cn" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableNameCn(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetNameCn(*s)
	}
	return poiu
}

// SetDescription sets the "description" field.
func (poiu *PointsOfInterestUpdate) SetDescription(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetDescription(s)
	return poiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableDescription(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetDescription(*s)
	}
	return poiu
}

// SetAddress sets the "address" field.
func (poiu *PointsOfInterestUpdate) SetAddress(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetAddress(s)
	return poiu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableAddress(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetAddress(*s)
	}
	return poiu
}

// SetLatitude sets the "latitude" field.
func (poiu *PointsOfInterestUpdate) SetLatitude(f float64) *PointsOfInterestUpdate {
	poiu.mutation.ResetLatitude()
	poiu.mutation.SetLatitude(f)
	return poiu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableLatitude(f *float64) *PointsOfInterestUpdate {
	if f != nil {
		poiu.SetLatitude(*f)
	}
	return poiu
}

// AddLatitude adds f to the "latitude" field.
func (poiu *PointsOfInterestUpdate) AddLatitude(f float64) *PointsOfInterestUpdate {
	poiu.mutation.AddLatitude(f)
	return poiu
}

// SetLongitude sets the "longitude" field.
func (poiu *PointsOfInterestUpdate) SetLongitude(f float64) *PointsOfInterestUpdate {
	poiu.mutation.ResetLongitude()
	poiu.mutation.SetLongitude(f)
	return poiu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableLongitude(f *float64) *PointsOfInterestUpdate {
	if f != nil {
		poiu.SetLongitude(*f)
	}
	return poiu
}

// AddLongitude adds f to the "longitude" field.
func (poiu *PointsOfInterestUpdate) AddLongitude(f float64) *PointsOfInterestUpdate {
	poiu.mutation.AddLongitude(f)
	return poiu
}

// SetType sets the "type" field.
func (poiu *PointsOfInterestUpdate) SetType(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetType(s)
	return poiu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableType(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetType(*s)
	}
	return poiu
}

// SetCategory sets the "category" field.
func (poiu *PointsOfInterestUpdate) SetCategory(s string) *PointsOfInterestUpdate {
	poiu.mutation.SetCategory(s)
	return poiu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableCategory(s *string) *PointsOfInterestUpdate {
	if s != nil {
		poiu.SetCategory(*s)
	}
	return poiu
}

// SetRating sets the "rating" field.
func (poiu *PointsOfInterestUpdate) SetRating(f float32) *PointsOfInterestUpdate {
	poiu.mutation.ResetRating()
	poiu.mutation.SetRating(f)
	return poiu
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableRating(f *float32) *PointsOfInterestUpdate {
	if f != nil {
		poiu.SetRating(*f)
	}
	return poiu
}

// AddRating adds f to the "rating" field.
func (poiu *PointsOfInterestUpdate) AddRating(f float32) *PointsOfInterestUpdate {
	poiu.mutation.AddRating(f)
	return poiu
}

// SetRecommendedDurationMinutes sets the "recommended_duration_minutes" field.
func (poiu *PointsOfInterestUpdate) SetRecommendedDurationMinutes(i int64) *PointsOfInterestUpdate {
	poiu.mutation.ResetRecommendedDurationMinutes()
	poiu.mutation.SetRecommendedDurationMinutes(i)
	return poiu
}

// SetNillableRecommendedDurationMinutes sets the "recommended_duration_minutes" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableRecommendedDurationMinutes(i *int64) *PointsOfInterestUpdate {
	if i != nil {
		poiu.SetRecommendedDurationMinutes(*i)
	}
	return poiu
}

// AddRecommendedDurationMinutes adds i to the "recommended_duration_minutes" field.
func (poiu *PointsOfInterestUpdate) AddRecommendedDurationMinutes(i int64) *PointsOfInterestUpdate {
	poiu.mutation.AddRecommendedDurationMinutes(i)
	return poiu
}

// SetCityID sets the "city_id" field.
func (poiu *PointsOfInterestUpdate) SetCityID(u uuid.UUID) *PointsOfInterestUpdate {
	poiu.mutation.SetCityID(u)
	return poiu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableCityID(u *uuid.UUID) *PointsOfInterestUpdate {
	if u != nil {
		poiu.SetCityID(*u)
	}
	return poiu
}

// ClearCityID clears the value of the "city_id" field.
func (poiu *PointsOfInterestUpdate) ClearCityID() *PointsOfInterestUpdate {
	poiu.mutation.ClearCityID()
	return poiu
}

// SetStateID sets the "state_id" field.
func (poiu *PointsOfInterestUpdate) SetStateID(u uuid.UUID) *PointsOfInterestUpdate {
	poiu.mutation.SetStateID(u)
	return poiu
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableStateID(u *uuid.UUID) *PointsOfInterestUpdate {
	if u != nil {
		poiu.SetStateID(*u)
	}
	return poiu
}

// ClearStateID clears the value of the "state_id" field.
func (poiu *PointsOfInterestUpdate) ClearStateID() *PointsOfInterestUpdate {
	poiu.mutation.ClearStateID()
	return poiu
}

// SetCountryID sets the "country_id" field.
func (poiu *PointsOfInterestUpdate) SetCountryID(u uuid.UUID) *PointsOfInterestUpdate {
	poiu.mutation.SetCountryID(u)
	return poiu
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableCountryID(u *uuid.UUID) *PointsOfInterestUpdate {
	if u != nil {
		poiu.SetCountryID(*u)
	}
	return poiu
}

// ClearCountryID clears the value of the "country_id" field.
func (poiu *PointsOfInterestUpdate) ClearCountryID() *PointsOfInterestUpdate {
	poiu.mutation.ClearCountryID()
	return poiu
}

// SetContinentID sets the "continent_id" field.
func (poiu *PointsOfInterestUpdate) SetContinentID(u uuid.UUID) *PointsOfInterestUpdate {
	poiu.mutation.SetContinentID(u)
	return poiu
}

// SetNillableContinentID sets the "continent_id" field if the given value is not nil.
func (poiu *PointsOfInterestUpdate) SetNillableContinentID(u *uuid.UUID) *PointsOfInterestUpdate {
	if u != nil {
		poiu.SetContinentID(*u)
	}
	return poiu
}

// ClearContinentID clears the value of the "continent_id" field.
func (poiu *PointsOfInterestUpdate) ClearContinentID() *PointsOfInterestUpdate {
	poiu.mutation.ClearContinentID()
	return poiu
}

// SetCity sets the "city" edge to the City entity.
func (poiu *PointsOfInterestUpdate) SetCity(c *City) *PointsOfInterestUpdate {
	return poiu.SetCityID(c.ID)
}

// SetState sets the "state" edge to the State entity.
func (poiu *PointsOfInterestUpdate) SetState(s *State) *PointsOfInterestUpdate {
	return poiu.SetStateID(s.ID)
}

// SetCountry sets the "country" edge to the Country entity.
func (poiu *PointsOfInterestUpdate) SetCountry(c *Country) *PointsOfInterestUpdate {
	return poiu.SetCountryID(c.ID)
}

// SetContinent sets the "continent" edge to the Continent entity.
func (poiu *PointsOfInterestUpdate) SetContinent(c *Continent) *PointsOfInterestUpdate {
	return poiu.SetContinentID(c.ID)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (poiu *PointsOfInterestUpdate) AddDailyItineraryIDs(ids ...uuid.UUID) *PointsOfInterestUpdate {
	poiu.mutation.AddDailyItineraryIDs(ids...)
	return poiu
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (poiu *PointsOfInterestUpdate) AddDailyItinerary(d ...*DailyItinerary) *PointsOfInterestUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return poiu.AddDailyItineraryIDs(ids...)
}

// Mutation returns the PointsOfInterestMutation object of the builder.
func (poiu *PointsOfInterestUpdate) Mutation() *PointsOfInterestMutation {
	return poiu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (poiu *PointsOfInterestUpdate) ClearCity() *PointsOfInterestUpdate {
	poiu.mutation.ClearCity()
	return poiu
}

// ClearState clears the "state" edge to the State entity.
func (poiu *PointsOfInterestUpdate) ClearState() *PointsOfInterestUpdate {
	poiu.mutation.ClearState()
	return poiu
}

// ClearCountry clears the "country" edge to the Country entity.
func (poiu *PointsOfInterestUpdate) ClearCountry() *PointsOfInterestUpdate {
	poiu.mutation.ClearCountry()
	return poiu
}

// ClearContinent clears the "continent" edge to the Continent entity.
func (poiu *PointsOfInterestUpdate) ClearContinent() *PointsOfInterestUpdate {
	poiu.mutation.ClearContinent()
	return poiu
}

// ClearDailyItinerary clears all "daily_itinerary" edges to the DailyItinerary entity.
func (poiu *PointsOfInterestUpdate) ClearDailyItinerary() *PointsOfInterestUpdate {
	poiu.mutation.ClearDailyItinerary()
	return poiu
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to DailyItinerary entities by IDs.
func (poiu *PointsOfInterestUpdate) RemoveDailyItineraryIDs(ids ...uuid.UUID) *PointsOfInterestUpdate {
	poiu.mutation.RemoveDailyItineraryIDs(ids...)
	return poiu
}

// RemoveDailyItinerary removes "daily_itinerary" edges to DailyItinerary entities.
func (poiu *PointsOfInterestUpdate) RemoveDailyItinerary(d ...*DailyItinerary) *PointsOfInterestUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return poiu.RemoveDailyItineraryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (poiu *PointsOfInterestUpdate) Save(ctx context.Context) (int, error) {
	poiu.defaults()
	return withHooks(ctx, poiu.sqlSave, poiu.mutation, poiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (poiu *PointsOfInterestUpdate) SaveX(ctx context.Context) int {
	affected, err := poiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (poiu *PointsOfInterestUpdate) Exec(ctx context.Context) error {
	_, err := poiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poiu *PointsOfInterestUpdate) ExecX(ctx context.Context) {
	if err := poiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poiu *PointsOfInterestUpdate) defaults() {
	if _, ok := poiu.mutation.UpdatedAt(); !ok {
		v := pointsofinterest.UpdateDefaultUpdatedAt()
		poiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poiu *PointsOfInterestUpdate) check() error {
	if v, ok := poiu.mutation.Name(); ok {
		if err := pointsofinterest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.NameEn(); ok {
		if err := pointsofinterest.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name_en": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.NameCn(); ok {
		if err := pointsofinterest.NameCnValidator(v); err != nil {
			return &ValidationError{Name: "name_cn", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name_cn": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.Description(); ok {
		if err := pointsofinterest.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.description": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.Address(); ok {
		if err := pointsofinterest.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.address": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.GetType(); ok {
		if err := pointsofinterest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.type": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.Category(); ok {
		if err := pointsofinterest.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.category": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.Rating(); ok {
		if err := pointsofinterest.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.rating": %w`, err)}
		}
	}
	if v, ok := poiu.mutation.RecommendedDurationMinutes(); ok {
		if err := pointsofinterest.RecommendedDurationMinutesValidator(v); err != nil {
			return &ValidationError{Name: "recommended_duration_minutes", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.recommended_duration_minutes": %w`, err)}
		}
	}
	return nil
}

func (poiu *PointsOfInterestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := poiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pointsofinterest.Table, pointsofinterest.Columns, sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID))
	if ps := poiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := poiu.mutation.UpdatedAt(); ok {
		_spec.SetField(pointsofinterest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := poiu.mutation.Name(); ok {
		_spec.SetField(pointsofinterest.FieldName, field.TypeString, value)
	}
	if value, ok := poiu.mutation.NameEn(); ok {
		_spec.SetField(pointsofinterest.FieldNameEn, field.TypeString, value)
	}
	if value, ok := poiu.mutation.NameCn(); ok {
		_spec.SetField(pointsofinterest.FieldNameCn, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Description(); ok {
		_spec.SetField(pointsofinterest.FieldDescription, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Address(); ok {
		_spec.SetField(pointsofinterest.FieldAddress, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Latitude(); ok {
		_spec.SetField(pointsofinterest.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := poiu.mutation.AddedLatitude(); ok {
		_spec.AddField(pointsofinterest.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := poiu.mutation.Longitude(); ok {
		_spec.SetField(pointsofinterest.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := poiu.mutation.AddedLongitude(); ok {
		_spec.AddField(pointsofinterest.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := poiu.mutation.GetType(); ok {
		_spec.SetField(pointsofinterest.FieldType, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Category(); ok {
		_spec.SetField(pointsofinterest.FieldCategory, field.TypeString, value)
	}
	if value, ok := poiu.mutation.Rating(); ok {
		_spec.SetField(pointsofinterest.FieldRating, field.TypeFloat32, value)
	}
	if value, ok := poiu.mutation.AddedRating(); ok {
		_spec.AddField(pointsofinterest.FieldRating, field.TypeFloat32, value)
	}
	if value, ok := poiu.mutation.RecommendedDurationMinutes(); ok {
		_spec.SetField(pointsofinterest.FieldRecommendedDurationMinutes, field.TypeInt64, value)
	}
	if value, ok := poiu.mutation.AddedRecommendedDurationMinutes(); ok {
		_spec.AddField(pointsofinterest.FieldRecommendedDurationMinutes, field.TypeInt64, value)
	}
	if poiu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CityTable,
			Columns: []string{pointsofinterest.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CityTable,
			Columns: []string{pointsofinterest.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiu.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.StateTable,
			Columns: []string{pointsofinterest.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiu.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.StateTable,
			Columns: []string{pointsofinterest.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CountryTable,
			Columns: []string{pointsofinterest.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CountryTable,
			Columns: []string{pointsofinterest.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiu.mutation.ContinentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.ContinentTable,
			Columns: []string{pointsofinterest.ContinentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(continent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiu.mutation.ContinentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.ContinentTable,
			Columns: []string{pointsofinterest.ContinentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(continent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiu.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiu.mutation.RemovedDailyItineraryIDs(); len(nodes) > 0 && !poiu.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiu.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, poiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointsofinterest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	poiu.mutation.done = true
	return n, nil
}

// PointsOfInterestUpdateOne is the builder for updating a single PointsOfInterest entity.
type PointsOfInterestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PointsOfInterestMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (poiuo *PointsOfInterestUpdateOne) SetUpdatedAt(t time.Time) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetUpdatedAt(t)
	return poiuo
}

// SetName sets the "name" field.
func (poiuo *PointsOfInterestUpdateOne) SetName(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetName(s)
	return poiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableName(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetName(*s)
	}
	return poiuo
}

// SetNameEn sets the "name_en" field.
func (poiuo *PointsOfInterestUpdateOne) SetNameEn(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetNameEn(s)
	return poiuo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableNameEn(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetNameEn(*s)
	}
	return poiuo
}

// SetNameCn sets the "name_cn" field.
func (poiuo *PointsOfInterestUpdateOne) SetNameCn(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetNameCn(s)
	return poiuo
}

// SetNillableNameCn sets the "name_cn" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableNameCn(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetNameCn(*s)
	}
	return poiuo
}

// SetDescription sets the "description" field.
func (poiuo *PointsOfInterestUpdateOne) SetDescription(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetDescription(s)
	return poiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableDescription(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetDescription(*s)
	}
	return poiuo
}

// SetAddress sets the "address" field.
func (poiuo *PointsOfInterestUpdateOne) SetAddress(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetAddress(s)
	return poiuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableAddress(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetAddress(*s)
	}
	return poiuo
}

// SetLatitude sets the "latitude" field.
func (poiuo *PointsOfInterestUpdateOne) SetLatitude(f float64) *PointsOfInterestUpdateOne {
	poiuo.mutation.ResetLatitude()
	poiuo.mutation.SetLatitude(f)
	return poiuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableLatitude(f *float64) *PointsOfInterestUpdateOne {
	if f != nil {
		poiuo.SetLatitude(*f)
	}
	return poiuo
}

// AddLatitude adds f to the "latitude" field.
func (poiuo *PointsOfInterestUpdateOne) AddLatitude(f float64) *PointsOfInterestUpdateOne {
	poiuo.mutation.AddLatitude(f)
	return poiuo
}

// SetLongitude sets the "longitude" field.
func (poiuo *PointsOfInterestUpdateOne) SetLongitude(f float64) *PointsOfInterestUpdateOne {
	poiuo.mutation.ResetLongitude()
	poiuo.mutation.SetLongitude(f)
	return poiuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableLongitude(f *float64) *PointsOfInterestUpdateOne {
	if f != nil {
		poiuo.SetLongitude(*f)
	}
	return poiuo
}

// AddLongitude adds f to the "longitude" field.
func (poiuo *PointsOfInterestUpdateOne) AddLongitude(f float64) *PointsOfInterestUpdateOne {
	poiuo.mutation.AddLongitude(f)
	return poiuo
}

// SetType sets the "type" field.
func (poiuo *PointsOfInterestUpdateOne) SetType(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetType(s)
	return poiuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableType(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetType(*s)
	}
	return poiuo
}

// SetCategory sets the "category" field.
func (poiuo *PointsOfInterestUpdateOne) SetCategory(s string) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetCategory(s)
	return poiuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableCategory(s *string) *PointsOfInterestUpdateOne {
	if s != nil {
		poiuo.SetCategory(*s)
	}
	return poiuo
}

// SetRating sets the "rating" field.
func (poiuo *PointsOfInterestUpdateOne) SetRating(f float32) *PointsOfInterestUpdateOne {
	poiuo.mutation.ResetRating()
	poiuo.mutation.SetRating(f)
	return poiuo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableRating(f *float32) *PointsOfInterestUpdateOne {
	if f != nil {
		poiuo.SetRating(*f)
	}
	return poiuo
}

// AddRating adds f to the "rating" field.
func (poiuo *PointsOfInterestUpdateOne) AddRating(f float32) *PointsOfInterestUpdateOne {
	poiuo.mutation.AddRating(f)
	return poiuo
}

// SetRecommendedDurationMinutes sets the "recommended_duration_minutes" field.
func (poiuo *PointsOfInterestUpdateOne) SetRecommendedDurationMinutes(i int64) *PointsOfInterestUpdateOne {
	poiuo.mutation.ResetRecommendedDurationMinutes()
	poiuo.mutation.SetRecommendedDurationMinutes(i)
	return poiuo
}

// SetNillableRecommendedDurationMinutes sets the "recommended_duration_minutes" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableRecommendedDurationMinutes(i *int64) *PointsOfInterestUpdateOne {
	if i != nil {
		poiuo.SetRecommendedDurationMinutes(*i)
	}
	return poiuo
}

// AddRecommendedDurationMinutes adds i to the "recommended_duration_minutes" field.
func (poiuo *PointsOfInterestUpdateOne) AddRecommendedDurationMinutes(i int64) *PointsOfInterestUpdateOne {
	poiuo.mutation.AddRecommendedDurationMinutes(i)
	return poiuo
}

// SetCityID sets the "city_id" field.
func (poiuo *PointsOfInterestUpdateOne) SetCityID(u uuid.UUID) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetCityID(u)
	return poiuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableCityID(u *uuid.UUID) *PointsOfInterestUpdateOne {
	if u != nil {
		poiuo.SetCityID(*u)
	}
	return poiuo
}

// ClearCityID clears the value of the "city_id" field.
func (poiuo *PointsOfInterestUpdateOne) ClearCityID() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearCityID()
	return poiuo
}

// SetStateID sets the "state_id" field.
func (poiuo *PointsOfInterestUpdateOne) SetStateID(u uuid.UUID) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetStateID(u)
	return poiuo
}

// SetNillableStateID sets the "state_id" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableStateID(u *uuid.UUID) *PointsOfInterestUpdateOne {
	if u != nil {
		poiuo.SetStateID(*u)
	}
	return poiuo
}

// ClearStateID clears the value of the "state_id" field.
func (poiuo *PointsOfInterestUpdateOne) ClearStateID() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearStateID()
	return poiuo
}

// SetCountryID sets the "country_id" field.
func (poiuo *PointsOfInterestUpdateOne) SetCountryID(u uuid.UUID) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetCountryID(u)
	return poiuo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableCountryID(u *uuid.UUID) *PointsOfInterestUpdateOne {
	if u != nil {
		poiuo.SetCountryID(*u)
	}
	return poiuo
}

// ClearCountryID clears the value of the "country_id" field.
func (poiuo *PointsOfInterestUpdateOne) ClearCountryID() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearCountryID()
	return poiuo
}

// SetContinentID sets the "continent_id" field.
func (poiuo *PointsOfInterestUpdateOne) SetContinentID(u uuid.UUID) *PointsOfInterestUpdateOne {
	poiuo.mutation.SetContinentID(u)
	return poiuo
}

// SetNillableContinentID sets the "continent_id" field if the given value is not nil.
func (poiuo *PointsOfInterestUpdateOne) SetNillableContinentID(u *uuid.UUID) *PointsOfInterestUpdateOne {
	if u != nil {
		poiuo.SetContinentID(*u)
	}
	return poiuo
}

// ClearContinentID clears the value of the "continent_id" field.
func (poiuo *PointsOfInterestUpdateOne) ClearContinentID() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearContinentID()
	return poiuo
}

// SetCity sets the "city" edge to the City entity.
func (poiuo *PointsOfInterestUpdateOne) SetCity(c *City) *PointsOfInterestUpdateOne {
	return poiuo.SetCityID(c.ID)
}

// SetState sets the "state" edge to the State entity.
func (poiuo *PointsOfInterestUpdateOne) SetState(s *State) *PointsOfInterestUpdateOne {
	return poiuo.SetStateID(s.ID)
}

// SetCountry sets the "country" edge to the Country entity.
func (poiuo *PointsOfInterestUpdateOne) SetCountry(c *Country) *PointsOfInterestUpdateOne {
	return poiuo.SetCountryID(c.ID)
}

// SetContinent sets the "continent" edge to the Continent entity.
func (poiuo *PointsOfInterestUpdateOne) SetContinent(c *Continent) *PointsOfInterestUpdateOne {
	return poiuo.SetContinentID(c.ID)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (poiuo *PointsOfInterestUpdateOne) AddDailyItineraryIDs(ids ...uuid.UUID) *PointsOfInterestUpdateOne {
	poiuo.mutation.AddDailyItineraryIDs(ids...)
	return poiuo
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (poiuo *PointsOfInterestUpdateOne) AddDailyItinerary(d ...*DailyItinerary) *PointsOfInterestUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return poiuo.AddDailyItineraryIDs(ids...)
}

// Mutation returns the PointsOfInterestMutation object of the builder.
func (poiuo *PointsOfInterestUpdateOne) Mutation() *PointsOfInterestMutation {
	return poiuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (poiuo *PointsOfInterestUpdateOne) ClearCity() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearCity()
	return poiuo
}

// ClearState clears the "state" edge to the State entity.
func (poiuo *PointsOfInterestUpdateOne) ClearState() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearState()
	return poiuo
}

// ClearCountry clears the "country" edge to the Country entity.
func (poiuo *PointsOfInterestUpdateOne) ClearCountry() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearCountry()
	return poiuo
}

// ClearContinent clears the "continent" edge to the Continent entity.
func (poiuo *PointsOfInterestUpdateOne) ClearContinent() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearContinent()
	return poiuo
}

// ClearDailyItinerary clears all "daily_itinerary" edges to the DailyItinerary entity.
func (poiuo *PointsOfInterestUpdateOne) ClearDailyItinerary() *PointsOfInterestUpdateOne {
	poiuo.mutation.ClearDailyItinerary()
	return poiuo
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to DailyItinerary entities by IDs.
func (poiuo *PointsOfInterestUpdateOne) RemoveDailyItineraryIDs(ids ...uuid.UUID) *PointsOfInterestUpdateOne {
	poiuo.mutation.RemoveDailyItineraryIDs(ids...)
	return poiuo
}

// RemoveDailyItinerary removes "daily_itinerary" edges to DailyItinerary entities.
func (poiuo *PointsOfInterestUpdateOne) RemoveDailyItinerary(d ...*DailyItinerary) *PointsOfInterestUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return poiuo.RemoveDailyItineraryIDs(ids...)
}

// Where appends a list predicates to the PointsOfInterestUpdate builder.
func (poiuo *PointsOfInterestUpdateOne) Where(ps ...predicate.PointsOfInterest) *PointsOfInterestUpdateOne {
	poiuo.mutation.Where(ps...)
	return poiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (poiuo *PointsOfInterestUpdateOne) Select(field string, fields ...string) *PointsOfInterestUpdateOne {
	poiuo.fields = append([]string{field}, fields...)
	return poiuo
}

// Save executes the query and returns the updated PointsOfInterest entity.
func (poiuo *PointsOfInterestUpdateOne) Save(ctx context.Context) (*PointsOfInterest, error) {
	poiuo.defaults()
	return withHooks(ctx, poiuo.sqlSave, poiuo.mutation, poiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (poiuo *PointsOfInterestUpdateOne) SaveX(ctx context.Context) *PointsOfInterest {
	node, err := poiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (poiuo *PointsOfInterestUpdateOne) Exec(ctx context.Context) error {
	_, err := poiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poiuo *PointsOfInterestUpdateOne) ExecX(ctx context.Context) {
	if err := poiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poiuo *PointsOfInterestUpdateOne) defaults() {
	if _, ok := poiuo.mutation.UpdatedAt(); !ok {
		v := pointsofinterest.UpdateDefaultUpdatedAt()
		poiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poiuo *PointsOfInterestUpdateOne) check() error {
	if v, ok := poiuo.mutation.Name(); ok {
		if err := pointsofinterest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.NameEn(); ok {
		if err := pointsofinterest.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name_en": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.NameCn(); ok {
		if err := pointsofinterest.NameCnValidator(v); err != nil {
			return &ValidationError{Name: "name_cn", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name_cn": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.Description(); ok {
		if err := pointsofinterest.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.description": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.Address(); ok {
		if err := pointsofinterest.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.address": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.GetType(); ok {
		if err := pointsofinterest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.type": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.Category(); ok {
		if err := pointsofinterest.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.category": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.Rating(); ok {
		if err := pointsofinterest.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.rating": %w`, err)}
		}
	}
	if v, ok := poiuo.mutation.RecommendedDurationMinutes(); ok {
		if err := pointsofinterest.RecommendedDurationMinutesValidator(v); err != nil {
			return &ValidationError{Name: "recommended_duration_minutes", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.recommended_duration_minutes": %w`, err)}
		}
	}
	return nil
}

func (poiuo *PointsOfInterestUpdateOne) sqlSave(ctx context.Context) (_node *PointsOfInterest, err error) {
	if err := poiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pointsofinterest.Table, pointsofinterest.Columns, sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID))
	id, ok := poiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PointsOfInterest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := poiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pointsofinterest.FieldID)
		for _, f := range fields {
			if !pointsofinterest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pointsofinterest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := poiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := poiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(pointsofinterest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := poiuo.mutation.Name(); ok {
		_spec.SetField(pointsofinterest.FieldName, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.NameEn(); ok {
		_spec.SetField(pointsofinterest.FieldNameEn, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.NameCn(); ok {
		_spec.SetField(pointsofinterest.FieldNameCn, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Description(); ok {
		_spec.SetField(pointsofinterest.FieldDescription, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Address(); ok {
		_spec.SetField(pointsofinterest.FieldAddress, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Latitude(); ok {
		_spec.SetField(pointsofinterest.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := poiuo.mutation.AddedLatitude(); ok {
		_spec.AddField(pointsofinterest.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := poiuo.mutation.Longitude(); ok {
		_spec.SetField(pointsofinterest.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := poiuo.mutation.AddedLongitude(); ok {
		_spec.AddField(pointsofinterest.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := poiuo.mutation.GetType(); ok {
		_spec.SetField(pointsofinterest.FieldType, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Category(); ok {
		_spec.SetField(pointsofinterest.FieldCategory, field.TypeString, value)
	}
	if value, ok := poiuo.mutation.Rating(); ok {
		_spec.SetField(pointsofinterest.FieldRating, field.TypeFloat32, value)
	}
	if value, ok := poiuo.mutation.AddedRating(); ok {
		_spec.AddField(pointsofinterest.FieldRating, field.TypeFloat32, value)
	}
	if value, ok := poiuo.mutation.RecommendedDurationMinutes(); ok {
		_spec.SetField(pointsofinterest.FieldRecommendedDurationMinutes, field.TypeInt64, value)
	}
	if value, ok := poiuo.mutation.AddedRecommendedDurationMinutes(); ok {
		_spec.AddField(pointsofinterest.FieldRecommendedDurationMinutes, field.TypeInt64, value)
	}
	if poiuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CityTable,
			Columns: []string{pointsofinterest.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CityTable,
			Columns: []string{pointsofinterest.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiuo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.StateTable,
			Columns: []string{pointsofinterest.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiuo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.StateTable,
			Columns: []string{pointsofinterest.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiuo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CountryTable,
			Columns: []string{pointsofinterest.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiuo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CountryTable,
			Columns: []string{pointsofinterest.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiuo.mutation.ContinentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.ContinentTable,
			Columns: []string{pointsofinterest.ContinentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(continent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiuo.mutation.ContinentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.ContinentTable,
			Columns: []string{pointsofinterest.ContinentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(continent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if poiuo.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiuo.mutation.RemovedDailyItineraryIDs(); len(nodes) > 0 && !poiuo.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := poiuo.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PointsOfInterest{config: poiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, poiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pointsofinterest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	poiuo.mutation.done = true
	return _node, nil
}
