// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/city"
	"github.com/iter-x/iter-x/internal/repo/ent/continent"
	"github.com/iter-x/iter-x/internal/repo/ent/country"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
)

// PointsOfInterestCreate is the builder for creating a PointsOfInterest entity.
type PointsOfInterestCreate struct {
	config
	mutation *PointsOfInterestMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (poic *PointsOfInterestCreate) SetCreatedAt(t time.Time) *PointsOfInterestCreate {
	poic.mutation.SetCreatedAt(t)
	return poic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableCreatedAt(t *time.Time) *PointsOfInterestCreate {
	if t != nil {
		poic.SetCreatedAt(*t)
	}
	return poic
}

// SetUpdatedAt sets the "updated_at" field.
func (poic *PointsOfInterestCreate) SetUpdatedAt(t time.Time) *PointsOfInterestCreate {
	poic.mutation.SetUpdatedAt(t)
	return poic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableUpdatedAt(t *time.Time) *PointsOfInterestCreate {
	if t != nil {
		poic.SetUpdatedAt(*t)
	}
	return poic
}

// SetName sets the "name" field.
func (poic *PointsOfInterestCreate) SetName(s string) *PointsOfInterestCreate {
	poic.mutation.SetName(s)
	return poic
}

// SetNameEn sets the "name_en" field.
func (poic *PointsOfInterestCreate) SetNameEn(s string) *PointsOfInterestCreate {
	poic.mutation.SetNameEn(s)
	return poic
}

// SetNameCn sets the "name_cn" field.
func (poic *PointsOfInterestCreate) SetNameCn(s string) *PointsOfInterestCreate {
	poic.mutation.SetNameCn(s)
	return poic
}

// SetDescription sets the "description" field.
func (poic *PointsOfInterestCreate) SetDescription(s string) *PointsOfInterestCreate {
	poic.mutation.SetDescription(s)
	return poic
}

// SetAddress sets the "address" field.
func (poic *PointsOfInterestCreate) SetAddress(s string) *PointsOfInterestCreate {
	poic.mutation.SetAddress(s)
	return poic
}

// SetLatitude sets the "latitude" field.
func (poic *PointsOfInterestCreate) SetLatitude(f float64) *PointsOfInterestCreate {
	poic.mutation.SetLatitude(f)
	return poic
}

// SetLongitude sets the "longitude" field.
func (poic *PointsOfInterestCreate) SetLongitude(f float64) *PointsOfInterestCreate {
	poic.mutation.SetLongitude(f)
	return poic
}

// SetType sets the "type" field.
func (poic *PointsOfInterestCreate) SetType(s string) *PointsOfInterestCreate {
	poic.mutation.SetType(s)
	return poic
}

// SetCategory sets the "category" field.
func (poic *PointsOfInterestCreate) SetCategory(s string) *PointsOfInterestCreate {
	poic.mutation.SetCategory(s)
	return poic
}

// SetRating sets the "rating" field.
func (poic *PointsOfInterestCreate) SetRating(f float32) *PointsOfInterestCreate {
	poic.mutation.SetRating(f)
	return poic
}

// SetRecommendedDurationMinutes sets the "recommended_duration_minutes" field.
func (poic *PointsOfInterestCreate) SetRecommendedDurationMinutes(i int64) *PointsOfInterestCreate {
	poic.mutation.SetRecommendedDurationMinutes(i)
	return poic
}

// SetID sets the "id" field.
func (poic *PointsOfInterestCreate) SetID(u uuid.UUID) *PointsOfInterestCreate {
	poic.mutation.SetID(u)
	return poic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableID(u *uuid.UUID) *PointsOfInterestCreate {
	if u != nil {
		poic.SetID(*u)
	}
	return poic
}

// SetCityID sets the "city" edge to the City entity by ID.
func (poic *PointsOfInterestCreate) SetCityID(id uuid.UUID) *PointsOfInterestCreate {
	poic.mutation.SetCityID(id)
	return poic
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableCityID(id *uuid.UUID) *PointsOfInterestCreate {
	if id != nil {
		poic = poic.SetCityID(*id)
	}
	return poic
}

// SetCity sets the "city" edge to the City entity.
func (poic *PointsOfInterestCreate) SetCity(c *City) *PointsOfInterestCreate {
	return poic.SetCityID(c.ID)
}

// SetStateID sets the "state" edge to the State entity by ID.
func (poic *PointsOfInterestCreate) SetStateID(id uuid.UUID) *PointsOfInterestCreate {
	poic.mutation.SetStateID(id)
	return poic
}

// SetNillableStateID sets the "state" edge to the State entity by ID if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableStateID(id *uuid.UUID) *PointsOfInterestCreate {
	if id != nil {
		poic = poic.SetStateID(*id)
	}
	return poic
}

// SetState sets the "state" edge to the State entity.
func (poic *PointsOfInterestCreate) SetState(s *State) *PointsOfInterestCreate {
	return poic.SetStateID(s.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (poic *PointsOfInterestCreate) SetCountryID(id uuid.UUID) *PointsOfInterestCreate {
	poic.mutation.SetCountryID(id)
	return poic
}

// SetNillableCountryID sets the "country" edge to the Country entity by ID if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableCountryID(id *uuid.UUID) *PointsOfInterestCreate {
	if id != nil {
		poic = poic.SetCountryID(*id)
	}
	return poic
}

// SetCountry sets the "country" edge to the Country entity.
func (poic *PointsOfInterestCreate) SetCountry(c *Country) *PointsOfInterestCreate {
	return poic.SetCountryID(c.ID)
}

// SetContinentID sets the "continent" edge to the Continent entity by ID.
func (poic *PointsOfInterestCreate) SetContinentID(id uuid.UUID) *PointsOfInterestCreate {
	poic.mutation.SetContinentID(id)
	return poic
}

// SetNillableContinentID sets the "continent" edge to the Continent entity by ID if the given value is not nil.
func (poic *PointsOfInterestCreate) SetNillableContinentID(id *uuid.UUID) *PointsOfInterestCreate {
	if id != nil {
		poic = poic.SetContinentID(*id)
	}
	return poic
}

// SetContinent sets the "continent" edge to the Continent entity.
func (poic *PointsOfInterestCreate) SetContinent(c *Continent) *PointsOfInterestCreate {
	return poic.SetContinentID(c.ID)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (poic *PointsOfInterestCreate) AddDailyItineraryIDs(ids ...uuid.UUID) *PointsOfInterestCreate {
	poic.mutation.AddDailyItineraryIDs(ids...)
	return poic
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (poic *PointsOfInterestCreate) AddDailyItinerary(d ...*DailyItinerary) *PointsOfInterestCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return poic.AddDailyItineraryIDs(ids...)
}

// Mutation returns the PointsOfInterestMutation object of the builder.
func (poic *PointsOfInterestCreate) Mutation() *PointsOfInterestMutation {
	return poic.mutation
}

// Save creates the PointsOfInterest in the database.
func (poic *PointsOfInterestCreate) Save(ctx context.Context) (*PointsOfInterest, error) {
	poic.defaults()
	return withHooks(ctx, poic.sqlSave, poic.mutation, poic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (poic *PointsOfInterestCreate) SaveX(ctx context.Context) *PointsOfInterest {
	v, err := poic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poic *PointsOfInterestCreate) Exec(ctx context.Context) error {
	_, err := poic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poic *PointsOfInterestCreate) ExecX(ctx context.Context) {
	if err := poic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poic *PointsOfInterestCreate) defaults() {
	if _, ok := poic.mutation.CreatedAt(); !ok {
		v := pointsofinterest.DefaultCreatedAt()
		poic.mutation.SetCreatedAt(v)
	}
	if _, ok := poic.mutation.UpdatedAt(); !ok {
		v := pointsofinterest.DefaultUpdatedAt()
		poic.mutation.SetUpdatedAt(v)
	}
	if _, ok := poic.mutation.ID(); !ok {
		v := pointsofinterest.DefaultID()
		poic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poic *PointsOfInterestCreate) check() error {
	if _, ok := poic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PointsOfInterest.created_at"`)}
	}
	if _, ok := poic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PointsOfInterest.updated_at"`)}
	}
	if _, ok := poic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PointsOfInterest.name"`)}
	}
	if v, ok := poic.mutation.Name(); ok {
		if err := pointsofinterest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name": %w`, err)}
		}
	}
	if _, ok := poic.mutation.NameEn(); !ok {
		return &ValidationError{Name: "name_en", err: errors.New(`ent: missing required field "PointsOfInterest.name_en"`)}
	}
	if v, ok := poic.mutation.NameEn(); ok {
		if err := pointsofinterest.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name_en": %w`, err)}
		}
	}
	if _, ok := poic.mutation.NameCn(); !ok {
		return &ValidationError{Name: "name_cn", err: errors.New(`ent: missing required field "PointsOfInterest.name_cn"`)}
	}
	if v, ok := poic.mutation.NameCn(); ok {
		if err := pointsofinterest.NameCnValidator(v); err != nil {
			return &ValidationError{Name: "name_cn", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.name_cn": %w`, err)}
		}
	}
	if _, ok := poic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PointsOfInterest.description"`)}
	}
	if v, ok := poic.mutation.Description(); ok {
		if err := pointsofinterest.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.description": %w`, err)}
		}
	}
	if _, ok := poic.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "PointsOfInterest.address"`)}
	}
	if v, ok := poic.mutation.Address(); ok {
		if err := pointsofinterest.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.address": %w`, err)}
		}
	}
	if _, ok := poic.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "PointsOfInterest.latitude"`)}
	}
	if _, ok := poic.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "PointsOfInterest.longitude"`)}
	}
	if _, ok := poic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PointsOfInterest.type"`)}
	}
	if v, ok := poic.mutation.GetType(); ok {
		if err := pointsofinterest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.type": %w`, err)}
		}
	}
	if _, ok := poic.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "PointsOfInterest.category"`)}
	}
	if v, ok := poic.mutation.Category(); ok {
		if err := pointsofinterest.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.category": %w`, err)}
		}
	}
	if _, ok := poic.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "PointsOfInterest.rating"`)}
	}
	if v, ok := poic.mutation.Rating(); ok {
		if err := pointsofinterest.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.rating": %w`, err)}
		}
	}
	if _, ok := poic.mutation.RecommendedDurationMinutes(); !ok {
		return &ValidationError{Name: "recommended_duration_minutes", err: errors.New(`ent: missing required field "PointsOfInterest.recommended_duration_minutes"`)}
	}
	if v, ok := poic.mutation.RecommendedDurationMinutes(); ok {
		if err := pointsofinterest.RecommendedDurationMinutesValidator(v); err != nil {
			return &ValidationError{Name: "recommended_duration_minutes", err: fmt.Errorf(`ent: validator failed for field "PointsOfInterest.recommended_duration_minutes": %w`, err)}
		}
	}
	return nil
}

func (poic *PointsOfInterestCreate) sqlSave(ctx context.Context) (*PointsOfInterest, error) {
	if err := poic.check(); err != nil {
		return nil, err
	}
	_node, _spec := poic.createSpec()
	if err := sqlgraph.CreateNode(ctx, poic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	poic.mutation.id = &_node.ID
	poic.mutation.done = true
	return _node, nil
}

func (poic *PointsOfInterestCreate) createSpec() (*PointsOfInterest, *sqlgraph.CreateSpec) {
	var (
		_node = &PointsOfInterest{config: poic.config}
		_spec = sqlgraph.NewCreateSpec(pointsofinterest.Table, sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID))
	)
	if id, ok := poic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := poic.mutation.CreatedAt(); ok {
		_spec.SetField(pointsofinterest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := poic.mutation.UpdatedAt(); ok {
		_spec.SetField(pointsofinterest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := poic.mutation.Name(); ok {
		_spec.SetField(pointsofinterest.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := poic.mutation.NameEn(); ok {
		_spec.SetField(pointsofinterest.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := poic.mutation.NameCn(); ok {
		_spec.SetField(pointsofinterest.FieldNameCn, field.TypeString, value)
		_node.NameCn = value
	}
	if value, ok := poic.mutation.Description(); ok {
		_spec.SetField(pointsofinterest.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := poic.mutation.Address(); ok {
		_spec.SetField(pointsofinterest.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := poic.mutation.Latitude(); ok {
		_spec.SetField(pointsofinterest.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := poic.mutation.Longitude(); ok {
		_spec.SetField(pointsofinterest.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := poic.mutation.GetType(); ok {
		_spec.SetField(pointsofinterest.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := poic.mutation.Category(); ok {
		_spec.SetField(pointsofinterest.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := poic.mutation.Rating(); ok {
		_spec.SetField(pointsofinterest.FieldRating, field.TypeFloat32, value)
		_node.Rating = value
	}
	if value, ok := poic.mutation.RecommendedDurationMinutes(); ok {
		_spec.SetField(pointsofinterest.FieldRecommendedDurationMinutes, field.TypeInt64, value)
		_node.RecommendedDurationMinutes = value
	}
	if nodes := poic.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CityTable,
			Columns: []string{pointsofinterest.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.city_poi = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poic.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.StateTable,
			Columns: []string{pointsofinterest.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.state_poi = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poic.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.CountryTable,
			Columns: []string{pointsofinterest.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_poi = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poic.mutation.ContinentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pointsofinterest.ContinentTable,
			Columns: []string{pointsofinterest.ContinentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(continent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.continent_poi = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poic.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pointsofinterest.DailyItineraryTable,
			Columns: []string{pointsofinterest.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PointsOfInterestCreateBulk is the builder for creating many PointsOfInterest entities in bulk.
type PointsOfInterestCreateBulk struct {
	config
	err      error
	builders []*PointsOfInterestCreate
}

// Save creates the PointsOfInterest entities in the database.
func (poicb *PointsOfInterestCreateBulk) Save(ctx context.Context) ([]*PointsOfInterest, error) {
	if poicb.err != nil {
		return nil, poicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(poicb.builders))
	nodes := make([]*PointsOfInterest, len(poicb.builders))
	mutators := make([]Mutator, len(poicb.builders))
	for i := range poicb.builders {
		func(i int, root context.Context) {
			builder := poicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PointsOfInterestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, poicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, poicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, poicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (poicb *PointsOfInterestCreateBulk) SaveX(ctx context.Context) []*PointsOfInterest {
	v, err := poicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poicb *PointsOfInterestCreateBulk) Exec(ctx context.Context) error {
	_, err := poicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poicb *PointsOfInterestCreateBulk) ExecX(ctx context.Context) {
	if err := poicb.Exec(ctx); err != nil {
		panic(err)
	}
}
