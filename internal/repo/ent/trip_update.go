// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
	"github.com/iter-x/iter-x/internal/repo/ent/user"
)

// TripUpdate is the builder for updating Trip entities.
type TripUpdate struct {
	config
	hooks    []Hook
	mutation *TripMutation
}

// Where appends a list predicates to the TripUpdate builder.
func (tu *TripUpdate) Where(ps ...predicate.Trip) *TripUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TripUpdate) SetUpdatedAt(t time.Time) *TripUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TripUpdate) SetUserID(u uuid.UUID) *TripUpdate {
	tu.mutation.SetUserID(u)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TripUpdate) SetNillableUserID(u *uuid.UUID) *TripUpdate {
	if u != nil {
		tu.SetUserID(*u)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TripUpdate) SetStatus(b bool) *TripUpdate {
	tu.mutation.SetStatus(b)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TripUpdate) SetNillableStatus(b *bool) *TripUpdate {
	if b != nil {
		tu.SetStatus(*b)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TripUpdate) SetTitle(s string) *TripUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TripUpdate) SetNillableTitle(s *string) *TripUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TripUpdate) SetDescription(s string) *TripUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDescription(s *string) *TripUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetStartDate sets the "start_date" field.
func (tu *TripUpdate) SetStartDate(t time.Time) *TripUpdate {
	tu.mutation.SetStartDate(t)
	return tu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (tu *TripUpdate) SetNillableStartDate(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetStartDate(*t)
	}
	return tu
}

// SetEndDate sets the "end_date" field.
func (tu *TripUpdate) SetEndDate(t time.Time) *TripUpdate {
	tu.mutation.SetEndDate(t)
	return tu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (tu *TripUpdate) SetNillableEndDate(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetEndDate(*t)
	}
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TripUpdate) SetUser(u *User) *TripUpdate {
	return tu.SetUserID(u.ID)
}

// AddDailyTripIDs adds the "daily_trip" edge to the DailyTrip entity by IDs.
func (tu *TripUpdate) AddDailyTripIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.AddDailyTripIDs(ids...)
	return tu
}

// AddDailyTrip adds the "daily_trip" edges to the DailyTrip entity.
func (tu *TripUpdate) AddDailyTrip(d ...*DailyTrip) *TripUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.AddDailyTripIDs(ids...)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (tu *TripUpdate) AddDailyItineraryIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.AddDailyItineraryIDs(ids...)
	return tu
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (tu *TripUpdate) AddDailyItinerary(d ...*DailyItinerary) *TripUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.AddDailyItineraryIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tu *TripUpdate) Mutation() *TripMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TripUpdate) ClearUser() *TripUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearDailyTrip clears all "daily_trip" edges to the DailyTrip entity.
func (tu *TripUpdate) ClearDailyTrip() *TripUpdate {
	tu.mutation.ClearDailyTrip()
	return tu
}

// RemoveDailyTripIDs removes the "daily_trip" edge to DailyTrip entities by IDs.
func (tu *TripUpdate) RemoveDailyTripIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.RemoveDailyTripIDs(ids...)
	return tu
}

// RemoveDailyTrip removes "daily_trip" edges to DailyTrip entities.
func (tu *TripUpdate) RemoveDailyTrip(d ...*DailyTrip) *TripUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.RemoveDailyTripIDs(ids...)
}

// ClearDailyItinerary clears all "daily_itinerary" edges to the DailyItinerary entity.
func (tu *TripUpdate) ClearDailyItinerary() *TripUpdate {
	tu.mutation.ClearDailyItinerary()
	return tu
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to DailyItinerary entities by IDs.
func (tu *TripUpdate) RemoveDailyItineraryIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.RemoveDailyItineraryIDs(ids...)
	return tu
}

// RemoveDailyItinerary removes "daily_itinerary" edges to DailyItinerary entities.
func (tu *TripUpdate) RemoveDailyItinerary(d ...*DailyItinerary) *TripUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.RemoveDailyItineraryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TripUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TripUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TripUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TripUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TripUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := trip.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TripUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := trip.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Trip.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := trip.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Trip.description": %w`, err)}
		}
	}
	if tu.mutation.UserCleared() && len(tu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Trip.user"`)
	}
	return nil
}

func (tu *TripUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(trip.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(trip.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.StartDate(); ok {
		_spec.SetField(trip.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.EndDate(); ok {
		_spec.SetField(trip.FieldEndDate, field.TypeTime, value)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedDailyTripIDs(); len(nodes) > 0 && !tu.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyItineraryTable,
			Columns: []string{trip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedDailyItineraryIDs(); len(nodes) > 0 && !tu.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyItineraryTable,
			Columns: []string{trip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyItineraryTable,
			Columns: []string{trip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TripUpdateOne is the builder for updating a single Trip entity.
type TripUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TripMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TripUpdateOne) SetUpdatedAt(t time.Time) *TripUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TripUpdateOne) SetUserID(u uuid.UUID) *TripUpdateOne {
	tuo.mutation.SetUserID(u)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableUserID(u *uuid.UUID) *TripUpdateOne {
	if u != nil {
		tuo.SetUserID(*u)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TripUpdateOne) SetStatus(b bool) *TripUpdateOne {
	tuo.mutation.SetStatus(b)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableStatus(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetStatus(*b)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TripUpdateOne) SetTitle(s string) *TripUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableTitle(s *string) *TripUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TripUpdateOne) SetDescription(s string) *TripUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDescription(s *string) *TripUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetStartDate sets the "start_date" field.
func (tuo *TripUpdateOne) SetStartDate(t time.Time) *TripUpdateOne {
	tuo.mutation.SetStartDate(t)
	return tuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableStartDate(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetStartDate(*t)
	}
	return tuo
}

// SetEndDate sets the "end_date" field.
func (tuo *TripUpdateOne) SetEndDate(t time.Time) *TripUpdateOne {
	tuo.mutation.SetEndDate(t)
	return tuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableEndDate(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetEndDate(*t)
	}
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TripUpdateOne) SetUser(u *User) *TripUpdateOne {
	return tuo.SetUserID(u.ID)
}

// AddDailyTripIDs adds the "daily_trip" edge to the DailyTrip entity by IDs.
func (tuo *TripUpdateOne) AddDailyTripIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.AddDailyTripIDs(ids...)
	return tuo
}

// AddDailyTrip adds the "daily_trip" edges to the DailyTrip entity.
func (tuo *TripUpdateOne) AddDailyTrip(d ...*DailyTrip) *TripUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.AddDailyTripIDs(ids...)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (tuo *TripUpdateOne) AddDailyItineraryIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.AddDailyItineraryIDs(ids...)
	return tuo
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (tuo *TripUpdateOne) AddDailyItinerary(d ...*DailyItinerary) *TripUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.AddDailyItineraryIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tuo *TripUpdateOne) Mutation() *TripMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TripUpdateOne) ClearUser() *TripUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearDailyTrip clears all "daily_trip" edges to the DailyTrip entity.
func (tuo *TripUpdateOne) ClearDailyTrip() *TripUpdateOne {
	tuo.mutation.ClearDailyTrip()
	return tuo
}

// RemoveDailyTripIDs removes the "daily_trip" edge to DailyTrip entities by IDs.
func (tuo *TripUpdateOne) RemoveDailyTripIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.RemoveDailyTripIDs(ids...)
	return tuo
}

// RemoveDailyTrip removes "daily_trip" edges to DailyTrip entities.
func (tuo *TripUpdateOne) RemoveDailyTrip(d ...*DailyTrip) *TripUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.RemoveDailyTripIDs(ids...)
}

// ClearDailyItinerary clears all "daily_itinerary" edges to the DailyItinerary entity.
func (tuo *TripUpdateOne) ClearDailyItinerary() *TripUpdateOne {
	tuo.mutation.ClearDailyItinerary()
	return tuo
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to DailyItinerary entities by IDs.
func (tuo *TripUpdateOne) RemoveDailyItineraryIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.RemoveDailyItineraryIDs(ids...)
	return tuo
}

// RemoveDailyItinerary removes "daily_itinerary" edges to DailyItinerary entities.
func (tuo *TripUpdateOne) RemoveDailyItinerary(d ...*DailyItinerary) *TripUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.RemoveDailyItineraryIDs(ids...)
}

// Where appends a list predicates to the TripUpdate builder.
func (tuo *TripUpdateOne) Where(ps ...predicate.Trip) *TripUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TripUpdateOne) Select(field string, fields ...string) *TripUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trip entity.
func (tuo *TripUpdateOne) Save(ctx context.Context) (*Trip, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TripUpdateOne) SaveX(ctx context.Context) *Trip {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TripUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TripUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TripUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := trip.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TripUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := trip.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Trip.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := trip.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Trip.description": %w`, err)}
		}
	}
	if tuo.mutation.UserCleared() && len(tuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Trip.user"`)
	}
	return nil
}

func (tuo *TripUpdateOne) sqlSave(ctx context.Context) (_node *Trip, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trip.FieldID)
		for _, f := range fields {
			if !trip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(trip.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(trip.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.StartDate(); ok {
		_spec.SetField(trip.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.EndDate(); ok {
		_spec.SetField(trip.FieldEndDate, field.TypeTime, value)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedDailyTripIDs(); len(nodes) > 0 && !tuo.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyItineraryTable,
			Columns: []string{trip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedDailyItineraryIDs(); len(nodes) > 0 && !tuo.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyItineraryTable,
			Columns: []string{trip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyItineraryTable,
			Columns: []string{trip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Trip{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
