// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
)

// PointsOfInterestDelete is the builder for deleting a PointsOfInterest entity.
type PointsOfInterestDelete struct {
	config
	hooks    []Hook
	mutation *PointsOfInterestMutation
}

// Where appends a list predicates to the PointsOfInterestDelete builder.
func (poid *PointsOfInterestDelete) Where(ps ...predicate.PointsOfInterest) *PointsOfInterestDelete {
	poid.mutation.Where(ps...)
	return poid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (poid *PointsOfInterestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, poid.sqlExec, poid.mutation, poid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (poid *PointsOfInterestDelete) ExecX(ctx context.Context) int {
	n, err := poid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (poid *PointsOfInterestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(pointsofinterest.Table, sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID))
	if ps := poid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, poid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	poid.mutation.done = true
	return affected, err
}

// PointsOfInterestDeleteOne is the builder for deleting a single PointsOfInterest entity.
type PointsOfInterestDeleteOne struct {
	poid *PointsOfInterestDelete
}

// Where appends a list predicates to the PointsOfInterestDelete builder.
func (poido *PointsOfInterestDeleteOne) Where(ps ...predicate.PointsOfInterest) *PointsOfInterestDeleteOne {
	poido.poid.mutation.Where(ps...)
	return poido
}

// Exec executes the deletion query.
func (poido *PointsOfInterestDeleteOne) Exec(ctx context.Context) error {
	n, err := poido.poid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{pointsofinterest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (poido *PointsOfInterestDeleteOne) ExecX(ctx context.Context) {
	if err := poido.Exec(ctx); err != nil {
		panic(err)
	}
}
