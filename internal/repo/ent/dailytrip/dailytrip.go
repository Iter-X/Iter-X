// Code generated by ent, DO NOT EDIT.

package dailytrip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dailytrip type in the database.
	Label = "daily_trip"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTripID holds the string denoting the trip_id field in the database.
	FieldTripID = "trip_id"
	// FieldDay holds the string denoting the day field in the database.
	FieldDay = "day"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeTrip holds the string denoting the trip edge name in mutations.
	EdgeTrip = "trip"
	// EdgeDailyTripItem holds the string denoting the daily_trip_item edge name in mutations.
	EdgeDailyTripItem = "daily_trip_item"
	// Table holds the table name of the dailytrip in the database.
	Table = "daily_trips"
	// TripTable is the table that holds the trip relation/edge.
	TripTable = "daily_trips"
	// TripInverseTable is the table name for the Trip entity.
	// It exists in this package in order to avoid circular dependency with the "trip" package.
	TripInverseTable = "trips"
	// TripColumn is the table column denoting the trip relation/edge.
	TripColumn = "trip_id"
	// DailyTripItemTable is the table that holds the daily_trip_item relation/edge.
	DailyTripItemTable = "daily_trip_items"
	// DailyTripItemInverseTable is the table name for the DailyTripItem entity.
	// It exists in this package in order to avoid circular dependency with the "dailytripitem" package.
	DailyTripItemInverseTable = "daily_trip_items"
	// DailyTripItemColumn is the table column denoting the daily_trip_item relation/edge.
	DailyTripItemColumn = "daily_trip_id"
)

// Columns holds all SQL columns for dailytrip fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTripID,
	FieldDay,
	FieldDate,
	FieldNotes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DayValidator is a validator for the "day" field. It is called by the builders before save.
	DayValidator func(int) error
	// NotesValidator is a validator for the "notes" field. It is called by the builders before save.
	NotesValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DailyTrip queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTripID orders the results by the trip_id field.
func ByTripID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTripID, opts...).ToFunc()
}

// ByDay orders the results by the day field.
func ByDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDay, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByTripField orders the results by trip field.
func ByTripField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTripStep(), sql.OrderByField(field, opts...))
	}
}

// ByDailyTripItemCount orders the results by daily_trip_item count.
func ByDailyTripItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDailyTripItemStep(), opts...)
	}
}

// ByDailyTripItem orders the results by daily_trip_item terms.
func ByDailyTripItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDailyTripItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTripStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TripInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TripTable, TripColumn),
	)
}
func newDailyTripItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DailyTripItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DailyTripItemTable, DailyTripItemColumn),
	)
}
