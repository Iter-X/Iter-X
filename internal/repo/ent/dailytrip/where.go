// Code generated by ent, DO NOT EDIT.

package dailytrip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldUpdatedAt, v))
}

// TripID applies equality check predicate on the "trip_id" field. It's identical to TripIDEQ.
func TripID(v uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldTripID, v))
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldDay, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldDate, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLTE(FieldUpdatedAt, v))
}

// TripIDEQ applies the EQ predicate on the "trip_id" field.
func TripIDEQ(v uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldTripID, v))
}

// TripIDNEQ applies the NEQ predicate on the "trip_id" field.
func TripIDNEQ(v uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldTripID, v))
}

// TripIDIn applies the In predicate on the "trip_id" field.
func TripIDIn(vs ...uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldTripID, vs...))
}

// TripIDNotIn applies the NotIn predicate on the "trip_id" field.
func TripIDNotIn(vs ...uuid.UUID) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldTripID, vs...))
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldDay, v))
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldDay, v))
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldDay, vs...))
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldDay, vs...))
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGT(FieldDay, v))
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGTE(FieldDay, v))
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLT(FieldDay, v))
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v int) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLTE(FieldDay, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLTE(FieldDate, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.DailyTrip {
	return predicate.DailyTrip(sql.FieldContainsFold(FieldNotes, v))
}

// HasTrip applies the HasEdge predicate on the "trip" edge.
func HasTrip() predicate.DailyTrip {
	return predicate.DailyTrip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TripTable, TripColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTripWith applies the HasEdge predicate on the "trip" edge with a given conditions (other predicates).
func HasTripWith(preds ...predicate.Trip) predicate.DailyTrip {
	return predicate.DailyTrip(func(s *sql.Selector) {
		step := newTripStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyTripItem applies the HasEdge predicate on the "daily_trip_item" edge.
func HasDailyTripItem() predicate.DailyTrip {
	return predicate.DailyTrip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DailyTripItemTable, DailyTripItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyTripItemWith applies the HasEdge predicate on the "daily_trip_item" edge with a given conditions (other predicates).
func HasDailyTripItemWith(preds ...predicate.DailyTripItem) predicate.DailyTrip {
	return predicate.DailyTrip(func(s *sql.Selector) {
		step := newDailyTripItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DailyTrip) predicate.DailyTrip {
	return predicate.DailyTrip(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DailyTrip) predicate.DailyTrip {
	return predicate.DailyTrip(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DailyTrip) predicate.DailyTrip {
	return predicate.DailyTrip(sql.NotPredicates(p))
}
