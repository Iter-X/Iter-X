// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
)

// DailyTripCreate is the builder for creating a DailyTrip entity.
type DailyTripCreate struct {
	config
	mutation *DailyTripMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dtc *DailyTripCreate) SetCreatedAt(t time.Time) *DailyTripCreate {
	dtc.mutation.SetCreatedAt(t)
	return dtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtc *DailyTripCreate) SetNillableCreatedAt(t *time.Time) *DailyTripCreate {
	if t != nil {
		dtc.SetCreatedAt(*t)
	}
	return dtc
}

// SetUpdatedAt sets the "updated_at" field.
func (dtc *DailyTripCreate) SetUpdatedAt(t time.Time) *DailyTripCreate {
	dtc.mutation.SetUpdatedAt(t)
	return dtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtc *DailyTripCreate) SetNillableUpdatedAt(t *time.Time) *DailyTripCreate {
	if t != nil {
		dtc.SetUpdatedAt(*t)
	}
	return dtc
}

// SetTripID sets the "trip_id" field.
func (dtc *DailyTripCreate) SetTripID(u uuid.UUID) *DailyTripCreate {
	dtc.mutation.SetTripID(u)
	return dtc
}

// SetDay sets the "day" field.
func (dtc *DailyTripCreate) SetDay(i int) *DailyTripCreate {
	dtc.mutation.SetDay(i)
	return dtc
}

// SetDate sets the "date" field.
func (dtc *DailyTripCreate) SetDate(t time.Time) *DailyTripCreate {
	dtc.mutation.SetDate(t)
	return dtc
}

// SetNotes sets the "notes" field.
func (dtc *DailyTripCreate) SetNotes(s string) *DailyTripCreate {
	dtc.mutation.SetNotes(s)
	return dtc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dtc *DailyTripCreate) SetNillableNotes(s *string) *DailyTripCreate {
	if s != nil {
		dtc.SetNotes(*s)
	}
	return dtc
}

// SetID sets the "id" field.
func (dtc *DailyTripCreate) SetID(u uuid.UUID) *DailyTripCreate {
	dtc.mutation.SetID(u)
	return dtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dtc *DailyTripCreate) SetNillableID(u *uuid.UUID) *DailyTripCreate {
	if u != nil {
		dtc.SetID(*u)
	}
	return dtc
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dtc *DailyTripCreate) SetTrip(t *Trip) *DailyTripCreate {
	return dtc.SetTripID(t.ID)
}

// AddDailyTripItemIDs adds the "daily_trip_item" edge to the DailyTripItem entity by IDs.
func (dtc *DailyTripCreate) AddDailyTripItemIDs(ids ...uuid.UUID) *DailyTripCreate {
	dtc.mutation.AddDailyTripItemIDs(ids...)
	return dtc
}

// AddDailyTripItem adds the "daily_trip_item" edges to the DailyTripItem entity.
func (dtc *DailyTripCreate) AddDailyTripItem(d ...*DailyTripItem) *DailyTripCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtc.AddDailyTripItemIDs(ids...)
}

// Mutation returns the DailyTripMutation object of the builder.
func (dtc *DailyTripCreate) Mutation() *DailyTripMutation {
	return dtc.mutation
}

// Save creates the DailyTrip in the database.
func (dtc *DailyTripCreate) Save(ctx context.Context) (*DailyTrip, error) {
	dtc.defaults()
	return withHooks(ctx, dtc.sqlSave, dtc.mutation, dtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DailyTripCreate) SaveX(ctx context.Context) *DailyTrip {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtc *DailyTripCreate) Exec(ctx context.Context) error {
	_, err := dtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtc *DailyTripCreate) ExecX(ctx context.Context) {
	if err := dtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtc *DailyTripCreate) defaults() {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		v := dailytrip.DefaultCreatedAt()
		dtc.mutation.SetCreatedAt(v)
	}
	if _, ok := dtc.mutation.UpdatedAt(); !ok {
		v := dailytrip.DefaultUpdatedAt()
		dtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dtc.mutation.ID(); !ok {
		v := dailytrip.DefaultID()
		dtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DailyTripCreate) check() error {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DailyTrip.created_at"`)}
	}
	if _, ok := dtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DailyTrip.updated_at"`)}
	}
	if _, ok := dtc.mutation.TripID(); !ok {
		return &ValidationError{Name: "trip_id", err: errors.New(`ent: missing required field "DailyTrip.trip_id"`)}
	}
	if _, ok := dtc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "DailyTrip.day"`)}
	}
	if v, ok := dtc.mutation.Day(); ok {
		if err := dailytrip.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "DailyTrip.day": %w`, err)}
		}
	}
	if _, ok := dtc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "DailyTrip.date"`)}
	}
	if v, ok := dtc.mutation.Notes(); ok {
		if err := dailytrip.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyTrip.notes": %w`, err)}
		}
	}
	if len(dtc.mutation.TripIDs()) == 0 {
		return &ValidationError{Name: "trip", err: errors.New(`ent: missing required edge "DailyTrip.trip"`)}
	}
	return nil
}

func (dtc *DailyTripCreate) sqlSave(ctx context.Context) (*DailyTrip, error) {
	if err := dtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dtc.mutation.id = &_node.ID
	dtc.mutation.done = true
	return _node, nil
}

func (dtc *DailyTripCreate) createSpec() (*DailyTrip, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyTrip{config: dtc.config}
		_spec = sqlgraph.NewCreateSpec(dailytrip.Table, sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID))
	)
	if id, ok := dtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dtc.mutation.CreatedAt(); ok {
		_spec.SetField(dailytrip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dtc.mutation.UpdatedAt(); ok {
		_spec.SetField(dailytrip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dtc.mutation.Day(); ok {
		_spec.SetField(dailytrip.FieldDay, field.TypeInt, value)
		_node.Day = value
	}
	if value, ok := dtc.mutation.Date(); ok {
		_spec.SetField(dailytrip.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := dtc.mutation.Notes(); ok {
		_spec.SetField(dailytrip.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := dtc.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytrip.TripTable,
			Columns: []string{dailytrip.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TripID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dtc.mutation.DailyTripItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyTripItemTable,
			Columns: []string{dailytrip.DailyTripItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DailyTripCreateBulk is the builder for creating many DailyTrip entities in bulk.
type DailyTripCreateBulk struct {
	config
	err      error
	builders []*DailyTripCreate
}

// Save creates the DailyTrip entities in the database.
func (dtcb *DailyTripCreateBulk) Save(ctx context.Context) ([]*DailyTrip, error) {
	if dtcb.err != nil {
		return nil, dtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DailyTrip, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyTripMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DailyTripCreateBulk) SaveX(ctx context.Context) []*DailyTrip {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtcb *DailyTripCreateBulk) Exec(ctx context.Context) error {
	_, err := dtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtcb *DailyTripCreateBulk) ExecX(ctx context.Context) {
	if err := dtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
