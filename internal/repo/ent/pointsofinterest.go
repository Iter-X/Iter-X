// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/city"
	"github.com/iter-x/iter-x/internal/repo/ent/continent"
	"github.com/iter-x/iter-x/internal/repo/ent/country"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
)

// PointsOfInterest is the model entity for the PointsOfInterest schema.
type PointsOfInterest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NameEn holds the value of the "name_en" field.
	NameEn string `json:"name_en,omitempty"`
	// NameCn holds the value of the "name_cn" field.
	NameCn string `json:"name_cn,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating float32 `json:"rating,omitempty"`
	// RecommendedDurationMinutes holds the value of the "recommended_duration_minutes" field.
	RecommendedDurationMinutes int64 `json:"recommended_duration_minutes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PointsOfInterestQuery when eager-loading is set.
	Edges         PointsOfInterestEdges `json:"edges"`
	city_poi      *uuid.UUID
	continent_poi *uuid.UUID
	country_poi   *uuid.UUID
	state_poi     *uuid.UUID
	selectValues  sql.SelectValues
}

// PointsOfInterestEdges holds the relations/edges for other nodes in the graph.
type PointsOfInterestEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// State holds the value of the state edge.
	State *State `json:"state,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Continent holds the value of the continent edge.
	Continent *Continent `json:"continent,omitempty"`
	// DailyItinerary holds the value of the daily_itinerary edge.
	DailyItinerary []*DailyItinerary `json:"daily_itinerary,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointsOfInterestEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointsOfInterestEdges) StateOrErr() (*State, error) {
	if e.State != nil {
		return e.State, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: state.Label}
	}
	return nil, &NotLoadedError{edge: "state"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointsOfInterestEdges) CountryOrErr() (*Country, error) {
	if e.Country != nil {
		return e.Country, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country"}
}

// ContinentOrErr returns the Continent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointsOfInterestEdges) ContinentOrErr() (*Continent, error) {
	if e.Continent != nil {
		return e.Continent, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: continent.Label}
	}
	return nil, &NotLoadedError{edge: "continent"}
}

// DailyItineraryOrErr returns the DailyItinerary value or an error if the edge
// was not loaded in eager-loading.
func (e PointsOfInterestEdges) DailyItineraryOrErr() ([]*DailyItinerary, error) {
	if e.loadedTypes[4] {
		return e.DailyItinerary, nil
	}
	return nil, &NotLoadedError{edge: "daily_itinerary"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PointsOfInterest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pointsofinterest.FieldLatitude, pointsofinterest.FieldLongitude, pointsofinterest.FieldRating:
			values[i] = new(sql.NullFloat64)
		case pointsofinterest.FieldRecommendedDurationMinutes:
			values[i] = new(sql.NullInt64)
		case pointsofinterest.FieldName, pointsofinterest.FieldNameEn, pointsofinterest.FieldNameCn, pointsofinterest.FieldDescription, pointsofinterest.FieldAddress, pointsofinterest.FieldType, pointsofinterest.FieldCategory:
			values[i] = new(sql.NullString)
		case pointsofinterest.FieldCreatedAt, pointsofinterest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case pointsofinterest.FieldID:
			values[i] = new(uuid.UUID)
		case pointsofinterest.ForeignKeys[0]: // city_poi
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case pointsofinterest.ForeignKeys[1]: // continent_poi
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case pointsofinterest.ForeignKeys[2]: // country_poi
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case pointsofinterest.ForeignKeys[3]: // state_poi
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PointsOfInterest fields.
func (poi *PointsOfInterest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pointsofinterest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				poi.ID = *value
			}
		case pointsofinterest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				poi.CreatedAt = value.Time
			}
		case pointsofinterest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				poi.UpdatedAt = value.Time
			}
		case pointsofinterest.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				poi.Name = value.String
			}
		case pointsofinterest.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				poi.NameEn = value.String
			}
		case pointsofinterest.FieldNameCn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_cn", values[i])
			} else if value.Valid {
				poi.NameCn = value.String
			}
		case pointsofinterest.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				poi.Description = value.String
			}
		case pointsofinterest.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				poi.Address = value.String
			}
		case pointsofinterest.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				poi.Latitude = value.Float64
			}
		case pointsofinterest.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				poi.Longitude = value.Float64
			}
		case pointsofinterest.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				poi.Type = value.String
			}
		case pointsofinterest.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				poi.Category = value.String
			}
		case pointsofinterest.FieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				poi.Rating = float32(value.Float64)
			}
		case pointsofinterest.FieldRecommendedDurationMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recommended_duration_minutes", values[i])
			} else if value.Valid {
				poi.RecommendedDurationMinutes = value.Int64
			}
		case pointsofinterest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field city_poi", values[i])
			} else if value.Valid {
				poi.city_poi = new(uuid.UUID)
				*poi.city_poi = *value.S.(*uuid.UUID)
			}
		case pointsofinterest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field continent_poi", values[i])
			} else if value.Valid {
				poi.continent_poi = new(uuid.UUID)
				*poi.continent_poi = *value.S.(*uuid.UUID)
			}
		case pointsofinterest.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field country_poi", values[i])
			} else if value.Valid {
				poi.country_poi = new(uuid.UUID)
				*poi.country_poi = *value.S.(*uuid.UUID)
			}
		case pointsofinterest.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field state_poi", values[i])
			} else if value.Valid {
				poi.state_poi = new(uuid.UUID)
				*poi.state_poi = *value.S.(*uuid.UUID)
			}
		default:
			poi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PointsOfInterest.
// This includes values selected through modifiers, order, etc.
func (poi *PointsOfInterest) Value(name string) (ent.Value, error) {
	return poi.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the PointsOfInterest entity.
func (poi *PointsOfInterest) QueryCity() *CityQuery {
	return NewPointsOfInterestClient(poi.config).QueryCity(poi)
}

// QueryState queries the "state" edge of the PointsOfInterest entity.
func (poi *PointsOfInterest) QueryState() *StateQuery {
	return NewPointsOfInterestClient(poi.config).QueryState(poi)
}

// QueryCountry queries the "country" edge of the PointsOfInterest entity.
func (poi *PointsOfInterest) QueryCountry() *CountryQuery {
	return NewPointsOfInterestClient(poi.config).QueryCountry(poi)
}

// QueryContinent queries the "continent" edge of the PointsOfInterest entity.
func (poi *PointsOfInterest) QueryContinent() *ContinentQuery {
	return NewPointsOfInterestClient(poi.config).QueryContinent(poi)
}

// QueryDailyItinerary queries the "daily_itinerary" edge of the PointsOfInterest entity.
func (poi *PointsOfInterest) QueryDailyItinerary() *DailyItineraryQuery {
	return NewPointsOfInterestClient(poi.config).QueryDailyItinerary(poi)
}

// Update returns a builder for updating this PointsOfInterest.
// Note that you need to call PointsOfInterest.Unwrap() before calling this method if this PointsOfInterest
// was returned from a transaction, and the transaction was committed or rolled back.
func (poi *PointsOfInterest) Update() *PointsOfInterestUpdateOne {
	return NewPointsOfInterestClient(poi.config).UpdateOne(poi)
}

// Unwrap unwraps the PointsOfInterest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (poi *PointsOfInterest) Unwrap() *PointsOfInterest {
	_tx, ok := poi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PointsOfInterest is not a transactional entity")
	}
	poi.config.driver = _tx.drv
	return poi
}

// String implements the fmt.Stringer.
func (poi *PointsOfInterest) String() string {
	var builder strings.Builder
	builder.WriteString("PointsOfInterest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", poi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(poi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(poi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(poi.Name)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(poi.NameEn)
	builder.WriteString(", ")
	builder.WriteString("name_cn=")
	builder.WriteString(poi.NameCn)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(poi.Description)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(poi.Address)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", poi.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", poi.Longitude))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(poi.Type)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(poi.Category)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", poi.Rating))
	builder.WriteString(", ")
	builder.WriteString("recommended_duration_minutes=")
	builder.WriteString(fmt.Sprintf("%v", poi.RecommendedDurationMinutes))
	builder.WriteByte(')')
	return builder.String()
}

// PointsOfInterests is a parsable slice of PointsOfInterest.
type PointsOfInterests []*PointsOfInterest
