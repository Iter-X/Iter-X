// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/iter-x/iter-x/internal/repo/ent/city"
	"github.com/iter-x/iter-x/internal/repo/ent/continent"
	"github.com/iter-x/iter-x/internal/repo/ent/country"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/media"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/refreshtoken"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
	"github.com/iter-x/iter-x/internal/repo/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// City is the client for interacting with the City builders.
	City *CityClient
	// Continent is the client for interacting with the Continent builders.
	Continent *ContinentClient
	// Country is the client for interacting with the Country builders.
	Country *CountryClient
	// DailyItinerary is the client for interacting with the DailyItinerary builders.
	DailyItinerary *DailyItineraryClient
	// DailyTrip is the client for interacting with the DailyTrip builders.
	DailyTrip *DailyTripClient
	// Media is the client for interacting with the Media builders.
	Media *MediaClient
	// PointsOfInterest is the client for interacting with the PointsOfInterest builders.
	PointsOfInterest *PointsOfInterestClient
	// RefreshToken is the client for interacting with the RefreshToken builders.
	RefreshToken *RefreshTokenClient
	// State is the client for interacting with the State builders.
	State *StateClient
	// Trip is the client for interacting with the Trip builders.
	Trip *TripClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.City = NewCityClient(c.config)
	c.Continent = NewContinentClient(c.config)
	c.Country = NewCountryClient(c.config)
	c.DailyItinerary = NewDailyItineraryClient(c.config)
	c.DailyTrip = NewDailyTripClient(c.config)
	c.Media = NewMediaClient(c.config)
	c.PointsOfInterest = NewPointsOfInterestClient(c.config)
	c.RefreshToken = NewRefreshTokenClient(c.config)
	c.State = NewStateClient(c.config)
	c.Trip = NewTripClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		City:             NewCityClient(cfg),
		Continent:        NewContinentClient(cfg),
		Country:          NewCountryClient(cfg),
		DailyItinerary:   NewDailyItineraryClient(cfg),
		DailyTrip:        NewDailyTripClient(cfg),
		Media:            NewMediaClient(cfg),
		PointsOfInterest: NewPointsOfInterestClient(cfg),
		RefreshToken:     NewRefreshTokenClient(cfg),
		State:            NewStateClient(cfg),
		Trip:             NewTripClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		City:             NewCityClient(cfg),
		Continent:        NewContinentClient(cfg),
		Country:          NewCountryClient(cfg),
		DailyItinerary:   NewDailyItineraryClient(cfg),
		DailyTrip:        NewDailyTripClient(cfg),
		Media:            NewMediaClient(cfg),
		PointsOfInterest: NewPointsOfInterestClient(cfg),
		RefreshToken:     NewRefreshTokenClient(cfg),
		State:            NewStateClient(cfg),
		Trip:             NewTripClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		City.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.City, c.Continent, c.Country, c.DailyItinerary, c.DailyTrip, c.Media,
		c.PointsOfInterest, c.RefreshToken, c.State, c.Trip, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.City, c.Continent, c.Country, c.DailyItinerary, c.DailyTrip, c.Media,
		c.PointsOfInterest, c.RefreshToken, c.State, c.Trip, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CityMutation:
		return c.City.mutate(ctx, m)
	case *ContinentMutation:
		return c.Continent.mutate(ctx, m)
	case *CountryMutation:
		return c.Country.mutate(ctx, m)
	case *DailyItineraryMutation:
		return c.DailyItinerary.mutate(ctx, m)
	case *DailyTripMutation:
		return c.DailyTrip.mutate(ctx, m)
	case *MediaMutation:
		return c.Media.mutate(ctx, m)
	case *PointsOfInterestMutation:
		return c.PointsOfInterest.mutate(ctx, m)
	case *RefreshTokenMutation:
		return c.RefreshToken.mutate(ctx, m)
	case *StateMutation:
		return c.State.mutate(ctx, m)
	case *TripMutation:
		return c.Trip.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CityClient is a client for the City schema.
type CityClient struct {
	config
}

// NewCityClient returns a client for the City from the given config.
func NewCityClient(c config) *CityClient {
	return &CityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `city.Hooks(f(g(h())))`.
func (c *CityClient) Use(hooks ...Hook) {
	c.hooks.City = append(c.hooks.City, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `city.Intercept(f(g(h())))`.
func (c *CityClient) Intercept(interceptors ...Interceptor) {
	c.inters.City = append(c.inters.City, interceptors...)
}

// Create returns a builder for creating a City entity.
func (c *CityClient) Create() *CityCreate {
	mutation := newCityMutation(c.config, OpCreate)
	return &CityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of City entities.
func (c *CityClient) CreateBulk(builders ...*CityCreate) *CityCreateBulk {
	return &CityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CityClient) MapCreateBulk(slice any, setFunc func(*CityCreate, int)) *CityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CityCreateBulk{err: fmt.Errorf("calling to CityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for City.
func (c *CityClient) Update() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CityClient) UpdateOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CityClient) UpdateOneID(id uuid.UUID) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for City.
func (c *CityClient) Delete() *CityDelete {
	mutation := newCityMutation(c.config, OpDelete)
	return &CityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CityClient) DeleteOne(ci *City) *CityDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CityClient) DeleteOneID(id uuid.UUID) *CityDeleteOne {
	builder := c.Delete().Where(city.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CityDeleteOne{builder}
}

// Query returns a query builder for City.
func (c *CityClient) Query() *CityQuery {
	return &CityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCity},
		inters: c.Interceptors(),
	}
}

// Get returns a City entity by its id.
func (c *CityClient) Get(ctx context.Context, id uuid.UUID) (*City, error) {
	return c.Query().Where(city.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CityClient) GetX(ctx context.Context, id uuid.UUID) *City {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoi queries the poi edge of a City.
func (c *CityClient) QueryPoi(ci *City) *PointsOfInterestQuery {
	query := (&PointsOfInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(pointsofinterest.Table, pointsofinterest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.PoiTable, city.PoiColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CityClient) Hooks() []Hook {
	return c.hooks.City
}

// Interceptors returns the client interceptors.
func (c *CityClient) Interceptors() []Interceptor {
	return c.inters.City
}

func (c *CityClient) mutate(ctx context.Context, m *CityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown City mutation op: %q", m.Op())
	}
}

// ContinentClient is a client for the Continent schema.
type ContinentClient struct {
	config
}

// NewContinentClient returns a client for the Continent from the given config.
func NewContinentClient(c config) *ContinentClient {
	return &ContinentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `continent.Hooks(f(g(h())))`.
func (c *ContinentClient) Use(hooks ...Hook) {
	c.hooks.Continent = append(c.hooks.Continent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `continent.Intercept(f(g(h())))`.
func (c *ContinentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Continent = append(c.inters.Continent, interceptors...)
}

// Create returns a builder for creating a Continent entity.
func (c *ContinentClient) Create() *ContinentCreate {
	mutation := newContinentMutation(c.config, OpCreate)
	return &ContinentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Continent entities.
func (c *ContinentClient) CreateBulk(builders ...*ContinentCreate) *ContinentCreateBulk {
	return &ContinentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContinentClient) MapCreateBulk(slice any, setFunc func(*ContinentCreate, int)) *ContinentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContinentCreateBulk{err: fmt.Errorf("calling to ContinentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContinentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContinentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Continent.
func (c *ContinentClient) Update() *ContinentUpdate {
	mutation := newContinentMutation(c.config, OpUpdate)
	return &ContinentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContinentClient) UpdateOne(co *Continent) *ContinentUpdateOne {
	mutation := newContinentMutation(c.config, OpUpdateOne, withContinent(co))
	return &ContinentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContinentClient) UpdateOneID(id uuid.UUID) *ContinentUpdateOne {
	mutation := newContinentMutation(c.config, OpUpdateOne, withContinentID(id))
	return &ContinentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Continent.
func (c *ContinentClient) Delete() *ContinentDelete {
	mutation := newContinentMutation(c.config, OpDelete)
	return &ContinentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContinentClient) DeleteOne(co *Continent) *ContinentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContinentClient) DeleteOneID(id uuid.UUID) *ContinentDeleteOne {
	builder := c.Delete().Where(continent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContinentDeleteOne{builder}
}

// Query returns a query builder for Continent.
func (c *ContinentClient) Query() *ContinentQuery {
	return &ContinentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContinent},
		inters: c.Interceptors(),
	}
}

// Get returns a Continent entity by its id.
func (c *ContinentClient) Get(ctx context.Context, id uuid.UUID) (*Continent, error) {
	return c.Query().Where(continent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContinentClient) GetX(ctx context.Context, id uuid.UUID) *Continent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoi queries the poi edge of a Continent.
func (c *ContinentClient) QueryPoi(co *Continent) *PointsOfInterestQuery {
	query := (&PointsOfInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(continent.Table, continent.FieldID, id),
			sqlgraph.To(pointsofinterest.Table, pointsofinterest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, continent.PoiTable, continent.PoiColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContinentClient) Hooks() []Hook {
	return c.hooks.Continent
}

// Interceptors returns the client interceptors.
func (c *ContinentClient) Interceptors() []Interceptor {
	return c.inters.Continent
}

func (c *ContinentClient) mutate(ctx context.Context, m *ContinentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContinentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContinentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContinentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContinentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Continent mutation op: %q", m.Op())
	}
}

// CountryClient is a client for the Country schema.
type CountryClient struct {
	config
}

// NewCountryClient returns a client for the Country from the given config.
func NewCountryClient(c config) *CountryClient {
	return &CountryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `country.Hooks(f(g(h())))`.
func (c *CountryClient) Use(hooks ...Hook) {
	c.hooks.Country = append(c.hooks.Country, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `country.Intercept(f(g(h())))`.
func (c *CountryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Country = append(c.inters.Country, interceptors...)
}

// Create returns a builder for creating a Country entity.
func (c *CountryClient) Create() *CountryCreate {
	mutation := newCountryMutation(c.config, OpCreate)
	return &CountryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Country entities.
func (c *CountryClient) CreateBulk(builders ...*CountryCreate) *CountryCreateBulk {
	return &CountryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CountryClient) MapCreateBulk(slice any, setFunc func(*CountryCreate, int)) *CountryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CountryCreateBulk{err: fmt.Errorf("calling to CountryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CountryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CountryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Country.
func (c *CountryClient) Update() *CountryUpdate {
	mutation := newCountryMutation(c.config, OpUpdate)
	return &CountryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CountryClient) UpdateOne(co *Country) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountry(co))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CountryClient) UpdateOneID(id uuid.UUID) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountryID(id))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Country.
func (c *CountryClient) Delete() *CountryDelete {
	mutation := newCountryMutation(c.config, OpDelete)
	return &CountryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CountryClient) DeleteOne(co *Country) *CountryDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CountryClient) DeleteOneID(id uuid.UUID) *CountryDeleteOne {
	builder := c.Delete().Where(country.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CountryDeleteOne{builder}
}

// Query returns a query builder for Country.
func (c *CountryClient) Query() *CountryQuery {
	return &CountryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCountry},
		inters: c.Interceptors(),
	}
}

// Get returns a Country entity by its id.
func (c *CountryClient) Get(ctx context.Context, id uuid.UUID) (*Country, error) {
	return c.Query().Where(country.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CountryClient) GetX(ctx context.Context, id uuid.UUID) *Country {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoi queries the poi edge of a Country.
func (c *CountryClient) QueryPoi(co *Country) *PointsOfInterestQuery {
	query := (&PointsOfInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(pointsofinterest.Table, pointsofinterest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, country.PoiTable, country.PoiColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CountryClient) Hooks() []Hook {
	return c.hooks.Country
}

// Interceptors returns the client interceptors.
func (c *CountryClient) Interceptors() []Interceptor {
	return c.inters.Country
}

func (c *CountryClient) mutate(ctx context.Context, m *CountryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CountryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CountryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CountryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Country mutation op: %q", m.Op())
	}
}

// DailyItineraryClient is a client for the DailyItinerary schema.
type DailyItineraryClient struct {
	config
}

// NewDailyItineraryClient returns a client for the DailyItinerary from the given config.
func NewDailyItineraryClient(c config) *DailyItineraryClient {
	return &DailyItineraryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dailyitinerary.Hooks(f(g(h())))`.
func (c *DailyItineraryClient) Use(hooks ...Hook) {
	c.hooks.DailyItinerary = append(c.hooks.DailyItinerary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dailyitinerary.Intercept(f(g(h())))`.
func (c *DailyItineraryClient) Intercept(interceptors ...Interceptor) {
	c.inters.DailyItinerary = append(c.inters.DailyItinerary, interceptors...)
}

// Create returns a builder for creating a DailyItinerary entity.
func (c *DailyItineraryClient) Create() *DailyItineraryCreate {
	mutation := newDailyItineraryMutation(c.config, OpCreate)
	return &DailyItineraryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DailyItinerary entities.
func (c *DailyItineraryClient) CreateBulk(builders ...*DailyItineraryCreate) *DailyItineraryCreateBulk {
	return &DailyItineraryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DailyItineraryClient) MapCreateBulk(slice any, setFunc func(*DailyItineraryCreate, int)) *DailyItineraryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DailyItineraryCreateBulk{err: fmt.Errorf("calling to DailyItineraryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DailyItineraryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DailyItineraryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DailyItinerary.
func (c *DailyItineraryClient) Update() *DailyItineraryUpdate {
	mutation := newDailyItineraryMutation(c.config, OpUpdate)
	return &DailyItineraryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DailyItineraryClient) UpdateOne(di *DailyItinerary) *DailyItineraryUpdateOne {
	mutation := newDailyItineraryMutation(c.config, OpUpdateOne, withDailyItinerary(di))
	return &DailyItineraryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DailyItineraryClient) UpdateOneID(id uuid.UUID) *DailyItineraryUpdateOne {
	mutation := newDailyItineraryMutation(c.config, OpUpdateOne, withDailyItineraryID(id))
	return &DailyItineraryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DailyItinerary.
func (c *DailyItineraryClient) Delete() *DailyItineraryDelete {
	mutation := newDailyItineraryMutation(c.config, OpDelete)
	return &DailyItineraryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DailyItineraryClient) DeleteOne(di *DailyItinerary) *DailyItineraryDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DailyItineraryClient) DeleteOneID(id uuid.UUID) *DailyItineraryDeleteOne {
	builder := c.Delete().Where(dailyitinerary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DailyItineraryDeleteOne{builder}
}

// Query returns a query builder for DailyItinerary.
func (c *DailyItineraryClient) Query() *DailyItineraryQuery {
	return &DailyItineraryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDailyItinerary},
		inters: c.Interceptors(),
	}
}

// Get returns a DailyItinerary entity by its id.
func (c *DailyItineraryClient) Get(ctx context.Context, id uuid.UUID) (*DailyItinerary, error) {
	return c.Query().Where(dailyitinerary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DailyItineraryClient) GetX(ctx context.Context, id uuid.UUID) *DailyItinerary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrip queries the trip edge of a DailyItinerary.
func (c *DailyItineraryClient) QueryTrip(di *DailyItinerary) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyitinerary.Table, dailyitinerary.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailyitinerary.TripTable, dailyitinerary.TripColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDailyTrip queries the daily_trip edge of a DailyItinerary.
func (c *DailyItineraryClient) QueryDailyTrip(di *DailyItinerary) *DailyTripQuery {
	query := (&DailyTripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyitinerary.Table, dailyitinerary.FieldID, id),
			sqlgraph.To(dailytrip.Table, dailytrip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailyitinerary.DailyTripTable, dailyitinerary.DailyTripColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoi queries the poi edge of a DailyItinerary.
func (c *DailyItineraryClient) QueryPoi(di *DailyItinerary) *PointsOfInterestQuery {
	query := (&PointsOfInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailyitinerary.Table, dailyitinerary.FieldID, id),
			sqlgraph.To(pointsofinterest.Table, pointsofinterest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailyitinerary.PoiTable, dailyitinerary.PoiColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DailyItineraryClient) Hooks() []Hook {
	return c.hooks.DailyItinerary
}

// Interceptors returns the client interceptors.
func (c *DailyItineraryClient) Interceptors() []Interceptor {
	return c.inters.DailyItinerary
}

func (c *DailyItineraryClient) mutate(ctx context.Context, m *DailyItineraryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DailyItineraryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DailyItineraryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DailyItineraryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DailyItineraryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DailyItinerary mutation op: %q", m.Op())
	}
}

// DailyTripClient is a client for the DailyTrip schema.
type DailyTripClient struct {
	config
}

// NewDailyTripClient returns a client for the DailyTrip from the given config.
func NewDailyTripClient(c config) *DailyTripClient {
	return &DailyTripClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dailytrip.Hooks(f(g(h())))`.
func (c *DailyTripClient) Use(hooks ...Hook) {
	c.hooks.DailyTrip = append(c.hooks.DailyTrip, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dailytrip.Intercept(f(g(h())))`.
func (c *DailyTripClient) Intercept(interceptors ...Interceptor) {
	c.inters.DailyTrip = append(c.inters.DailyTrip, interceptors...)
}

// Create returns a builder for creating a DailyTrip entity.
func (c *DailyTripClient) Create() *DailyTripCreate {
	mutation := newDailyTripMutation(c.config, OpCreate)
	return &DailyTripCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DailyTrip entities.
func (c *DailyTripClient) CreateBulk(builders ...*DailyTripCreate) *DailyTripCreateBulk {
	return &DailyTripCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DailyTripClient) MapCreateBulk(slice any, setFunc func(*DailyTripCreate, int)) *DailyTripCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DailyTripCreateBulk{err: fmt.Errorf("calling to DailyTripClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DailyTripCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DailyTripCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DailyTrip.
func (c *DailyTripClient) Update() *DailyTripUpdate {
	mutation := newDailyTripMutation(c.config, OpUpdate)
	return &DailyTripUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DailyTripClient) UpdateOne(dt *DailyTrip) *DailyTripUpdateOne {
	mutation := newDailyTripMutation(c.config, OpUpdateOne, withDailyTrip(dt))
	return &DailyTripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DailyTripClient) UpdateOneID(id uuid.UUID) *DailyTripUpdateOne {
	mutation := newDailyTripMutation(c.config, OpUpdateOne, withDailyTripID(id))
	return &DailyTripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DailyTrip.
func (c *DailyTripClient) Delete() *DailyTripDelete {
	mutation := newDailyTripMutation(c.config, OpDelete)
	return &DailyTripDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DailyTripClient) DeleteOne(dt *DailyTrip) *DailyTripDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DailyTripClient) DeleteOneID(id uuid.UUID) *DailyTripDeleteOne {
	builder := c.Delete().Where(dailytrip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DailyTripDeleteOne{builder}
}

// Query returns a query builder for DailyTrip.
func (c *DailyTripClient) Query() *DailyTripQuery {
	return &DailyTripQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDailyTrip},
		inters: c.Interceptors(),
	}
}

// Get returns a DailyTrip entity by its id.
func (c *DailyTripClient) Get(ctx context.Context, id uuid.UUID) (*DailyTrip, error) {
	return c.Query().Where(dailytrip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DailyTripClient) GetX(ctx context.Context, id uuid.UUID) *DailyTrip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrip queries the trip edge of a DailyTrip.
func (c *DailyTripClient) QueryTrip(dt *DailyTrip) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailytrip.Table, dailytrip.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailytrip.TripTable, dailytrip.TripColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDailyItinerary queries the daily_itinerary edge of a DailyTrip.
func (c *DailyTripClient) QueryDailyItinerary(dt *DailyTrip) *DailyItineraryQuery {
	query := (&DailyItineraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dailytrip.Table, dailytrip.FieldID, id),
			sqlgraph.To(dailyitinerary.Table, dailyitinerary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dailytrip.DailyItineraryTable, dailytrip.DailyItineraryColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DailyTripClient) Hooks() []Hook {
	return c.hooks.DailyTrip
}

// Interceptors returns the client interceptors.
func (c *DailyTripClient) Interceptors() []Interceptor {
	return c.inters.DailyTrip
}

func (c *DailyTripClient) mutate(ctx context.Context, m *DailyTripMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DailyTripCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DailyTripUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DailyTripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DailyTripDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DailyTrip mutation op: %q", m.Op())
	}
}

// MediaClient is a client for the Media schema.
type MediaClient struct {
	config
}

// NewMediaClient returns a client for the Media from the given config.
func NewMediaClient(c config) *MediaClient {
	return &MediaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `media.Hooks(f(g(h())))`.
func (c *MediaClient) Use(hooks ...Hook) {
	c.hooks.Media = append(c.hooks.Media, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `media.Intercept(f(g(h())))`.
func (c *MediaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Media = append(c.inters.Media, interceptors...)
}

// Create returns a builder for creating a Media entity.
func (c *MediaClient) Create() *MediaCreate {
	mutation := newMediaMutation(c.config, OpCreate)
	return &MediaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Media entities.
func (c *MediaClient) CreateBulk(builders ...*MediaCreate) *MediaCreateBulk {
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MediaClient) MapCreateBulk(slice any, setFunc func(*MediaCreate, int)) *MediaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MediaCreateBulk{err: fmt.Errorf("calling to MediaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MediaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Media.
func (c *MediaClient) Update() *MediaUpdate {
	mutation := newMediaMutation(c.config, OpUpdate)
	return &MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaClient) UpdateOne(m *Media) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMedia(m))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaClient) UpdateOneID(id uuid.UUID) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMediaID(id))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Media.
func (c *MediaClient) Delete() *MediaDelete {
	mutation := newMediaMutation(c.config, OpDelete)
	return &MediaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediaClient) DeleteOne(m *Media) *MediaDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediaClient) DeleteOneID(id uuid.UUID) *MediaDeleteOne {
	builder := c.Delete().Where(media.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaDeleteOne{builder}
}

// Query returns a query builder for Media.
func (c *MediaClient) Query() *MediaQuery {
	return &MediaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedia},
		inters: c.Interceptors(),
	}
}

// Get returns a Media entity by its id.
func (c *MediaClient) Get(ctx context.Context, id uuid.UUID) (*Media, error) {
	return c.Query().Where(media.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaClient) GetX(ctx context.Context, id uuid.UUID) *Media {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MediaClient) Hooks() []Hook {
	return c.hooks.Media
}

// Interceptors returns the client interceptors.
func (c *MediaClient) Interceptors() []Interceptor {
	return c.inters.Media
}

func (c *MediaClient) mutate(ctx context.Context, m *MediaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Media mutation op: %q", m.Op())
	}
}

// PointsOfInterestClient is a client for the PointsOfInterest schema.
type PointsOfInterestClient struct {
	config
}

// NewPointsOfInterestClient returns a client for the PointsOfInterest from the given config.
func NewPointsOfInterestClient(c config) *PointsOfInterestClient {
	return &PointsOfInterestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointsofinterest.Hooks(f(g(h())))`.
func (c *PointsOfInterestClient) Use(hooks ...Hook) {
	c.hooks.PointsOfInterest = append(c.hooks.PointsOfInterest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pointsofinterest.Intercept(f(g(h())))`.
func (c *PointsOfInterestClient) Intercept(interceptors ...Interceptor) {
	c.inters.PointsOfInterest = append(c.inters.PointsOfInterest, interceptors...)
}

// Create returns a builder for creating a PointsOfInterest entity.
func (c *PointsOfInterestClient) Create() *PointsOfInterestCreate {
	mutation := newPointsOfInterestMutation(c.config, OpCreate)
	return &PointsOfInterestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PointsOfInterest entities.
func (c *PointsOfInterestClient) CreateBulk(builders ...*PointsOfInterestCreate) *PointsOfInterestCreateBulk {
	return &PointsOfInterestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PointsOfInterestClient) MapCreateBulk(slice any, setFunc func(*PointsOfInterestCreate, int)) *PointsOfInterestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PointsOfInterestCreateBulk{err: fmt.Errorf("calling to PointsOfInterestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PointsOfInterestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PointsOfInterestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PointsOfInterest.
func (c *PointsOfInterestClient) Update() *PointsOfInterestUpdate {
	mutation := newPointsOfInterestMutation(c.config, OpUpdate)
	return &PointsOfInterestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointsOfInterestClient) UpdateOne(poi *PointsOfInterest) *PointsOfInterestUpdateOne {
	mutation := newPointsOfInterestMutation(c.config, OpUpdateOne, withPointsOfInterest(poi))
	return &PointsOfInterestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointsOfInterestClient) UpdateOneID(id uuid.UUID) *PointsOfInterestUpdateOne {
	mutation := newPointsOfInterestMutation(c.config, OpUpdateOne, withPointsOfInterestID(id))
	return &PointsOfInterestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PointsOfInterest.
func (c *PointsOfInterestClient) Delete() *PointsOfInterestDelete {
	mutation := newPointsOfInterestMutation(c.config, OpDelete)
	return &PointsOfInterestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PointsOfInterestClient) DeleteOne(poi *PointsOfInterest) *PointsOfInterestDeleteOne {
	return c.DeleteOneID(poi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PointsOfInterestClient) DeleteOneID(id uuid.UUID) *PointsOfInterestDeleteOne {
	builder := c.Delete().Where(pointsofinterest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointsOfInterestDeleteOne{builder}
}

// Query returns a query builder for PointsOfInterest.
func (c *PointsOfInterestClient) Query() *PointsOfInterestQuery {
	return &PointsOfInterestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePointsOfInterest},
		inters: c.Interceptors(),
	}
}

// Get returns a PointsOfInterest entity by its id.
func (c *PointsOfInterestClient) Get(ctx context.Context, id uuid.UUID) (*PointsOfInterest, error) {
	return c.Query().Where(pointsofinterest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointsOfInterestClient) GetX(ctx context.Context, id uuid.UUID) *PointsOfInterest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a PointsOfInterest.
func (c *PointsOfInterestClient) QueryCity(poi *PointsOfInterest) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := poi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.CityTable, pointsofinterest.CityColumn),
		)
		fromV = sqlgraph.Neighbors(poi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryState queries the state edge of a PointsOfInterest.
func (c *PointsOfInterestClient) QueryState(poi *PointsOfInterest) *StateQuery {
	query := (&StateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := poi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, id),
			sqlgraph.To(state.Table, state.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.StateTable, pointsofinterest.StateColumn),
		)
		fromV = sqlgraph.Neighbors(poi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountry queries the country edge of a PointsOfInterest.
func (c *PointsOfInterestClient) QueryCountry(poi *PointsOfInterest) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := poi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.CountryTable, pointsofinterest.CountryColumn),
		)
		fromV = sqlgraph.Neighbors(poi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContinent queries the continent edge of a PointsOfInterest.
func (c *PointsOfInterestClient) QueryContinent(poi *PointsOfInterest) *ContinentQuery {
	query := (&ContinentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := poi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, id),
			sqlgraph.To(continent.Table, continent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.ContinentTable, pointsofinterest.ContinentColumn),
		)
		fromV = sqlgraph.Neighbors(poi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDailyItinerary queries the daily_itinerary edge of a PointsOfInterest.
func (c *PointsOfInterestClient) QueryDailyItinerary(poi *PointsOfInterest) *DailyItineraryQuery {
	query := (&DailyItineraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := poi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, id),
			sqlgraph.To(dailyitinerary.Table, dailyitinerary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pointsofinterest.DailyItineraryTable, pointsofinterest.DailyItineraryColumn),
		)
		fromV = sqlgraph.Neighbors(poi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PointsOfInterestClient) Hooks() []Hook {
	return c.hooks.PointsOfInterest
}

// Interceptors returns the client interceptors.
func (c *PointsOfInterestClient) Interceptors() []Interceptor {
	return c.inters.PointsOfInterest
}

func (c *PointsOfInterestClient) mutate(ctx context.Context, m *PointsOfInterestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PointsOfInterestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PointsOfInterestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PointsOfInterestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PointsOfInterestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PointsOfInterest mutation op: %q", m.Op())
	}
}

// RefreshTokenClient is a client for the RefreshToken schema.
type RefreshTokenClient struct {
	config
}

// NewRefreshTokenClient returns a client for the RefreshToken from the given config.
func NewRefreshTokenClient(c config) *RefreshTokenClient {
	return &RefreshTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `refreshtoken.Hooks(f(g(h())))`.
func (c *RefreshTokenClient) Use(hooks ...Hook) {
	c.hooks.RefreshToken = append(c.hooks.RefreshToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `refreshtoken.Intercept(f(g(h())))`.
func (c *RefreshTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.RefreshToken = append(c.inters.RefreshToken, interceptors...)
}

// Create returns a builder for creating a RefreshToken entity.
func (c *RefreshTokenClient) Create() *RefreshTokenCreate {
	mutation := newRefreshTokenMutation(c.config, OpCreate)
	return &RefreshTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RefreshToken entities.
func (c *RefreshTokenClient) CreateBulk(builders ...*RefreshTokenCreate) *RefreshTokenCreateBulk {
	return &RefreshTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RefreshTokenClient) MapCreateBulk(slice any, setFunc func(*RefreshTokenCreate, int)) *RefreshTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RefreshTokenCreateBulk{err: fmt.Errorf("calling to RefreshTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RefreshTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RefreshTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RefreshToken.
func (c *RefreshTokenClient) Update() *RefreshTokenUpdate {
	mutation := newRefreshTokenMutation(c.config, OpUpdate)
	return &RefreshTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RefreshTokenClient) UpdateOne(rt *RefreshToken) *RefreshTokenUpdateOne {
	mutation := newRefreshTokenMutation(c.config, OpUpdateOne, withRefreshToken(rt))
	return &RefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RefreshTokenClient) UpdateOneID(id uuid.UUID) *RefreshTokenUpdateOne {
	mutation := newRefreshTokenMutation(c.config, OpUpdateOne, withRefreshTokenID(id))
	return &RefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RefreshToken.
func (c *RefreshTokenClient) Delete() *RefreshTokenDelete {
	mutation := newRefreshTokenMutation(c.config, OpDelete)
	return &RefreshTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RefreshTokenClient) DeleteOne(rt *RefreshToken) *RefreshTokenDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RefreshTokenClient) DeleteOneID(id uuid.UUID) *RefreshTokenDeleteOne {
	builder := c.Delete().Where(refreshtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RefreshTokenDeleteOne{builder}
}

// Query returns a query builder for RefreshToken.
func (c *RefreshTokenClient) Query() *RefreshTokenQuery {
	return &RefreshTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRefreshToken},
		inters: c.Interceptors(),
	}
}

// Get returns a RefreshToken entity by its id.
func (c *RefreshTokenClient) Get(ctx context.Context, id uuid.UUID) (*RefreshToken, error) {
	return c.Query().Where(refreshtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RefreshTokenClient) GetX(ctx context.Context, id uuid.UUID) *RefreshToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a RefreshToken.
func (c *RefreshTokenClient) QueryUser(rt *RefreshToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(refreshtoken.Table, refreshtoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, refreshtoken.UserTable, refreshtoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RefreshTokenClient) Hooks() []Hook {
	return c.hooks.RefreshToken
}

// Interceptors returns the client interceptors.
func (c *RefreshTokenClient) Interceptors() []Interceptor {
	return c.inters.RefreshToken
}

func (c *RefreshTokenClient) mutate(ctx context.Context, m *RefreshTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RefreshTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RefreshTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RefreshTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RefreshToken mutation op: %q", m.Op())
	}
}

// StateClient is a client for the State schema.
type StateClient struct {
	config
}

// NewStateClient returns a client for the State from the given config.
func NewStateClient(c config) *StateClient {
	return &StateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `state.Hooks(f(g(h())))`.
func (c *StateClient) Use(hooks ...Hook) {
	c.hooks.State = append(c.hooks.State, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `state.Intercept(f(g(h())))`.
func (c *StateClient) Intercept(interceptors ...Interceptor) {
	c.inters.State = append(c.inters.State, interceptors...)
}

// Create returns a builder for creating a State entity.
func (c *StateClient) Create() *StateCreate {
	mutation := newStateMutation(c.config, OpCreate)
	return &StateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of State entities.
func (c *StateClient) CreateBulk(builders ...*StateCreate) *StateCreateBulk {
	return &StateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StateClient) MapCreateBulk(slice any, setFunc func(*StateCreate, int)) *StateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StateCreateBulk{err: fmt.Errorf("calling to StateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for State.
func (c *StateClient) Update() *StateUpdate {
	mutation := newStateMutation(c.config, OpUpdate)
	return &StateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StateClient) UpdateOne(s *State) *StateUpdateOne {
	mutation := newStateMutation(c.config, OpUpdateOne, withState(s))
	return &StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StateClient) UpdateOneID(id uuid.UUID) *StateUpdateOne {
	mutation := newStateMutation(c.config, OpUpdateOne, withStateID(id))
	return &StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for State.
func (c *StateClient) Delete() *StateDelete {
	mutation := newStateMutation(c.config, OpDelete)
	return &StateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StateClient) DeleteOne(s *State) *StateDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StateClient) DeleteOneID(id uuid.UUID) *StateDeleteOne {
	builder := c.Delete().Where(state.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StateDeleteOne{builder}
}

// Query returns a query builder for State.
func (c *StateClient) Query() *StateQuery {
	return &StateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeState},
		inters: c.Interceptors(),
	}
}

// Get returns a State entity by its id.
func (c *StateClient) Get(ctx context.Context, id uuid.UUID) (*State, error) {
	return c.Query().Where(state.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StateClient) GetX(ctx context.Context, id uuid.UUID) *State {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoi queries the poi edge of a State.
func (c *StateClient) QueryPoi(s *State) *PointsOfInterestQuery {
	query := (&PointsOfInterestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(state.Table, state.FieldID, id),
			sqlgraph.To(pointsofinterest.Table, pointsofinterest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, state.PoiTable, state.PoiColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StateClient) Hooks() []Hook {
	return c.hooks.State
}

// Interceptors returns the client interceptors.
func (c *StateClient) Interceptors() []Interceptor {
	return c.inters.State
}

func (c *StateClient) mutate(ctx context.Context, m *StateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown State mutation op: %q", m.Op())
	}
}

// TripClient is a client for the Trip schema.
type TripClient struct {
	config
}

// NewTripClient returns a client for the Trip from the given config.
func NewTripClient(c config) *TripClient {
	return &TripClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trip.Hooks(f(g(h())))`.
func (c *TripClient) Use(hooks ...Hook) {
	c.hooks.Trip = append(c.hooks.Trip, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trip.Intercept(f(g(h())))`.
func (c *TripClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trip = append(c.inters.Trip, interceptors...)
}

// Create returns a builder for creating a Trip entity.
func (c *TripClient) Create() *TripCreate {
	mutation := newTripMutation(c.config, OpCreate)
	return &TripCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trip entities.
func (c *TripClient) CreateBulk(builders ...*TripCreate) *TripCreateBulk {
	return &TripCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TripClient) MapCreateBulk(slice any, setFunc func(*TripCreate, int)) *TripCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TripCreateBulk{err: fmt.Errorf("calling to TripClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TripCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TripCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trip.
func (c *TripClient) Update() *TripUpdate {
	mutation := newTripMutation(c.config, OpUpdate)
	return &TripUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TripClient) UpdateOne(t *Trip) *TripUpdateOne {
	mutation := newTripMutation(c.config, OpUpdateOne, withTrip(t))
	return &TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TripClient) UpdateOneID(id uuid.UUID) *TripUpdateOne {
	mutation := newTripMutation(c.config, OpUpdateOne, withTripID(id))
	return &TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trip.
func (c *TripClient) Delete() *TripDelete {
	mutation := newTripMutation(c.config, OpDelete)
	return &TripDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TripClient) DeleteOne(t *Trip) *TripDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TripClient) DeleteOneID(id uuid.UUID) *TripDeleteOne {
	builder := c.Delete().Where(trip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TripDeleteOne{builder}
}

// Query returns a query builder for Trip.
func (c *TripClient) Query() *TripQuery {
	return &TripQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrip},
		inters: c.Interceptors(),
	}
}

// Get returns a Trip entity by its id.
func (c *TripClient) Get(ctx context.Context, id uuid.UUID) (*Trip, error) {
	return c.Query().Where(trip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TripClient) GetX(ctx context.Context, id uuid.UUID) *Trip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Trip.
func (c *TripClient) QueryUser(t *Trip) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trip.UserTable, trip.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDailyTrip queries the daily_trip edge of a Trip.
func (c *TripClient) QueryDailyTrip(t *Trip) *DailyTripQuery {
	query := (&DailyTripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(dailytrip.Table, dailytrip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trip.DailyTripTable, trip.DailyTripColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDailyItinerary queries the daily_itinerary edge of a Trip.
func (c *TripClient) QueryDailyItinerary(t *Trip) *DailyItineraryQuery {
	query := (&DailyItineraryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(dailyitinerary.Table, dailyitinerary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trip.DailyItineraryTable, trip.DailyItineraryColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TripClient) Hooks() []Hook {
	return c.hooks.Trip
}

// Interceptors returns the client interceptors.
func (c *TripClient) Interceptors() []Interceptor {
	return c.inters.Trip
}

func (c *TripClient) mutate(ctx context.Context, m *TripMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TripCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TripUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TripDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trip mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRefreshToken queries the refresh_token edge of a User.
func (c *UserClient) QueryRefreshToken(u *User) *RefreshTokenQuery {
	query := (&RefreshTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(refreshtoken.Table, refreshtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RefreshTokenTable, user.RefreshTokenColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrip queries the trip edge of a User.
func (c *UserClient) QueryTrip(u *User) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TripTable, user.TripColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		City, Continent, Country, DailyItinerary, DailyTrip, Media, PointsOfInterest,
		RefreshToken, State, Trip, User []ent.Hook
	}
	inters struct {
		City, Continent, Country, DailyItinerary, DailyTrip, Media, PointsOfInterest,
		RefreshToken, State, Trip, User []ent.Interceptor
	}
)
