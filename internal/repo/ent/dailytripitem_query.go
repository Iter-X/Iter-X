// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
)

// DailyTripItemQuery is the builder for querying DailyTripItem entities.
type DailyTripItemQuery struct {
	config
	ctx           *QueryContext
	order         []dailytripitem.OrderOption
	inters        []Interceptor
	predicates    []predicate.DailyTripItem
	withTrip      *TripQuery
	withDailyTrip *DailyTripQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DailyTripItemQuery builder.
func (dtiq *DailyTripItemQuery) Where(ps ...predicate.DailyTripItem) *DailyTripItemQuery {
	dtiq.predicates = append(dtiq.predicates, ps...)
	return dtiq
}

// Limit the number of records to be returned by this query.
func (dtiq *DailyTripItemQuery) Limit(limit int) *DailyTripItemQuery {
	dtiq.ctx.Limit = &limit
	return dtiq
}

// Offset to start from.
func (dtiq *DailyTripItemQuery) Offset(offset int) *DailyTripItemQuery {
	dtiq.ctx.Offset = &offset
	return dtiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dtiq *DailyTripItemQuery) Unique(unique bool) *DailyTripItemQuery {
	dtiq.ctx.Unique = &unique
	return dtiq
}

// Order specifies how the records should be ordered.
func (dtiq *DailyTripItemQuery) Order(o ...dailytripitem.OrderOption) *DailyTripItemQuery {
	dtiq.order = append(dtiq.order, o...)
	return dtiq
}

// QueryTrip chains the current query on the "trip" edge.
func (dtiq *DailyTripItemQuery) QueryTrip() *TripQuery {
	query := (&TripClient{config: dtiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dtiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dtiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dailytripitem.Table, dailytripitem.FieldID, selector),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailytripitem.TripTable, dailytripitem.TripColumn),
		)
		fromU = sqlgraph.SetNeighbors(dtiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDailyTrip chains the current query on the "daily_trip" edge.
func (dtiq *DailyTripItemQuery) QueryDailyTrip() *DailyTripQuery {
	query := (&DailyTripClient{config: dtiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dtiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dtiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dailytripitem.Table, dailytripitem.FieldID, selector),
			sqlgraph.To(dailytrip.Table, dailytrip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dailytripitem.DailyTripTable, dailytripitem.DailyTripColumn),
		)
		fromU = sqlgraph.SetNeighbors(dtiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DailyTripItem entity from the query.
// Returns a *NotFoundError when no DailyTripItem was found.
func (dtiq *DailyTripItemQuery) First(ctx context.Context) (*DailyTripItem, error) {
	nodes, err := dtiq.Limit(1).All(setContextOp(ctx, dtiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dailytripitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) FirstX(ctx context.Context) *DailyTripItem {
	node, err := dtiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DailyTripItem ID from the query.
// Returns a *NotFoundError when no DailyTripItem ID was found.
func (dtiq *DailyTripItemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dtiq.Limit(1).IDs(setContextOp(ctx, dtiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dailytripitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dtiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DailyTripItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DailyTripItem entity is found.
// Returns a *NotFoundError when no DailyTripItem entities are found.
func (dtiq *DailyTripItemQuery) Only(ctx context.Context) (*DailyTripItem, error) {
	nodes, err := dtiq.Limit(2).All(setContextOp(ctx, dtiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dailytripitem.Label}
	default:
		return nil, &NotSingularError{dailytripitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) OnlyX(ctx context.Context) *DailyTripItem {
	node, err := dtiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DailyTripItem ID in the query.
// Returns a *NotSingularError when more than one DailyTripItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (dtiq *DailyTripItemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dtiq.Limit(2).IDs(setContextOp(ctx, dtiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dailytripitem.Label}
	default:
		err = &NotSingularError{dailytripitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dtiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DailyTripItems.
func (dtiq *DailyTripItemQuery) All(ctx context.Context) ([]*DailyTripItem, error) {
	ctx = setContextOp(ctx, dtiq.ctx, ent.OpQueryAll)
	if err := dtiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DailyTripItem, *DailyTripItemQuery]()
	return withInterceptors[[]*DailyTripItem](ctx, dtiq, qr, dtiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) AllX(ctx context.Context) []*DailyTripItem {
	nodes, err := dtiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DailyTripItem IDs.
func (dtiq *DailyTripItemQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dtiq.ctx.Unique == nil && dtiq.path != nil {
		dtiq.Unique(true)
	}
	ctx = setContextOp(ctx, dtiq.ctx, ent.OpQueryIDs)
	if err = dtiq.Select(dailytripitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dtiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dtiq *DailyTripItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dtiq.ctx, ent.OpQueryCount)
	if err := dtiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dtiq, querierCount[*DailyTripItemQuery](), dtiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) CountX(ctx context.Context) int {
	count, err := dtiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dtiq *DailyTripItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dtiq.ctx, ent.OpQueryExist)
	switch _, err := dtiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dtiq *DailyTripItemQuery) ExistX(ctx context.Context) bool {
	exist, err := dtiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DailyTripItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dtiq *DailyTripItemQuery) Clone() *DailyTripItemQuery {
	if dtiq == nil {
		return nil
	}
	return &DailyTripItemQuery{
		config:        dtiq.config,
		ctx:           dtiq.ctx.Clone(),
		order:         append([]dailytripitem.OrderOption{}, dtiq.order...),
		inters:        append([]Interceptor{}, dtiq.inters...),
		predicates:    append([]predicate.DailyTripItem{}, dtiq.predicates...),
		withTrip:      dtiq.withTrip.Clone(),
		withDailyTrip: dtiq.withDailyTrip.Clone(),
		// clone intermediate query.
		sql:  dtiq.sql.Clone(),
		path: dtiq.path,
	}
}

// WithTrip tells the query-builder to eager-load the nodes that are connected to
// the "trip" edge. The optional arguments are used to configure the query builder of the edge.
func (dtiq *DailyTripItemQuery) WithTrip(opts ...func(*TripQuery)) *DailyTripItemQuery {
	query := (&TripClient{config: dtiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dtiq.withTrip = query
	return dtiq
}

// WithDailyTrip tells the query-builder to eager-load the nodes that are connected to
// the "daily_trip" edge. The optional arguments are used to configure the query builder of the edge.
func (dtiq *DailyTripItemQuery) WithDailyTrip(opts ...func(*DailyTripQuery)) *DailyTripItemQuery {
	query := (&DailyTripClient{config: dtiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dtiq.withDailyTrip = query
	return dtiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DailyTripItem.Query().
//		GroupBy(dailytripitem.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dtiq *DailyTripItemQuery) GroupBy(field string, fields ...string) *DailyTripItemGroupBy {
	dtiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DailyTripItemGroupBy{build: dtiq}
	grbuild.flds = &dtiq.ctx.Fields
	grbuild.label = dailytripitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DailyTripItem.Query().
//		Select(dailytripitem.FieldCreatedAt).
//		Scan(ctx, &v)
func (dtiq *DailyTripItemQuery) Select(fields ...string) *DailyTripItemSelect {
	dtiq.ctx.Fields = append(dtiq.ctx.Fields, fields...)
	sbuild := &DailyTripItemSelect{DailyTripItemQuery: dtiq}
	sbuild.label = dailytripitem.Label
	sbuild.flds, sbuild.scan = &dtiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DailyTripItemSelect configured with the given aggregations.
func (dtiq *DailyTripItemQuery) Aggregate(fns ...AggregateFunc) *DailyTripItemSelect {
	return dtiq.Select().Aggregate(fns...)
}

func (dtiq *DailyTripItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dtiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dtiq); err != nil {
				return err
			}
		}
	}
	for _, f := range dtiq.ctx.Fields {
		if !dailytripitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dtiq.path != nil {
		prev, err := dtiq.path(ctx)
		if err != nil {
			return err
		}
		dtiq.sql = prev
	}
	return nil
}

func (dtiq *DailyTripItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DailyTripItem, error) {
	var (
		nodes       = []*DailyTripItem{}
		_spec       = dtiq.querySpec()
		loadedTypes = [2]bool{
			dtiq.withTrip != nil,
			dtiq.withDailyTrip != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DailyTripItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DailyTripItem{config: dtiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dtiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dtiq.withTrip; query != nil {
		if err := dtiq.loadTrip(ctx, query, nodes, nil,
			func(n *DailyTripItem, e *Trip) { n.Edges.Trip = e }); err != nil {
			return nil, err
		}
	}
	if query := dtiq.withDailyTrip; query != nil {
		if err := dtiq.loadDailyTrip(ctx, query, nodes, nil,
			func(n *DailyTripItem, e *DailyTrip) { n.Edges.DailyTrip = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dtiq *DailyTripItemQuery) loadTrip(ctx context.Context, query *TripQuery, nodes []*DailyTripItem, init func(*DailyTripItem), assign func(*DailyTripItem, *Trip)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DailyTripItem)
	for i := range nodes {
		fk := nodes[i].TripID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(trip.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "trip_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dtiq *DailyTripItemQuery) loadDailyTrip(ctx context.Context, query *DailyTripQuery, nodes []*DailyTripItem, init func(*DailyTripItem), assign func(*DailyTripItem, *DailyTrip)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DailyTripItem)
	for i := range nodes {
		fk := nodes[i].DailyTripID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(dailytrip.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "daily_trip_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dtiq *DailyTripItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dtiq.querySpec()
	_spec.Node.Columns = dtiq.ctx.Fields
	if len(dtiq.ctx.Fields) > 0 {
		_spec.Unique = dtiq.ctx.Unique != nil && *dtiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dtiq.driver, _spec)
}

func (dtiq *DailyTripItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(dailytripitem.Table, dailytripitem.Columns, sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID))
	_spec.From = dtiq.sql
	if unique := dtiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dtiq.path != nil {
		_spec.Unique = true
	}
	if fields := dtiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailytripitem.FieldID)
		for i := range fields {
			if fields[i] != dailytripitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dtiq.withTrip != nil {
			_spec.Node.AddColumnOnce(dailytripitem.FieldTripID)
		}
		if dtiq.withDailyTrip != nil {
			_spec.Node.AddColumnOnce(dailytripitem.FieldDailyTripID)
		}
	}
	if ps := dtiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dtiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dtiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dtiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dtiq *DailyTripItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dtiq.driver.Dialect())
	t1 := builder.Table(dailytripitem.Table)
	columns := dtiq.ctx.Fields
	if len(columns) == 0 {
		columns = dailytripitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dtiq.sql != nil {
		selector = dtiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dtiq.ctx.Unique != nil && *dtiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dtiq.predicates {
		p(selector)
	}
	for _, p := range dtiq.order {
		p(selector)
	}
	if offset := dtiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dtiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DailyTripItemGroupBy is the group-by builder for DailyTripItem entities.
type DailyTripItemGroupBy struct {
	selector
	build *DailyTripItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dtigb *DailyTripItemGroupBy) Aggregate(fns ...AggregateFunc) *DailyTripItemGroupBy {
	dtigb.fns = append(dtigb.fns, fns...)
	return dtigb
}

// Scan applies the selector query and scans the result into the given value.
func (dtigb *DailyTripItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dtigb.build.ctx, ent.OpQueryGroupBy)
	if err := dtigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DailyTripItemQuery, *DailyTripItemGroupBy](ctx, dtigb.build, dtigb, dtigb.build.inters, v)
}

func (dtigb *DailyTripItemGroupBy) sqlScan(ctx context.Context, root *DailyTripItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dtigb.fns))
	for _, fn := range dtigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dtigb.flds)+len(dtigb.fns))
		for _, f := range *dtigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dtigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dtigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DailyTripItemSelect is the builder for selecting fields of DailyTripItem entities.
type DailyTripItemSelect struct {
	*DailyTripItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dtis *DailyTripItemSelect) Aggregate(fns ...AggregateFunc) *DailyTripItemSelect {
	dtis.fns = append(dtis.fns, fns...)
	return dtis
}

// Scan applies the selector query and scans the result into the given value.
func (dtis *DailyTripItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dtis.ctx, ent.OpQuerySelect)
	if err := dtis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DailyTripItemQuery, *DailyTripItemSelect](ctx, dtis.DailyTripItemQuery, dtis, dtis.inters, v)
}

func (dtis *DailyTripItemSelect) sqlScan(ctx context.Context, root *DailyTripItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dtis.fns))
	for _, fn := range dtis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dtis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dtis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
