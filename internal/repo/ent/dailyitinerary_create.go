// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
)

// DailyItineraryCreate is the builder for creating a DailyItinerary entity.
type DailyItineraryCreate struct {
	config
	mutation *DailyItineraryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dic *DailyItineraryCreate) SetCreatedAt(t time.Time) *DailyItineraryCreate {
	dic.mutation.SetCreatedAt(t)
	return dic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dic *DailyItineraryCreate) SetNillableCreatedAt(t *time.Time) *DailyItineraryCreate {
	if t != nil {
		dic.SetCreatedAt(*t)
	}
	return dic
}

// SetUpdatedAt sets the "updated_at" field.
func (dic *DailyItineraryCreate) SetUpdatedAt(t time.Time) *DailyItineraryCreate {
	dic.mutation.SetUpdatedAt(t)
	return dic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dic *DailyItineraryCreate) SetNillableUpdatedAt(t *time.Time) *DailyItineraryCreate {
	if t != nil {
		dic.SetUpdatedAt(*t)
	}
	return dic
}

// SetTripID sets the "trip_id" field.
func (dic *DailyItineraryCreate) SetTripID(u uuid.UUID) *DailyItineraryCreate {
	dic.mutation.SetTripID(u)
	return dic
}

// SetDailyTripID sets the "daily_trip_id" field.
func (dic *DailyItineraryCreate) SetDailyTripID(u uuid.UUID) *DailyItineraryCreate {
	dic.mutation.SetDailyTripID(u)
	return dic
}

// SetPoiID sets the "poi_id" field.
func (dic *DailyItineraryCreate) SetPoiID(u uuid.UUID) *DailyItineraryCreate {
	dic.mutation.SetPoiID(u)
	return dic
}

// SetNotes sets the "notes" field.
func (dic *DailyItineraryCreate) SetNotes(s string) *DailyItineraryCreate {
	dic.mutation.SetNotes(s)
	return dic
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dic *DailyItineraryCreate) SetNillableNotes(s *string) *DailyItineraryCreate {
	if s != nil {
		dic.SetNotes(*s)
	}
	return dic
}

// SetID sets the "id" field.
func (dic *DailyItineraryCreate) SetID(u uuid.UUID) *DailyItineraryCreate {
	dic.mutation.SetID(u)
	return dic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dic *DailyItineraryCreate) SetNillableID(u *uuid.UUID) *DailyItineraryCreate {
	if u != nil {
		dic.SetID(*u)
	}
	return dic
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dic *DailyItineraryCreate) SetTrip(t *Trip) *DailyItineraryCreate {
	return dic.SetTripID(t.ID)
}

// SetDailyTrip sets the "daily_trip" edge to the DailyTrip entity.
func (dic *DailyItineraryCreate) SetDailyTrip(d *DailyTrip) *DailyItineraryCreate {
	return dic.SetDailyTripID(d.ID)
}

// SetPoi sets the "poi" edge to the PointsOfInterest entity.
func (dic *DailyItineraryCreate) SetPoi(p *PointsOfInterest) *DailyItineraryCreate {
	return dic.SetPoiID(p.ID)
}

// Mutation returns the DailyItineraryMutation object of the builder.
func (dic *DailyItineraryCreate) Mutation() *DailyItineraryMutation {
	return dic.mutation
}

// Save creates the DailyItinerary in the database.
func (dic *DailyItineraryCreate) Save(ctx context.Context) (*DailyItinerary, error) {
	dic.defaults()
	return withHooks(ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DailyItineraryCreate) SaveX(ctx context.Context) *DailyItinerary {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DailyItineraryCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DailyItineraryCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DailyItineraryCreate) defaults() {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		v := dailyitinerary.DefaultCreatedAt()
		dic.mutation.SetCreatedAt(v)
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		v := dailyitinerary.DefaultUpdatedAt()
		dic.mutation.SetUpdatedAt(v)
	}
	if _, ok := dic.mutation.ID(); !ok {
		v := dailyitinerary.DefaultID()
		dic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DailyItineraryCreate) check() error {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DailyItinerary.created_at"`)}
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DailyItinerary.updated_at"`)}
	}
	if _, ok := dic.mutation.TripID(); !ok {
		return &ValidationError{Name: "trip_id", err: errors.New(`ent: missing required field "DailyItinerary.trip_id"`)}
	}
	if _, ok := dic.mutation.DailyTripID(); !ok {
		return &ValidationError{Name: "daily_trip_id", err: errors.New(`ent: missing required field "DailyItinerary.daily_trip_id"`)}
	}
	if _, ok := dic.mutation.PoiID(); !ok {
		return &ValidationError{Name: "poi_id", err: errors.New(`ent: missing required field "DailyItinerary.poi_id"`)}
	}
	if v, ok := dic.mutation.Notes(); ok {
		if err := dailyitinerary.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyItinerary.notes": %w`, err)}
		}
	}
	if len(dic.mutation.TripIDs()) == 0 {
		return &ValidationError{Name: "trip", err: errors.New(`ent: missing required edge "DailyItinerary.trip"`)}
	}
	if len(dic.mutation.DailyTripIDs()) == 0 {
		return &ValidationError{Name: "daily_trip", err: errors.New(`ent: missing required edge "DailyItinerary.daily_trip"`)}
	}
	if len(dic.mutation.PoiIDs()) == 0 {
		return &ValidationError{Name: "poi", err: errors.New(`ent: missing required edge "DailyItinerary.poi"`)}
	}
	return nil
}

func (dic *DailyItineraryCreate) sqlSave(ctx context.Context) (*DailyItinerary, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DailyItineraryCreate) createSpec() (*DailyItinerary, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyItinerary{config: dic.config}
		_spec = sqlgraph.NewCreateSpec(dailyitinerary.Table, sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID))
	)
	if id, ok := dic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dic.mutation.CreatedAt(); ok {
		_spec.SetField(dailyitinerary.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dic.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyitinerary.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dic.mutation.Notes(); ok {
		_spec.SetField(dailyitinerary.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := dic.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.TripTable,
			Columns: []string{dailyitinerary.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TripID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.DailyTripTable,
			Columns: []string{dailyitinerary.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DailyTripID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.PoiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.PoiTable,
			Columns: []string{dailyitinerary.PoiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PoiID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DailyItineraryCreateBulk is the builder for creating many DailyItinerary entities in bulk.
type DailyItineraryCreateBulk struct {
	config
	err      error
	builders []*DailyItineraryCreate
}

// Save creates the DailyItinerary entities in the database.
func (dicb *DailyItineraryCreateBulk) Save(ctx context.Context) ([]*DailyItinerary, error) {
	if dicb.err != nil {
		return nil, dicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DailyItinerary, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyItineraryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DailyItineraryCreateBulk) SaveX(ctx context.Context) []*DailyItinerary {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DailyItineraryCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DailyItineraryCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
