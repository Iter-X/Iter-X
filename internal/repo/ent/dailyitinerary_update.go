// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
)

// DailyItineraryUpdate is the builder for updating DailyItinerary entities.
type DailyItineraryUpdate struct {
	config
	hooks    []Hook
	mutation *DailyItineraryMutation
}

// Where appends a list predicates to the DailyItineraryUpdate builder.
func (diu *DailyItineraryUpdate) Where(ps ...predicate.DailyItinerary) *DailyItineraryUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetUpdatedAt sets the "updated_at" field.
func (diu *DailyItineraryUpdate) SetUpdatedAt(t time.Time) *DailyItineraryUpdate {
	diu.mutation.SetUpdatedAt(t)
	return diu
}

// SetTripID sets the "trip_id" field.
func (diu *DailyItineraryUpdate) SetTripID(u uuid.UUID) *DailyItineraryUpdate {
	diu.mutation.SetTripID(u)
	return diu
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (diu *DailyItineraryUpdate) SetNillableTripID(u *uuid.UUID) *DailyItineraryUpdate {
	if u != nil {
		diu.SetTripID(*u)
	}
	return diu
}

// SetDailyTripID sets the "daily_trip_id" field.
func (diu *DailyItineraryUpdate) SetDailyTripID(u uuid.UUID) *DailyItineraryUpdate {
	diu.mutation.SetDailyTripID(u)
	return diu
}

// SetNillableDailyTripID sets the "daily_trip_id" field if the given value is not nil.
func (diu *DailyItineraryUpdate) SetNillableDailyTripID(u *uuid.UUID) *DailyItineraryUpdate {
	if u != nil {
		diu.SetDailyTripID(*u)
	}
	return diu
}

// SetPoiID sets the "poi_id" field.
func (diu *DailyItineraryUpdate) SetPoiID(u uuid.UUID) *DailyItineraryUpdate {
	diu.mutation.SetPoiID(u)
	return diu
}

// SetNillablePoiID sets the "poi_id" field if the given value is not nil.
func (diu *DailyItineraryUpdate) SetNillablePoiID(u *uuid.UUID) *DailyItineraryUpdate {
	if u != nil {
		diu.SetPoiID(*u)
	}
	return diu
}

// SetNotes sets the "notes" field.
func (diu *DailyItineraryUpdate) SetNotes(s string) *DailyItineraryUpdate {
	diu.mutation.SetNotes(s)
	return diu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (diu *DailyItineraryUpdate) SetNillableNotes(s *string) *DailyItineraryUpdate {
	if s != nil {
		diu.SetNotes(*s)
	}
	return diu
}

// ClearNotes clears the value of the "notes" field.
func (diu *DailyItineraryUpdate) ClearNotes() *DailyItineraryUpdate {
	diu.mutation.ClearNotes()
	return diu
}

// SetTrip sets the "trip" edge to the Trip entity.
func (diu *DailyItineraryUpdate) SetTrip(t *Trip) *DailyItineraryUpdate {
	return diu.SetTripID(t.ID)
}

// SetDailyTrip sets the "daily_trip" edge to the DailyTrip entity.
func (diu *DailyItineraryUpdate) SetDailyTrip(d *DailyTrip) *DailyItineraryUpdate {
	return diu.SetDailyTripID(d.ID)
}

// SetPoi sets the "poi" edge to the PointsOfInterest entity.
func (diu *DailyItineraryUpdate) SetPoi(p *PointsOfInterest) *DailyItineraryUpdate {
	return diu.SetPoiID(p.ID)
}

// Mutation returns the DailyItineraryMutation object of the builder.
func (diu *DailyItineraryUpdate) Mutation() *DailyItineraryMutation {
	return diu.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (diu *DailyItineraryUpdate) ClearTrip() *DailyItineraryUpdate {
	diu.mutation.ClearTrip()
	return diu
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (diu *DailyItineraryUpdate) ClearDailyTrip() *DailyItineraryUpdate {
	diu.mutation.ClearDailyTrip()
	return diu
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (diu *DailyItineraryUpdate) ClearPoi() *DailyItineraryUpdate {
	diu.mutation.ClearPoi()
	return diu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DailyItineraryUpdate) Save(ctx context.Context) (int, error) {
	diu.defaults()
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DailyItineraryUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DailyItineraryUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DailyItineraryUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diu *DailyItineraryUpdate) defaults() {
	if _, ok := diu.mutation.UpdatedAt(); !ok {
		v := dailyitinerary.UpdateDefaultUpdatedAt()
		diu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DailyItineraryUpdate) check() error {
	if v, ok := diu.mutation.Notes(); ok {
		if err := dailyitinerary.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyItinerary.notes": %w`, err)}
		}
	}
	if diu.mutation.TripCleared() && len(diu.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyItinerary.trip"`)
	}
	if diu.mutation.DailyTripCleared() && len(diu.mutation.DailyTripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyItinerary.daily_trip"`)
	}
	if diu.mutation.PoiCleared() && len(diu.mutation.PoiIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyItinerary.poi"`)
	}
	return nil
}

func (diu *DailyItineraryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := diu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailyitinerary.Table, dailyitinerary.Columns, sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyitinerary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := diu.mutation.Notes(); ok {
		_spec.SetField(dailyitinerary.FieldNotes, field.TypeString, value)
	}
	if diu.mutation.NotesCleared() {
		_spec.ClearField(dailyitinerary.FieldNotes, field.TypeString)
	}
	if diu.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.TripTable,
			Columns: []string{dailyitinerary.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.TripTable,
			Columns: []string{dailyitinerary.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diu.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.DailyTripTable,
			Columns: []string{dailyitinerary.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.DailyTripTable,
			Columns: []string{dailyitinerary.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diu.mutation.PoiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.PoiTable,
			Columns: []string{dailyitinerary.PoiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.PoiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.PoiTable,
			Columns: []string{dailyitinerary.PoiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailyitinerary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DailyItineraryUpdateOne is the builder for updating a single DailyItinerary entity.
type DailyItineraryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DailyItineraryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (diuo *DailyItineraryUpdateOne) SetUpdatedAt(t time.Time) *DailyItineraryUpdateOne {
	diuo.mutation.SetUpdatedAt(t)
	return diuo
}

// SetTripID sets the "trip_id" field.
func (diuo *DailyItineraryUpdateOne) SetTripID(u uuid.UUID) *DailyItineraryUpdateOne {
	diuo.mutation.SetTripID(u)
	return diuo
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (diuo *DailyItineraryUpdateOne) SetNillableTripID(u *uuid.UUID) *DailyItineraryUpdateOne {
	if u != nil {
		diuo.SetTripID(*u)
	}
	return diuo
}

// SetDailyTripID sets the "daily_trip_id" field.
func (diuo *DailyItineraryUpdateOne) SetDailyTripID(u uuid.UUID) *DailyItineraryUpdateOne {
	diuo.mutation.SetDailyTripID(u)
	return diuo
}

// SetNillableDailyTripID sets the "daily_trip_id" field if the given value is not nil.
func (diuo *DailyItineraryUpdateOne) SetNillableDailyTripID(u *uuid.UUID) *DailyItineraryUpdateOne {
	if u != nil {
		diuo.SetDailyTripID(*u)
	}
	return diuo
}

// SetPoiID sets the "poi_id" field.
func (diuo *DailyItineraryUpdateOne) SetPoiID(u uuid.UUID) *DailyItineraryUpdateOne {
	diuo.mutation.SetPoiID(u)
	return diuo
}

// SetNillablePoiID sets the "poi_id" field if the given value is not nil.
func (diuo *DailyItineraryUpdateOne) SetNillablePoiID(u *uuid.UUID) *DailyItineraryUpdateOne {
	if u != nil {
		diuo.SetPoiID(*u)
	}
	return diuo
}

// SetNotes sets the "notes" field.
func (diuo *DailyItineraryUpdateOne) SetNotes(s string) *DailyItineraryUpdateOne {
	diuo.mutation.SetNotes(s)
	return diuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (diuo *DailyItineraryUpdateOne) SetNillableNotes(s *string) *DailyItineraryUpdateOne {
	if s != nil {
		diuo.SetNotes(*s)
	}
	return diuo
}

// ClearNotes clears the value of the "notes" field.
func (diuo *DailyItineraryUpdateOne) ClearNotes() *DailyItineraryUpdateOne {
	diuo.mutation.ClearNotes()
	return diuo
}

// SetTrip sets the "trip" edge to the Trip entity.
func (diuo *DailyItineraryUpdateOne) SetTrip(t *Trip) *DailyItineraryUpdateOne {
	return diuo.SetTripID(t.ID)
}

// SetDailyTrip sets the "daily_trip" edge to the DailyTrip entity.
func (diuo *DailyItineraryUpdateOne) SetDailyTrip(d *DailyTrip) *DailyItineraryUpdateOne {
	return diuo.SetDailyTripID(d.ID)
}

// SetPoi sets the "poi" edge to the PointsOfInterest entity.
func (diuo *DailyItineraryUpdateOne) SetPoi(p *PointsOfInterest) *DailyItineraryUpdateOne {
	return diuo.SetPoiID(p.ID)
}

// Mutation returns the DailyItineraryMutation object of the builder.
func (diuo *DailyItineraryUpdateOne) Mutation() *DailyItineraryMutation {
	return diuo.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (diuo *DailyItineraryUpdateOne) ClearTrip() *DailyItineraryUpdateOne {
	diuo.mutation.ClearTrip()
	return diuo
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (diuo *DailyItineraryUpdateOne) ClearDailyTrip() *DailyItineraryUpdateOne {
	diuo.mutation.ClearDailyTrip()
	return diuo
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (diuo *DailyItineraryUpdateOne) ClearPoi() *DailyItineraryUpdateOne {
	diuo.mutation.ClearPoi()
	return diuo
}

// Where appends a list predicates to the DailyItineraryUpdate builder.
func (diuo *DailyItineraryUpdateOne) Where(ps ...predicate.DailyItinerary) *DailyItineraryUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DailyItineraryUpdateOne) Select(field string, fields ...string) *DailyItineraryUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DailyItinerary entity.
func (diuo *DailyItineraryUpdateOne) Save(ctx context.Context) (*DailyItinerary, error) {
	diuo.defaults()
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DailyItineraryUpdateOne) SaveX(ctx context.Context) *DailyItinerary {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DailyItineraryUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DailyItineraryUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diuo *DailyItineraryUpdateOne) defaults() {
	if _, ok := diuo.mutation.UpdatedAt(); !ok {
		v := dailyitinerary.UpdateDefaultUpdatedAt()
		diuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DailyItineraryUpdateOne) check() error {
	if v, ok := diuo.mutation.Notes(); ok {
		if err := dailyitinerary.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyItinerary.notes": %w`, err)}
		}
	}
	if diuo.mutation.TripCleared() && len(diuo.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyItinerary.trip"`)
	}
	if diuo.mutation.DailyTripCleared() && len(diuo.mutation.DailyTripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyItinerary.daily_trip"`)
	}
	if diuo.mutation.PoiCleared() && len(diuo.mutation.PoiIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyItinerary.poi"`)
	}
	return nil
}

func (diuo *DailyItineraryUpdateOne) sqlSave(ctx context.Context) (_node *DailyItinerary, err error) {
	if err := diuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailyitinerary.Table, dailyitinerary.Columns, sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DailyItinerary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailyitinerary.FieldID)
		for _, f := range fields {
			if !dailyitinerary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dailyitinerary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dailyitinerary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := diuo.mutation.Notes(); ok {
		_spec.SetField(dailyitinerary.FieldNotes, field.TypeString, value)
	}
	if diuo.mutation.NotesCleared() {
		_spec.ClearField(dailyitinerary.FieldNotes, field.TypeString)
	}
	if diuo.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.TripTable,
			Columns: []string{dailyitinerary.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.TripTable,
			Columns: []string{dailyitinerary.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diuo.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.DailyTripTable,
			Columns: []string{dailyitinerary.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.DailyTripTable,
			Columns: []string{dailyitinerary.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diuo.mutation.PoiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.PoiTable,
			Columns: []string{dailyitinerary.PoiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.PoiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailyitinerary.PoiTable,
			Columns: []string{dailyitinerary.PoiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DailyItinerary{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailyitinerary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
