// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/common/model"
	"github.com/iter-x/iter-x/internal/repo/ent/city"
	"github.com/iter-x/iter-x/internal/repo/ent/continent"
	"github.com/iter-x/iter-x/internal/repo/ent/country"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/media"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/refreshtoken"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
	"github.com/iter-x/iter-x/internal/repo/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCity             = "City"
	TypeContinent        = "Continent"
	TypeCountry          = "Country"
	TypeDailyItinerary   = "DailyItinerary"
	TypeDailyTrip        = "DailyTrip"
	TypeMedia            = "Media"
	TypePointsOfInterest = "PointsOfInterest"
	TypeRefreshToken     = "RefreshToken"
	TypeState            = "State"
	TypeTrip             = "Trip"
	TypeUser             = "User"
)

// CityMutation represents an operation that mutates the City nodes in the graph.
type CityMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	name_en       *string
	name_cn       *string
	clearedFields map[string]struct{}
	poi           map[uuid.UUID]struct{}
	removedpoi    map[uuid.UUID]struct{}
	clearedpoi    bool
	done          bool
	oldValue      func(context.Context) (*City, error)
	predicates    []predicate.City
}

var _ ent.Mutation = (*CityMutation)(nil)

// cityOption allows management of the mutation configuration using functional options.
type cityOption func(*CityMutation)

// newCityMutation creates new mutation for the City entity.
func newCityMutation(c config, op Op, opts ...cityOption) *CityMutation {
	m := &CityMutation{
		config:        c,
		op:            op,
		typ:           TypeCity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCityID sets the ID field of the mutation.
func withCityID(id uuid.UUID) cityOption {
	return func(m *CityMutation) {
		var (
			err   error
			once  sync.Once
			value *City
		)
		m.oldValue = func(ctx context.Context) (*City, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().City.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCity sets the old City of the mutation.
func withCity(node *City) cityOption {
	return func(m *CityMutation) {
		m.oldValue = func(context.Context) (*City, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of City entities.
func (m *CityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().City.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CityMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *CityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CityMutation) ResetName() {
	m.name = nil
}

// SetNameEn sets the "name_en" field.
func (m *CityMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *CityMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *CityMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameCn sets the "name_cn" field.
func (m *CityMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *CityMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the City entity.
// If the City object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CityMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *CityMutation) ResetNameCn() {
	m.name_cn = nil
}

// AddPoiIDs adds the "poi" edge to the PointsOfInterest entity by ids.
func (m *CityMutation) AddPoiIDs(ids ...uuid.UUID) {
	if m.poi == nil {
		m.poi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.poi[ids[i]] = struct{}{}
	}
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (m *CityMutation) ClearPoi() {
	m.clearedpoi = true
}

// PoiCleared reports if the "poi" edge to the PointsOfInterest entity was cleared.
func (m *CityMutation) PoiCleared() bool {
	return m.clearedpoi
}

// RemovePoiIDs removes the "poi" edge to the PointsOfInterest entity by IDs.
func (m *CityMutation) RemovePoiIDs(ids ...uuid.UUID) {
	if m.removedpoi == nil {
		m.removedpoi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.poi, ids[i])
		m.removedpoi[ids[i]] = struct{}{}
	}
}

// RemovedPoi returns the removed IDs of the "poi" edge to the PointsOfInterest entity.
func (m *CityMutation) RemovedPoiIDs() (ids []uuid.UUID) {
	for id := range m.removedpoi {
		ids = append(ids, id)
	}
	return
}

// PoiIDs returns the "poi" edge IDs in the mutation.
func (m *CityMutation) PoiIDs() (ids []uuid.UUID) {
	for id := range m.poi {
		ids = append(ids, id)
	}
	return
}

// ResetPoi resets all changes to the "poi" edge.
func (m *CityMutation) ResetPoi() {
	m.poi = nil
	m.clearedpoi = false
	m.removedpoi = nil
}

// Where appends a list predicates to the CityMutation builder.
func (m *CityMutation) Where(ps ...predicate.City) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.City, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (City).
func (m *CityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, city.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, city.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, city.FieldName)
	}
	if m.name_en != nil {
		fields = append(fields, city.FieldNameEn)
	}
	if m.name_cn != nil {
		fields = append(fields, city.FieldNameCn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case city.FieldCreatedAt:
		return m.CreatedAt()
	case city.FieldUpdatedAt:
		return m.UpdatedAt()
	case city.FieldName:
		return m.Name()
	case city.FieldNameEn:
		return m.NameEn()
	case city.FieldNameCn:
		return m.NameCn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case city.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case city.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case city.FieldName:
		return m.OldName(ctx)
	case city.FieldNameEn:
		return m.OldNameEn(ctx)
	case city.FieldNameCn:
		return m.OldNameCn(ctx)
	}
	return nil, fmt.Errorf("unknown City field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case city.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case city.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case city.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case city.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case city.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown City numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown City nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CityMutation) ResetField(name string) error {
	switch name {
	case city.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case city.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case city.FieldName:
		m.ResetName()
		return nil
	case city.FieldNameEn:
		m.ResetNameEn()
		return nil
	case city.FieldNameCn:
		m.ResetNameCn()
		return nil
	}
	return fmt.Errorf("unknown City field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.poi != nil {
		edges = append(edges, city.EdgePoi)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case city.EdgePoi:
		ids := make([]ent.Value, 0, len(m.poi))
		for id := range m.poi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpoi != nil {
		edges = append(edges, city.EdgePoi)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case city.EdgePoi:
		ids := make([]ent.Value, 0, len(m.removedpoi))
		for id := range m.removedpoi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpoi {
		edges = append(edges, city.EdgePoi)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CityMutation) EdgeCleared(name string) bool {
	switch name {
	case city.EdgePoi:
		return m.clearedpoi
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown City unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CityMutation) ResetEdge(name string) error {
	switch name {
	case city.EdgePoi:
		m.ResetPoi()
		return nil
	}
	return fmt.Errorf("unknown City edge %s", name)
}

// ContinentMutation represents an operation that mutates the Continent nodes in the graph.
type ContinentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	name_en       *string
	name_cn       *string
	clearedFields map[string]struct{}
	poi           map[uuid.UUID]struct{}
	removedpoi    map[uuid.UUID]struct{}
	clearedpoi    bool
	done          bool
	oldValue      func(context.Context) (*Continent, error)
	predicates    []predicate.Continent
}

var _ ent.Mutation = (*ContinentMutation)(nil)

// continentOption allows management of the mutation configuration using functional options.
type continentOption func(*ContinentMutation)

// newContinentMutation creates new mutation for the Continent entity.
func newContinentMutation(c config, op Op, opts ...continentOption) *ContinentMutation {
	m := &ContinentMutation{
		config:        c,
		op:            op,
		typ:           TypeContinent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContinentID sets the ID field of the mutation.
func withContinentID(id uuid.UUID) continentOption {
	return func(m *ContinentMutation) {
		var (
			err   error
			once  sync.Once
			value *Continent
		)
		m.oldValue = func(ctx context.Context) (*Continent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Continent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContinent sets the old Continent of the mutation.
func withContinent(node *Continent) continentOption {
	return func(m *ContinentMutation) {
		m.oldValue = func(context.Context) (*Continent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContinentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContinentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Continent entities.
func (m *ContinentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContinentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContinentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Continent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ContinentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContinentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Continent entity.
// If the Continent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContinentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContinentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContinentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContinentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Continent entity.
// If the Continent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContinentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContinentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *ContinentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ContinentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Continent entity.
// If the Continent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContinentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ContinentMutation) ResetName() {
	m.name = nil
}

// SetNameEn sets the "name_en" field.
func (m *ContinentMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *ContinentMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the Continent entity.
// If the Continent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContinentMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *ContinentMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameCn sets the "name_cn" field.
func (m *ContinentMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *ContinentMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the Continent entity.
// If the Continent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContinentMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *ContinentMutation) ResetNameCn() {
	m.name_cn = nil
}

// AddPoiIDs adds the "poi" edge to the PointsOfInterest entity by ids.
func (m *ContinentMutation) AddPoiIDs(ids ...uuid.UUID) {
	if m.poi == nil {
		m.poi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.poi[ids[i]] = struct{}{}
	}
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (m *ContinentMutation) ClearPoi() {
	m.clearedpoi = true
}

// PoiCleared reports if the "poi" edge to the PointsOfInterest entity was cleared.
func (m *ContinentMutation) PoiCleared() bool {
	return m.clearedpoi
}

// RemovePoiIDs removes the "poi" edge to the PointsOfInterest entity by IDs.
func (m *ContinentMutation) RemovePoiIDs(ids ...uuid.UUID) {
	if m.removedpoi == nil {
		m.removedpoi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.poi, ids[i])
		m.removedpoi[ids[i]] = struct{}{}
	}
}

// RemovedPoi returns the removed IDs of the "poi" edge to the PointsOfInterest entity.
func (m *ContinentMutation) RemovedPoiIDs() (ids []uuid.UUID) {
	for id := range m.removedpoi {
		ids = append(ids, id)
	}
	return
}

// PoiIDs returns the "poi" edge IDs in the mutation.
func (m *ContinentMutation) PoiIDs() (ids []uuid.UUID) {
	for id := range m.poi {
		ids = append(ids, id)
	}
	return
}

// ResetPoi resets all changes to the "poi" edge.
func (m *ContinentMutation) ResetPoi() {
	m.poi = nil
	m.clearedpoi = false
	m.removedpoi = nil
}

// Where appends a list predicates to the ContinentMutation builder.
func (m *ContinentMutation) Where(ps ...predicate.Continent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContinentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContinentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Continent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContinentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContinentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Continent).
func (m *ContinentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContinentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, continent.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, continent.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, continent.FieldName)
	}
	if m.name_en != nil {
		fields = append(fields, continent.FieldNameEn)
	}
	if m.name_cn != nil {
		fields = append(fields, continent.FieldNameCn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContinentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case continent.FieldCreatedAt:
		return m.CreatedAt()
	case continent.FieldUpdatedAt:
		return m.UpdatedAt()
	case continent.FieldName:
		return m.Name()
	case continent.FieldNameEn:
		return m.NameEn()
	case continent.FieldNameCn:
		return m.NameCn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContinentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case continent.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case continent.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case continent.FieldName:
		return m.OldName(ctx)
	case continent.FieldNameEn:
		return m.OldNameEn(ctx)
	case continent.FieldNameCn:
		return m.OldNameCn(ctx)
	}
	return nil, fmt.Errorf("unknown Continent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContinentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case continent.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case continent.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case continent.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case continent.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case continent.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	}
	return fmt.Errorf("unknown Continent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContinentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContinentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContinentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Continent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContinentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContinentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContinentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Continent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContinentMutation) ResetField(name string) error {
	switch name {
	case continent.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case continent.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case continent.FieldName:
		m.ResetName()
		return nil
	case continent.FieldNameEn:
		m.ResetNameEn()
		return nil
	case continent.FieldNameCn:
		m.ResetNameCn()
		return nil
	}
	return fmt.Errorf("unknown Continent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContinentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.poi != nil {
		edges = append(edges, continent.EdgePoi)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContinentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case continent.EdgePoi:
		ids := make([]ent.Value, 0, len(m.poi))
		for id := range m.poi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContinentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpoi != nil {
		edges = append(edges, continent.EdgePoi)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContinentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case continent.EdgePoi:
		ids := make([]ent.Value, 0, len(m.removedpoi))
		for id := range m.removedpoi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContinentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpoi {
		edges = append(edges, continent.EdgePoi)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContinentMutation) EdgeCleared(name string) bool {
	switch name {
	case continent.EdgePoi:
		return m.clearedpoi
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContinentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Continent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContinentMutation) ResetEdge(name string) error {
	switch name {
	case continent.EdgePoi:
		m.ResetPoi()
		return nil
	}
	return fmt.Errorf("unknown Continent edge %s", name)
}

// CountryMutation represents an operation that mutates the Country nodes in the graph.
type CountryMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	name_en       *string
	name_cn       *string
	clearedFields map[string]struct{}
	poi           map[uuid.UUID]struct{}
	removedpoi    map[uuid.UUID]struct{}
	clearedpoi    bool
	done          bool
	oldValue      func(context.Context) (*Country, error)
	predicates    []predicate.Country
}

var _ ent.Mutation = (*CountryMutation)(nil)

// countryOption allows management of the mutation configuration using functional options.
type countryOption func(*CountryMutation)

// newCountryMutation creates new mutation for the Country entity.
func newCountryMutation(c config, op Op, opts ...countryOption) *CountryMutation {
	m := &CountryMutation{
		config:        c,
		op:            op,
		typ:           TypeCountry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCountryID sets the ID field of the mutation.
func withCountryID(id uuid.UUID) countryOption {
	return func(m *CountryMutation) {
		var (
			err   error
			once  sync.Once
			value *Country
		)
		m.oldValue = func(ctx context.Context) (*Country, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Country.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCountry sets the old Country of the mutation.
func withCountry(node *Country) countryOption {
	return func(m *CountryMutation) {
		m.oldValue = func(context.Context) (*Country, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CountryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CountryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Country entities.
func (m *CountryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CountryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CountryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Country.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CountryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CountryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CountryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CountryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CountryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CountryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *CountryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CountryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CountryMutation) ResetName() {
	m.name = nil
}

// SetNameEn sets the "name_en" field.
func (m *CountryMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *CountryMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *CountryMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameCn sets the "name_cn" field.
func (m *CountryMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *CountryMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the Country entity.
// If the Country object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CountryMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *CountryMutation) ResetNameCn() {
	m.name_cn = nil
}

// AddPoiIDs adds the "poi" edge to the PointsOfInterest entity by ids.
func (m *CountryMutation) AddPoiIDs(ids ...uuid.UUID) {
	if m.poi == nil {
		m.poi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.poi[ids[i]] = struct{}{}
	}
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (m *CountryMutation) ClearPoi() {
	m.clearedpoi = true
}

// PoiCleared reports if the "poi" edge to the PointsOfInterest entity was cleared.
func (m *CountryMutation) PoiCleared() bool {
	return m.clearedpoi
}

// RemovePoiIDs removes the "poi" edge to the PointsOfInterest entity by IDs.
func (m *CountryMutation) RemovePoiIDs(ids ...uuid.UUID) {
	if m.removedpoi == nil {
		m.removedpoi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.poi, ids[i])
		m.removedpoi[ids[i]] = struct{}{}
	}
}

// RemovedPoi returns the removed IDs of the "poi" edge to the PointsOfInterest entity.
func (m *CountryMutation) RemovedPoiIDs() (ids []uuid.UUID) {
	for id := range m.removedpoi {
		ids = append(ids, id)
	}
	return
}

// PoiIDs returns the "poi" edge IDs in the mutation.
func (m *CountryMutation) PoiIDs() (ids []uuid.UUID) {
	for id := range m.poi {
		ids = append(ids, id)
	}
	return
}

// ResetPoi resets all changes to the "poi" edge.
func (m *CountryMutation) ResetPoi() {
	m.poi = nil
	m.clearedpoi = false
	m.removedpoi = nil
}

// Where appends a list predicates to the CountryMutation builder.
func (m *CountryMutation) Where(ps ...predicate.Country) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CountryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CountryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Country, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CountryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CountryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Country).
func (m *CountryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CountryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, country.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, country.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, country.FieldName)
	}
	if m.name_en != nil {
		fields = append(fields, country.FieldNameEn)
	}
	if m.name_cn != nil {
		fields = append(fields, country.FieldNameCn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CountryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case country.FieldCreatedAt:
		return m.CreatedAt()
	case country.FieldUpdatedAt:
		return m.UpdatedAt()
	case country.FieldName:
		return m.Name()
	case country.FieldNameEn:
		return m.NameEn()
	case country.FieldNameCn:
		return m.NameCn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CountryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case country.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case country.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case country.FieldName:
		return m.OldName(ctx)
	case country.FieldNameEn:
		return m.OldNameEn(ctx)
	case country.FieldNameCn:
		return m.OldNameCn(ctx)
	}
	return nil, fmt.Errorf("unknown Country field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case country.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case country.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case country.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case country.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case country.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CountryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CountryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CountryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Country numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CountryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CountryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CountryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Country nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CountryMutation) ResetField(name string) error {
	switch name {
	case country.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case country.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case country.FieldName:
		m.ResetName()
		return nil
	case country.FieldNameEn:
		m.ResetNameEn()
		return nil
	case country.FieldNameCn:
		m.ResetNameCn()
		return nil
	}
	return fmt.Errorf("unknown Country field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CountryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.poi != nil {
		edges = append(edges, country.EdgePoi)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CountryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case country.EdgePoi:
		ids := make([]ent.Value, 0, len(m.poi))
		for id := range m.poi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CountryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpoi != nil {
		edges = append(edges, country.EdgePoi)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CountryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case country.EdgePoi:
		ids := make([]ent.Value, 0, len(m.removedpoi))
		for id := range m.removedpoi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CountryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpoi {
		edges = append(edges, country.EdgePoi)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CountryMutation) EdgeCleared(name string) bool {
	switch name {
	case country.EdgePoi:
		return m.clearedpoi
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CountryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Country unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CountryMutation) ResetEdge(name string) error {
	switch name {
	case country.EdgePoi:
		m.ResetPoi()
		return nil
	}
	return fmt.Errorf("unknown Country edge %s", name)
}

// DailyItineraryMutation represents an operation that mutates the DailyItinerary nodes in the graph.
type DailyItineraryMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	notes             *string
	clearedFields     map[string]struct{}
	trip              *uuid.UUID
	clearedtrip       bool
	daily_trip        *uuid.UUID
	cleareddaily_trip bool
	poi               *uuid.UUID
	clearedpoi        bool
	done              bool
	oldValue          func(context.Context) (*DailyItinerary, error)
	predicates        []predicate.DailyItinerary
}

var _ ent.Mutation = (*DailyItineraryMutation)(nil)

// dailyitineraryOption allows management of the mutation configuration using functional options.
type dailyitineraryOption func(*DailyItineraryMutation)

// newDailyItineraryMutation creates new mutation for the DailyItinerary entity.
func newDailyItineraryMutation(c config, op Op, opts ...dailyitineraryOption) *DailyItineraryMutation {
	m := &DailyItineraryMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyItinerary,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyItineraryID sets the ID field of the mutation.
func withDailyItineraryID(id uuid.UUID) dailyitineraryOption {
	return func(m *DailyItineraryMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyItinerary
		)
		m.oldValue = func(ctx context.Context) (*DailyItinerary, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyItinerary.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyItinerary sets the old DailyItinerary of the mutation.
func withDailyItinerary(node *DailyItinerary) dailyitineraryOption {
	return func(m *DailyItineraryMutation) {
		m.oldValue = func(context.Context) (*DailyItinerary, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyItineraryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyItineraryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyItinerary entities.
func (m *DailyItineraryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyItineraryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyItineraryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyItinerary.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DailyItineraryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DailyItineraryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DailyItinerary entity.
// If the DailyItinerary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyItineraryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DailyItineraryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DailyItineraryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DailyItineraryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DailyItinerary entity.
// If the DailyItinerary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyItineraryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DailyItineraryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTripID sets the "trip_id" field.
func (m *DailyItineraryMutation) SetTripID(u uuid.UUID) {
	m.trip = &u
}

// TripID returns the value of the "trip_id" field in the mutation.
func (m *DailyItineraryMutation) TripID() (r uuid.UUID, exists bool) {
	v := m.trip
	if v == nil {
		return
	}
	return *v, true
}

// OldTripID returns the old "trip_id" field's value of the DailyItinerary entity.
// If the DailyItinerary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyItineraryMutation) OldTripID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTripID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTripID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTripID: %w", err)
	}
	return oldValue.TripID, nil
}

// ResetTripID resets all changes to the "trip_id" field.
func (m *DailyItineraryMutation) ResetTripID() {
	m.trip = nil
}

// SetDailyTripID sets the "daily_trip_id" field.
func (m *DailyItineraryMutation) SetDailyTripID(u uuid.UUID) {
	m.daily_trip = &u
}

// DailyTripID returns the value of the "daily_trip_id" field in the mutation.
func (m *DailyItineraryMutation) DailyTripID() (r uuid.UUID, exists bool) {
	v := m.daily_trip
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyTripID returns the old "daily_trip_id" field's value of the DailyItinerary entity.
// If the DailyItinerary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyItineraryMutation) OldDailyTripID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyTripID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyTripID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyTripID: %w", err)
	}
	return oldValue.DailyTripID, nil
}

// ResetDailyTripID resets all changes to the "daily_trip_id" field.
func (m *DailyItineraryMutation) ResetDailyTripID() {
	m.daily_trip = nil
}

// SetPoiID sets the "poi_id" field.
func (m *DailyItineraryMutation) SetPoiID(u uuid.UUID) {
	m.poi = &u
}

// PoiID returns the value of the "poi_id" field in the mutation.
func (m *DailyItineraryMutation) PoiID() (r uuid.UUID, exists bool) {
	v := m.poi
	if v == nil {
		return
	}
	return *v, true
}

// OldPoiID returns the old "poi_id" field's value of the DailyItinerary entity.
// If the DailyItinerary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyItineraryMutation) OldPoiID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoiID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoiID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoiID: %w", err)
	}
	return oldValue.PoiID, nil
}

// ResetPoiID resets all changes to the "poi_id" field.
func (m *DailyItineraryMutation) ResetPoiID() {
	m.poi = nil
}

// SetNotes sets the "notes" field.
func (m *DailyItineraryMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *DailyItineraryMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the DailyItinerary entity.
// If the DailyItinerary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyItineraryMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ClearNotes clears the value of the "notes" field.
func (m *DailyItineraryMutation) ClearNotes() {
	m.notes = nil
	m.clearedFields[dailyitinerary.FieldNotes] = struct{}{}
}

// NotesCleared returns if the "notes" field was cleared in this mutation.
func (m *DailyItineraryMutation) NotesCleared() bool {
	_, ok := m.clearedFields[dailyitinerary.FieldNotes]
	return ok
}

// ResetNotes resets all changes to the "notes" field.
func (m *DailyItineraryMutation) ResetNotes() {
	m.notes = nil
	delete(m.clearedFields, dailyitinerary.FieldNotes)
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (m *DailyItineraryMutation) ClearTrip() {
	m.clearedtrip = true
	m.clearedFields[dailyitinerary.FieldTripID] = struct{}{}
}

// TripCleared reports if the "trip" edge to the Trip entity was cleared.
func (m *DailyItineraryMutation) TripCleared() bool {
	return m.clearedtrip
}

// TripIDs returns the "trip" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TripID instead. It exists only for internal usage by the builders.
func (m *DailyItineraryMutation) TripIDs() (ids []uuid.UUID) {
	if id := m.trip; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTrip resets all changes to the "trip" edge.
func (m *DailyItineraryMutation) ResetTrip() {
	m.trip = nil
	m.clearedtrip = false
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (m *DailyItineraryMutation) ClearDailyTrip() {
	m.cleareddaily_trip = true
	m.clearedFields[dailyitinerary.FieldDailyTripID] = struct{}{}
}

// DailyTripCleared reports if the "daily_trip" edge to the DailyTrip entity was cleared.
func (m *DailyItineraryMutation) DailyTripCleared() bool {
	return m.cleareddaily_trip
}

// DailyTripIDs returns the "daily_trip" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DailyTripID instead. It exists only for internal usage by the builders.
func (m *DailyItineraryMutation) DailyTripIDs() (ids []uuid.UUID) {
	if id := m.daily_trip; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDailyTrip resets all changes to the "daily_trip" edge.
func (m *DailyItineraryMutation) ResetDailyTrip() {
	m.daily_trip = nil
	m.cleareddaily_trip = false
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (m *DailyItineraryMutation) ClearPoi() {
	m.clearedpoi = true
	m.clearedFields[dailyitinerary.FieldPoiID] = struct{}{}
}

// PoiCleared reports if the "poi" edge to the PointsOfInterest entity was cleared.
func (m *DailyItineraryMutation) PoiCleared() bool {
	return m.clearedpoi
}

// PoiIDs returns the "poi" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PoiID instead. It exists only for internal usage by the builders.
func (m *DailyItineraryMutation) PoiIDs() (ids []uuid.UUID) {
	if id := m.poi; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoi resets all changes to the "poi" edge.
func (m *DailyItineraryMutation) ResetPoi() {
	m.poi = nil
	m.clearedpoi = false
}

// Where appends a list predicates to the DailyItineraryMutation builder.
func (m *DailyItineraryMutation) Where(ps ...predicate.DailyItinerary) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyItineraryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyItineraryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyItinerary, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyItineraryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyItineraryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyItinerary).
func (m *DailyItineraryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyItineraryMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, dailyitinerary.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dailyitinerary.FieldUpdatedAt)
	}
	if m.trip != nil {
		fields = append(fields, dailyitinerary.FieldTripID)
	}
	if m.daily_trip != nil {
		fields = append(fields, dailyitinerary.FieldDailyTripID)
	}
	if m.poi != nil {
		fields = append(fields, dailyitinerary.FieldPoiID)
	}
	if m.notes != nil {
		fields = append(fields, dailyitinerary.FieldNotes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyItineraryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailyitinerary.FieldCreatedAt:
		return m.CreatedAt()
	case dailyitinerary.FieldUpdatedAt:
		return m.UpdatedAt()
	case dailyitinerary.FieldTripID:
		return m.TripID()
	case dailyitinerary.FieldDailyTripID:
		return m.DailyTripID()
	case dailyitinerary.FieldPoiID:
		return m.PoiID()
	case dailyitinerary.FieldNotes:
		return m.Notes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyItineraryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailyitinerary.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dailyitinerary.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dailyitinerary.FieldTripID:
		return m.OldTripID(ctx)
	case dailyitinerary.FieldDailyTripID:
		return m.OldDailyTripID(ctx)
	case dailyitinerary.FieldPoiID:
		return m.OldPoiID(ctx)
	case dailyitinerary.FieldNotes:
		return m.OldNotes(ctx)
	}
	return nil, fmt.Errorf("unknown DailyItinerary field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyItineraryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailyitinerary.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dailyitinerary.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dailyitinerary.FieldTripID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTripID(v)
		return nil
	case dailyitinerary.FieldDailyTripID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyTripID(v)
		return nil
	case dailyitinerary.FieldPoiID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoiID(v)
		return nil
	case dailyitinerary.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	}
	return fmt.Errorf("unknown DailyItinerary field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyItineraryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyItineraryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyItineraryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DailyItinerary numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyItineraryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dailyitinerary.FieldNotes) {
		fields = append(fields, dailyitinerary.FieldNotes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyItineraryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyItineraryMutation) ClearField(name string) error {
	switch name {
	case dailyitinerary.FieldNotes:
		m.ClearNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyItinerary nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyItineraryMutation) ResetField(name string) error {
	switch name {
	case dailyitinerary.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dailyitinerary.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dailyitinerary.FieldTripID:
		m.ResetTripID()
		return nil
	case dailyitinerary.FieldDailyTripID:
		m.ResetDailyTripID()
		return nil
	case dailyitinerary.FieldPoiID:
		m.ResetPoiID()
		return nil
	case dailyitinerary.FieldNotes:
		m.ResetNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyItinerary field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyItineraryMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.trip != nil {
		edges = append(edges, dailyitinerary.EdgeTrip)
	}
	if m.daily_trip != nil {
		edges = append(edges, dailyitinerary.EdgeDailyTrip)
	}
	if m.poi != nil {
		edges = append(edges, dailyitinerary.EdgePoi)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyItineraryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailyitinerary.EdgeTrip:
		if id := m.trip; id != nil {
			return []ent.Value{*id}
		}
	case dailyitinerary.EdgeDailyTrip:
		if id := m.daily_trip; id != nil {
			return []ent.Value{*id}
		}
	case dailyitinerary.EdgePoi:
		if id := m.poi; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyItineraryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyItineraryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyItineraryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtrip {
		edges = append(edges, dailyitinerary.EdgeTrip)
	}
	if m.cleareddaily_trip {
		edges = append(edges, dailyitinerary.EdgeDailyTrip)
	}
	if m.clearedpoi {
		edges = append(edges, dailyitinerary.EdgePoi)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyItineraryMutation) EdgeCleared(name string) bool {
	switch name {
	case dailyitinerary.EdgeTrip:
		return m.clearedtrip
	case dailyitinerary.EdgeDailyTrip:
		return m.cleareddaily_trip
	case dailyitinerary.EdgePoi:
		return m.clearedpoi
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyItineraryMutation) ClearEdge(name string) error {
	switch name {
	case dailyitinerary.EdgeTrip:
		m.ClearTrip()
		return nil
	case dailyitinerary.EdgeDailyTrip:
		m.ClearDailyTrip()
		return nil
	case dailyitinerary.EdgePoi:
		m.ClearPoi()
		return nil
	}
	return fmt.Errorf("unknown DailyItinerary unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyItineraryMutation) ResetEdge(name string) error {
	switch name {
	case dailyitinerary.EdgeTrip:
		m.ResetTrip()
		return nil
	case dailyitinerary.EdgeDailyTrip:
		m.ResetDailyTrip()
		return nil
	case dailyitinerary.EdgePoi:
		m.ResetPoi()
		return nil
	}
	return fmt.Errorf("unknown DailyItinerary edge %s", name)
}

// DailyTripMutation represents an operation that mutates the DailyTrip nodes in the graph.
type DailyTripMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	day                    *int32
	addday                 *int32
	date                   *time.Time
	notes                  *string
	clearedFields          map[string]struct{}
	trip                   *uuid.UUID
	clearedtrip            bool
	daily_itinerary        map[uuid.UUID]struct{}
	removeddaily_itinerary map[uuid.UUID]struct{}
	cleareddaily_itinerary bool
	done                   bool
	oldValue               func(context.Context) (*DailyTrip, error)
	predicates             []predicate.DailyTrip
}

var _ ent.Mutation = (*DailyTripMutation)(nil)

// dailytripOption allows management of the mutation configuration using functional options.
type dailytripOption func(*DailyTripMutation)

// newDailyTripMutation creates new mutation for the DailyTrip entity.
func newDailyTripMutation(c config, op Op, opts ...dailytripOption) *DailyTripMutation {
	m := &DailyTripMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyTrip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyTripID sets the ID field of the mutation.
func withDailyTripID(id uuid.UUID) dailytripOption {
	return func(m *DailyTripMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyTrip
		)
		m.oldValue = func(ctx context.Context) (*DailyTrip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyTrip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyTrip sets the old DailyTrip of the mutation.
func withDailyTrip(node *DailyTrip) dailytripOption {
	return func(m *DailyTripMutation) {
		m.oldValue = func(context.Context) (*DailyTrip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyTripMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyTripMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyTrip entities.
func (m *DailyTripMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyTripMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyTripMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyTrip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DailyTripMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DailyTripMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DailyTripMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DailyTripMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DailyTripMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DailyTripMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTripID sets the "trip_id" field.
func (m *DailyTripMutation) SetTripID(u uuid.UUID) {
	m.trip = &u
}

// TripID returns the value of the "trip_id" field in the mutation.
func (m *DailyTripMutation) TripID() (r uuid.UUID, exists bool) {
	v := m.trip
	if v == nil {
		return
	}
	return *v, true
}

// OldTripID returns the old "trip_id" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldTripID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTripID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTripID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTripID: %w", err)
	}
	return oldValue.TripID, nil
}

// ResetTripID resets all changes to the "trip_id" field.
func (m *DailyTripMutation) ResetTripID() {
	m.trip = nil
}

// SetDay sets the "day" field.
func (m *DailyTripMutation) SetDay(i int32) {
	m.day = &i
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *DailyTripMutation) Day() (r int32, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldDay(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds i to the "day" field.
func (m *DailyTripMutation) AddDay(i int32) {
	if m.addday != nil {
		*m.addday += i
	} else {
		m.addday = &i
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *DailyTripMutation) AddedDay() (r int32, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *DailyTripMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetDate sets the "date" field.
func (m *DailyTripMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DailyTripMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DailyTripMutation) ResetDate() {
	m.date = nil
}

// SetNotes sets the "notes" field.
func (m *DailyTripMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *DailyTripMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ClearNotes clears the value of the "notes" field.
func (m *DailyTripMutation) ClearNotes() {
	m.notes = nil
	m.clearedFields[dailytrip.FieldNotes] = struct{}{}
}

// NotesCleared returns if the "notes" field was cleared in this mutation.
func (m *DailyTripMutation) NotesCleared() bool {
	_, ok := m.clearedFields[dailytrip.FieldNotes]
	return ok
}

// ResetNotes resets all changes to the "notes" field.
func (m *DailyTripMutation) ResetNotes() {
	m.notes = nil
	delete(m.clearedFields, dailytrip.FieldNotes)
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (m *DailyTripMutation) ClearTrip() {
	m.clearedtrip = true
	m.clearedFields[dailytrip.FieldTripID] = struct{}{}
}

// TripCleared reports if the "trip" edge to the Trip entity was cleared.
func (m *DailyTripMutation) TripCleared() bool {
	return m.clearedtrip
}

// TripIDs returns the "trip" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TripID instead. It exists only for internal usage by the builders.
func (m *DailyTripMutation) TripIDs() (ids []uuid.UUID) {
	if id := m.trip; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTrip resets all changes to the "trip" edge.
func (m *DailyTripMutation) ResetTrip() {
	m.trip = nil
	m.clearedtrip = false
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by ids.
func (m *DailyTripMutation) AddDailyItineraryIDs(ids ...uuid.UUID) {
	if m.daily_itinerary == nil {
		m.daily_itinerary = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_itinerary[ids[i]] = struct{}{}
	}
}

// ClearDailyItinerary clears the "daily_itinerary" edge to the DailyItinerary entity.
func (m *DailyTripMutation) ClearDailyItinerary() {
	m.cleareddaily_itinerary = true
}

// DailyItineraryCleared reports if the "daily_itinerary" edge to the DailyItinerary entity was cleared.
func (m *DailyTripMutation) DailyItineraryCleared() bool {
	return m.cleareddaily_itinerary
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (m *DailyTripMutation) RemoveDailyItineraryIDs(ids ...uuid.UUID) {
	if m.removeddaily_itinerary == nil {
		m.removeddaily_itinerary = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_itinerary, ids[i])
		m.removeddaily_itinerary[ids[i]] = struct{}{}
	}
}

// RemovedDailyItinerary returns the removed IDs of the "daily_itinerary" edge to the DailyItinerary entity.
func (m *DailyTripMutation) RemovedDailyItineraryIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_itinerary {
		ids = append(ids, id)
	}
	return
}

// DailyItineraryIDs returns the "daily_itinerary" edge IDs in the mutation.
func (m *DailyTripMutation) DailyItineraryIDs() (ids []uuid.UUID) {
	for id := range m.daily_itinerary {
		ids = append(ids, id)
	}
	return
}

// ResetDailyItinerary resets all changes to the "daily_itinerary" edge.
func (m *DailyTripMutation) ResetDailyItinerary() {
	m.daily_itinerary = nil
	m.cleareddaily_itinerary = false
	m.removeddaily_itinerary = nil
}

// Where appends a list predicates to the DailyTripMutation builder.
func (m *DailyTripMutation) Where(ps ...predicate.DailyTrip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyTripMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyTripMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyTrip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyTripMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyTripMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyTrip).
func (m *DailyTripMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyTripMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, dailytrip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dailytrip.FieldUpdatedAt)
	}
	if m.trip != nil {
		fields = append(fields, dailytrip.FieldTripID)
	}
	if m.day != nil {
		fields = append(fields, dailytrip.FieldDay)
	}
	if m.date != nil {
		fields = append(fields, dailytrip.FieldDate)
	}
	if m.notes != nil {
		fields = append(fields, dailytrip.FieldNotes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyTripMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailytrip.FieldCreatedAt:
		return m.CreatedAt()
	case dailytrip.FieldUpdatedAt:
		return m.UpdatedAt()
	case dailytrip.FieldTripID:
		return m.TripID()
	case dailytrip.FieldDay:
		return m.Day()
	case dailytrip.FieldDate:
		return m.Date()
	case dailytrip.FieldNotes:
		return m.Notes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyTripMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailytrip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dailytrip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dailytrip.FieldTripID:
		return m.OldTripID(ctx)
	case dailytrip.FieldDay:
		return m.OldDay(ctx)
	case dailytrip.FieldDate:
		return m.OldDate(ctx)
	case dailytrip.FieldNotes:
		return m.OldNotes(ctx)
	}
	return nil, fmt.Errorf("unknown DailyTrip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyTripMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailytrip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dailytrip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dailytrip.FieldTripID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTripID(v)
		return nil
	case dailytrip.FieldDay:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	case dailytrip.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case dailytrip.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	}
	return fmt.Errorf("unknown DailyTrip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyTripMutation) AddedFields() []string {
	var fields []string
	if m.addday != nil {
		fields = append(fields, dailytrip.FieldDay)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyTripMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dailytrip.FieldDay:
		return m.AddedDay()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyTripMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dailytrip.FieldDay:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	}
	return fmt.Errorf("unknown DailyTrip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyTripMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dailytrip.FieldNotes) {
		fields = append(fields, dailytrip.FieldNotes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyTripMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyTripMutation) ClearField(name string) error {
	switch name {
	case dailytrip.FieldNotes:
		m.ClearNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyTripMutation) ResetField(name string) error {
	switch name {
	case dailytrip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dailytrip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dailytrip.FieldTripID:
		m.ResetTripID()
		return nil
	case dailytrip.FieldDay:
		m.ResetDay()
		return nil
	case dailytrip.FieldDate:
		m.ResetDate()
		return nil
	case dailytrip.FieldNotes:
		m.ResetNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyTripMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.trip != nil {
		edges = append(edges, dailytrip.EdgeTrip)
	}
	if m.daily_itinerary != nil {
		edges = append(edges, dailytrip.EdgeDailyItinerary)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyTripMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailytrip.EdgeTrip:
		if id := m.trip; id != nil {
			return []ent.Value{*id}
		}
	case dailytrip.EdgeDailyItinerary:
		ids := make([]ent.Value, 0, len(m.daily_itinerary))
		for id := range m.daily_itinerary {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyTripMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddaily_itinerary != nil {
		edges = append(edges, dailytrip.EdgeDailyItinerary)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyTripMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dailytrip.EdgeDailyItinerary:
		ids := make([]ent.Value, 0, len(m.removeddaily_itinerary))
		for id := range m.removeddaily_itinerary {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyTripMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtrip {
		edges = append(edges, dailytrip.EdgeTrip)
	}
	if m.cleareddaily_itinerary {
		edges = append(edges, dailytrip.EdgeDailyItinerary)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyTripMutation) EdgeCleared(name string) bool {
	switch name {
	case dailytrip.EdgeTrip:
		return m.clearedtrip
	case dailytrip.EdgeDailyItinerary:
		return m.cleareddaily_itinerary
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyTripMutation) ClearEdge(name string) error {
	switch name {
	case dailytrip.EdgeTrip:
		m.ClearTrip()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyTripMutation) ResetEdge(name string) error {
	switch name {
	case dailytrip.EdgeTrip:
		m.ResetTrip()
		return nil
	case dailytrip.EdgeDailyItinerary:
		m.ResetDailyItinerary()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip edge %s", name)
}

// MediaMutation represents an operation that mutates the Media nodes in the graph.
type MediaMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	filename        *string
	file_type       *string
	storage_type    *model.StorageType
	addstorage_type *model.StorageType
	_path           *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Media, error)
	predicates      []predicate.Media
}

var _ ent.Mutation = (*MediaMutation)(nil)

// mediaOption allows management of the mutation configuration using functional options.
type mediaOption func(*MediaMutation)

// newMediaMutation creates new mutation for the Media entity.
func newMediaMutation(c config, op Op, opts ...mediaOption) *MediaMutation {
	m := &MediaMutation{
		config:        c,
		op:            op,
		typ:           TypeMedia,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaID sets the ID field of the mutation.
func withMediaID(id uuid.UUID) mediaOption {
	return func(m *MediaMutation) {
		var (
			err   error
			once  sync.Once
			value *Media
		)
		m.oldValue = func(ctx context.Context) (*Media, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Media.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedia sets the old Media of the mutation.
func withMedia(node *Media) mediaOption {
	return func(m *MediaMutation) {
		m.oldValue = func(context.Context) (*Media, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Media entities.
func (m *MediaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Media.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MediaMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MediaMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MediaMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MediaMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MediaMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MediaMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFilename sets the "filename" field.
func (m *MediaMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *MediaMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *MediaMutation) ResetFilename() {
	m.filename = nil
}

// SetFileType sets the "file_type" field.
func (m *MediaMutation) SetFileType(s string) {
	m.file_type = &s
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *MediaMutation) FileType() (r string, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFileType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ResetFileType resets all changes to the "file_type" field.
func (m *MediaMutation) ResetFileType() {
	m.file_type = nil
}

// SetStorageType sets the "storage_type" field.
func (m *MediaMutation) SetStorageType(mt model.StorageType) {
	m.storage_type = &mt
	m.addstorage_type = nil
}

// StorageType returns the value of the "storage_type" field in the mutation.
func (m *MediaMutation) StorageType() (r model.StorageType, exists bool) {
	v := m.storage_type
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageType returns the old "storage_type" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldStorageType(ctx context.Context) (v model.StorageType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageType: %w", err)
	}
	return oldValue.StorageType, nil
}

// AddStorageType adds mt to the "storage_type" field.
func (m *MediaMutation) AddStorageType(mt model.StorageType) {
	if m.addstorage_type != nil {
		*m.addstorage_type += mt
	} else {
		m.addstorage_type = &mt
	}
}

// AddedStorageType returns the value that was added to the "storage_type" field in this mutation.
func (m *MediaMutation) AddedStorageType() (r model.StorageType, exists bool) {
	v := m.addstorage_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetStorageType resets all changes to the "storage_type" field.
func (m *MediaMutation) ResetStorageType() {
	m.storage_type = nil
	m.addstorage_type = nil
}

// SetPath sets the "path" field.
func (m *MediaMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *MediaMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *MediaMutation) ResetPath() {
	m._path = nil
}

// Where appends a list predicates to the MediaMutation builder.
func (m *MediaMutation) Where(ps ...predicate.Media) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Media, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Media).
func (m *MediaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, media.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, media.FieldUpdatedAt)
	}
	if m.filename != nil {
		fields = append(fields, media.FieldFilename)
	}
	if m.file_type != nil {
		fields = append(fields, media.FieldFileType)
	}
	if m.storage_type != nil {
		fields = append(fields, media.FieldStorageType)
	}
	if m._path != nil {
		fields = append(fields, media.FieldPath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case media.FieldCreatedAt:
		return m.CreatedAt()
	case media.FieldUpdatedAt:
		return m.UpdatedAt()
	case media.FieldFilename:
		return m.Filename()
	case media.FieldFileType:
		return m.FileType()
	case media.FieldStorageType:
		return m.StorageType()
	case media.FieldPath:
		return m.Path()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case media.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case media.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case media.FieldFilename:
		return m.OldFilename(ctx)
	case media.FieldFileType:
		return m.OldFileType(ctx)
	case media.FieldStorageType:
		return m.OldStorageType(ctx)
	case media.FieldPath:
		return m.OldPath(ctx)
	}
	return nil, fmt.Errorf("unknown Media field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case media.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case media.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case media.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case media.FieldFileType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	case media.FieldStorageType:
		v, ok := value.(model.StorageType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageType(v)
		return nil
	case media.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaMutation) AddedFields() []string {
	var fields []string
	if m.addstorage_type != nil {
		fields = append(fields, media.FieldStorageType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case media.FieldStorageType:
		return m.AddedStorageType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case media.FieldStorageType:
		v, ok := value.(model.StorageType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStorageType(v)
		return nil
	}
	return fmt.Errorf("unknown Media numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Media nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaMutation) ResetField(name string) error {
	switch name {
	case media.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case media.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case media.FieldFilename:
		m.ResetFilename()
		return nil
	case media.FieldFileType:
		m.ResetFileType()
		return nil
	case media.FieldStorageType:
		m.ResetStorageType()
		return nil
	case media.FieldPath:
		m.ResetPath()
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Media unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Media edge %s", name)
}

// PointsOfInterestMutation represents an operation that mutates the PointsOfInterest nodes in the graph.
type PointsOfInterestMutation struct {
	config
	op                              Op
	typ                             string
	id                              *uuid.UUID
	created_at                      *time.Time
	updated_at                      *time.Time
	name                            *string
	name_en                         *string
	name_cn                         *string
	description                     *string
	address                         *string
	latitude                        *float64
	addlatitude                     *float64
	longitude                       *float64
	addlongitude                    *float64
	_type                           *string
	category                        *string
	rating                          *float32
	addrating                       *float32
	recommended_duration_minutes    *int64
	addrecommended_duration_minutes *int64
	clearedFields                   map[string]struct{}
	city                            *uuid.UUID
	clearedcity                     bool
	state                           *uuid.UUID
	clearedstate                    bool
	country                         *uuid.UUID
	clearedcountry                  bool
	continent                       *uuid.UUID
	clearedcontinent                bool
	daily_itinerary                 map[uuid.UUID]struct{}
	removeddaily_itinerary          map[uuid.UUID]struct{}
	cleareddaily_itinerary          bool
	done                            bool
	oldValue                        func(context.Context) (*PointsOfInterest, error)
	predicates                      []predicate.PointsOfInterest
}

var _ ent.Mutation = (*PointsOfInterestMutation)(nil)

// pointsofinterestOption allows management of the mutation configuration using functional options.
type pointsofinterestOption func(*PointsOfInterestMutation)

// newPointsOfInterestMutation creates new mutation for the PointsOfInterest entity.
func newPointsOfInterestMutation(c config, op Op, opts ...pointsofinterestOption) *PointsOfInterestMutation {
	m := &PointsOfInterestMutation{
		config:        c,
		op:            op,
		typ:           TypePointsOfInterest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPointsOfInterestID sets the ID field of the mutation.
func withPointsOfInterestID(id uuid.UUID) pointsofinterestOption {
	return func(m *PointsOfInterestMutation) {
		var (
			err   error
			once  sync.Once
			value *PointsOfInterest
		)
		m.oldValue = func(ctx context.Context) (*PointsOfInterest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PointsOfInterest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPointsOfInterest sets the old PointsOfInterest of the mutation.
func withPointsOfInterest(node *PointsOfInterest) pointsofinterestOption {
	return func(m *PointsOfInterestMutation) {
		m.oldValue = func(context.Context) (*PointsOfInterest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PointsOfInterestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PointsOfInterestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PointsOfInterest entities.
func (m *PointsOfInterestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PointsOfInterestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PointsOfInterestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PointsOfInterest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PointsOfInterestMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PointsOfInterestMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PointsOfInterestMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PointsOfInterestMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PointsOfInterestMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PointsOfInterestMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *PointsOfInterestMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PointsOfInterestMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PointsOfInterestMutation) ResetName() {
	m.name = nil
}

// SetNameEn sets the "name_en" field.
func (m *PointsOfInterestMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *PointsOfInterestMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *PointsOfInterestMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameCn sets the "name_cn" field.
func (m *PointsOfInterestMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *PointsOfInterestMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *PointsOfInterestMutation) ResetNameCn() {
	m.name_cn = nil
}

// SetDescription sets the "description" field.
func (m *PointsOfInterestMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PointsOfInterestMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PointsOfInterestMutation) ResetDescription() {
	m.description = nil
}

// SetAddress sets the "address" field.
func (m *PointsOfInterestMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *PointsOfInterestMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *PointsOfInterestMutation) ResetAddress() {
	m.address = nil
}

// SetLatitude sets the "latitude" field.
func (m *PointsOfInterestMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *PointsOfInterestMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *PointsOfInterestMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *PointsOfInterestMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *PointsOfInterestMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *PointsOfInterestMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *PointsOfInterestMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *PointsOfInterestMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *PointsOfInterestMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *PointsOfInterestMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetType sets the "type" field.
func (m *PointsOfInterestMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *PointsOfInterestMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PointsOfInterestMutation) ResetType() {
	m._type = nil
}

// SetCategory sets the "category" field.
func (m *PointsOfInterestMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *PointsOfInterestMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *PointsOfInterestMutation) ResetCategory() {
	m.category = nil
}

// SetRating sets the "rating" field.
func (m *PointsOfInterestMutation) SetRating(f float32) {
	m.rating = &f
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *PointsOfInterestMutation) Rating() (r float32, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldRating(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds f to the "rating" field.
func (m *PointsOfInterestMutation) AddRating(f float32) {
	if m.addrating != nil {
		*m.addrating += f
	} else {
		m.addrating = &f
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *PointsOfInterestMutation) AddedRating() (r float32, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *PointsOfInterestMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetRecommendedDurationMinutes sets the "recommended_duration_minutes" field.
func (m *PointsOfInterestMutation) SetRecommendedDurationMinutes(i int64) {
	m.recommended_duration_minutes = &i
	m.addrecommended_duration_minutes = nil
}

// RecommendedDurationMinutes returns the value of the "recommended_duration_minutes" field in the mutation.
func (m *PointsOfInterestMutation) RecommendedDurationMinutes() (r int64, exists bool) {
	v := m.recommended_duration_minutes
	if v == nil {
		return
	}
	return *v, true
}

// OldRecommendedDurationMinutes returns the old "recommended_duration_minutes" field's value of the PointsOfInterest entity.
// If the PointsOfInterest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointsOfInterestMutation) OldRecommendedDurationMinutes(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecommendedDurationMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecommendedDurationMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecommendedDurationMinutes: %w", err)
	}
	return oldValue.RecommendedDurationMinutes, nil
}

// AddRecommendedDurationMinutes adds i to the "recommended_duration_minutes" field.
func (m *PointsOfInterestMutation) AddRecommendedDurationMinutes(i int64) {
	if m.addrecommended_duration_minutes != nil {
		*m.addrecommended_duration_minutes += i
	} else {
		m.addrecommended_duration_minutes = &i
	}
}

// AddedRecommendedDurationMinutes returns the value that was added to the "recommended_duration_minutes" field in this mutation.
func (m *PointsOfInterestMutation) AddedRecommendedDurationMinutes() (r int64, exists bool) {
	v := m.addrecommended_duration_minutes
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecommendedDurationMinutes resets all changes to the "recommended_duration_minutes" field.
func (m *PointsOfInterestMutation) ResetRecommendedDurationMinutes() {
	m.recommended_duration_minutes = nil
	m.addrecommended_duration_minutes = nil
}

// SetCityID sets the "city" edge to the City entity by id.
func (m *PointsOfInterestMutation) SetCityID(id uuid.UUID) {
	m.city = &id
}

// ClearCity clears the "city" edge to the City entity.
func (m *PointsOfInterestMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *PointsOfInterestMutation) CityCleared() bool {
	return m.clearedcity
}

// CityID returns the "city" edge ID in the mutation.
func (m *PointsOfInterestMutation) CityID() (id uuid.UUID, exists bool) {
	if m.city != nil {
		return *m.city, true
	}
	return
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *PointsOfInterestMutation) CityIDs() (ids []uuid.UUID) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *PointsOfInterestMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// SetStateID sets the "state" edge to the State entity by id.
func (m *PointsOfInterestMutation) SetStateID(id uuid.UUID) {
	m.state = &id
}

// ClearState clears the "state" edge to the State entity.
func (m *PointsOfInterestMutation) ClearState() {
	m.clearedstate = true
}

// StateCleared reports if the "state" edge to the State entity was cleared.
func (m *PointsOfInterestMutation) StateCleared() bool {
	return m.clearedstate
}

// StateID returns the "state" edge ID in the mutation.
func (m *PointsOfInterestMutation) StateID() (id uuid.UUID, exists bool) {
	if m.state != nil {
		return *m.state, true
	}
	return
}

// StateIDs returns the "state" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StateID instead. It exists only for internal usage by the builders.
func (m *PointsOfInterestMutation) StateIDs() (ids []uuid.UUID) {
	if id := m.state; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetState resets all changes to the "state" edge.
func (m *PointsOfInterestMutation) ResetState() {
	m.state = nil
	m.clearedstate = false
}

// SetCountryID sets the "country" edge to the Country entity by id.
func (m *PointsOfInterestMutation) SetCountryID(id uuid.UUID) {
	m.country = &id
}

// ClearCountry clears the "country" edge to the Country entity.
func (m *PointsOfInterestMutation) ClearCountry() {
	m.clearedcountry = true
}

// CountryCleared reports if the "country" edge to the Country entity was cleared.
func (m *PointsOfInterestMutation) CountryCleared() bool {
	return m.clearedcountry
}

// CountryID returns the "country" edge ID in the mutation.
func (m *PointsOfInterestMutation) CountryID() (id uuid.UUID, exists bool) {
	if m.country != nil {
		return *m.country, true
	}
	return
}

// CountryIDs returns the "country" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CountryID instead. It exists only for internal usage by the builders.
func (m *PointsOfInterestMutation) CountryIDs() (ids []uuid.UUID) {
	if id := m.country; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCountry resets all changes to the "country" edge.
func (m *PointsOfInterestMutation) ResetCountry() {
	m.country = nil
	m.clearedcountry = false
}

// SetContinentID sets the "continent" edge to the Continent entity by id.
func (m *PointsOfInterestMutation) SetContinentID(id uuid.UUID) {
	m.continent = &id
}

// ClearContinent clears the "continent" edge to the Continent entity.
func (m *PointsOfInterestMutation) ClearContinent() {
	m.clearedcontinent = true
}

// ContinentCleared reports if the "continent" edge to the Continent entity was cleared.
func (m *PointsOfInterestMutation) ContinentCleared() bool {
	return m.clearedcontinent
}

// ContinentID returns the "continent" edge ID in the mutation.
func (m *PointsOfInterestMutation) ContinentID() (id uuid.UUID, exists bool) {
	if m.continent != nil {
		return *m.continent, true
	}
	return
}

// ContinentIDs returns the "continent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContinentID instead. It exists only for internal usage by the builders.
func (m *PointsOfInterestMutation) ContinentIDs() (ids []uuid.UUID) {
	if id := m.continent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContinent resets all changes to the "continent" edge.
func (m *PointsOfInterestMutation) ResetContinent() {
	m.continent = nil
	m.clearedcontinent = false
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by ids.
func (m *PointsOfInterestMutation) AddDailyItineraryIDs(ids ...uuid.UUID) {
	if m.daily_itinerary == nil {
		m.daily_itinerary = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_itinerary[ids[i]] = struct{}{}
	}
}

// ClearDailyItinerary clears the "daily_itinerary" edge to the DailyItinerary entity.
func (m *PointsOfInterestMutation) ClearDailyItinerary() {
	m.cleareddaily_itinerary = true
}

// DailyItineraryCleared reports if the "daily_itinerary" edge to the DailyItinerary entity was cleared.
func (m *PointsOfInterestMutation) DailyItineraryCleared() bool {
	return m.cleareddaily_itinerary
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (m *PointsOfInterestMutation) RemoveDailyItineraryIDs(ids ...uuid.UUID) {
	if m.removeddaily_itinerary == nil {
		m.removeddaily_itinerary = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_itinerary, ids[i])
		m.removeddaily_itinerary[ids[i]] = struct{}{}
	}
}

// RemovedDailyItinerary returns the removed IDs of the "daily_itinerary" edge to the DailyItinerary entity.
func (m *PointsOfInterestMutation) RemovedDailyItineraryIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_itinerary {
		ids = append(ids, id)
	}
	return
}

// DailyItineraryIDs returns the "daily_itinerary" edge IDs in the mutation.
func (m *PointsOfInterestMutation) DailyItineraryIDs() (ids []uuid.UUID) {
	for id := range m.daily_itinerary {
		ids = append(ids, id)
	}
	return
}

// ResetDailyItinerary resets all changes to the "daily_itinerary" edge.
func (m *PointsOfInterestMutation) ResetDailyItinerary() {
	m.daily_itinerary = nil
	m.cleareddaily_itinerary = false
	m.removeddaily_itinerary = nil
}

// Where appends a list predicates to the PointsOfInterestMutation builder.
func (m *PointsOfInterestMutation) Where(ps ...predicate.PointsOfInterest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PointsOfInterestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PointsOfInterestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PointsOfInterest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PointsOfInterestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PointsOfInterestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PointsOfInterest).
func (m *PointsOfInterestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PointsOfInterestMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, pointsofinterest.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pointsofinterest.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, pointsofinterest.FieldName)
	}
	if m.name_en != nil {
		fields = append(fields, pointsofinterest.FieldNameEn)
	}
	if m.name_cn != nil {
		fields = append(fields, pointsofinterest.FieldNameCn)
	}
	if m.description != nil {
		fields = append(fields, pointsofinterest.FieldDescription)
	}
	if m.address != nil {
		fields = append(fields, pointsofinterest.FieldAddress)
	}
	if m.latitude != nil {
		fields = append(fields, pointsofinterest.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, pointsofinterest.FieldLongitude)
	}
	if m._type != nil {
		fields = append(fields, pointsofinterest.FieldType)
	}
	if m.category != nil {
		fields = append(fields, pointsofinterest.FieldCategory)
	}
	if m.rating != nil {
		fields = append(fields, pointsofinterest.FieldRating)
	}
	if m.recommended_duration_minutes != nil {
		fields = append(fields, pointsofinterest.FieldRecommendedDurationMinutes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PointsOfInterestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pointsofinterest.FieldCreatedAt:
		return m.CreatedAt()
	case pointsofinterest.FieldUpdatedAt:
		return m.UpdatedAt()
	case pointsofinterest.FieldName:
		return m.Name()
	case pointsofinterest.FieldNameEn:
		return m.NameEn()
	case pointsofinterest.FieldNameCn:
		return m.NameCn()
	case pointsofinterest.FieldDescription:
		return m.Description()
	case pointsofinterest.FieldAddress:
		return m.Address()
	case pointsofinterest.FieldLatitude:
		return m.Latitude()
	case pointsofinterest.FieldLongitude:
		return m.Longitude()
	case pointsofinterest.FieldType:
		return m.GetType()
	case pointsofinterest.FieldCategory:
		return m.Category()
	case pointsofinterest.FieldRating:
		return m.Rating()
	case pointsofinterest.FieldRecommendedDurationMinutes:
		return m.RecommendedDurationMinutes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PointsOfInterestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pointsofinterest.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pointsofinterest.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case pointsofinterest.FieldName:
		return m.OldName(ctx)
	case pointsofinterest.FieldNameEn:
		return m.OldNameEn(ctx)
	case pointsofinterest.FieldNameCn:
		return m.OldNameCn(ctx)
	case pointsofinterest.FieldDescription:
		return m.OldDescription(ctx)
	case pointsofinterest.FieldAddress:
		return m.OldAddress(ctx)
	case pointsofinterest.FieldLatitude:
		return m.OldLatitude(ctx)
	case pointsofinterest.FieldLongitude:
		return m.OldLongitude(ctx)
	case pointsofinterest.FieldType:
		return m.OldType(ctx)
	case pointsofinterest.FieldCategory:
		return m.OldCategory(ctx)
	case pointsofinterest.FieldRating:
		return m.OldRating(ctx)
	case pointsofinterest.FieldRecommendedDurationMinutes:
		return m.OldRecommendedDurationMinutes(ctx)
	}
	return nil, fmt.Errorf("unknown PointsOfInterest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointsOfInterestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pointsofinterest.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pointsofinterest.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case pointsofinterest.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pointsofinterest.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case pointsofinterest.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	case pointsofinterest.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case pointsofinterest.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case pointsofinterest.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case pointsofinterest.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case pointsofinterest.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case pointsofinterest.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case pointsofinterest.FieldRating:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case pointsofinterest.FieldRecommendedDurationMinutes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecommendedDurationMinutes(v)
		return nil
	}
	return fmt.Errorf("unknown PointsOfInterest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PointsOfInterestMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, pointsofinterest.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, pointsofinterest.FieldLongitude)
	}
	if m.addrating != nil {
		fields = append(fields, pointsofinterest.FieldRating)
	}
	if m.addrecommended_duration_minutes != nil {
		fields = append(fields, pointsofinterest.FieldRecommendedDurationMinutes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PointsOfInterestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pointsofinterest.FieldLatitude:
		return m.AddedLatitude()
	case pointsofinterest.FieldLongitude:
		return m.AddedLongitude()
	case pointsofinterest.FieldRating:
		return m.AddedRating()
	case pointsofinterest.FieldRecommendedDurationMinutes:
		return m.AddedRecommendedDurationMinutes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointsOfInterestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pointsofinterest.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case pointsofinterest.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	case pointsofinterest.FieldRating:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	case pointsofinterest.FieldRecommendedDurationMinutes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecommendedDurationMinutes(v)
		return nil
	}
	return fmt.Errorf("unknown PointsOfInterest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PointsOfInterestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PointsOfInterestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PointsOfInterestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PointsOfInterest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PointsOfInterestMutation) ResetField(name string) error {
	switch name {
	case pointsofinterest.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pointsofinterest.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case pointsofinterest.FieldName:
		m.ResetName()
		return nil
	case pointsofinterest.FieldNameEn:
		m.ResetNameEn()
		return nil
	case pointsofinterest.FieldNameCn:
		m.ResetNameCn()
		return nil
	case pointsofinterest.FieldDescription:
		m.ResetDescription()
		return nil
	case pointsofinterest.FieldAddress:
		m.ResetAddress()
		return nil
	case pointsofinterest.FieldLatitude:
		m.ResetLatitude()
		return nil
	case pointsofinterest.FieldLongitude:
		m.ResetLongitude()
		return nil
	case pointsofinterest.FieldType:
		m.ResetType()
		return nil
	case pointsofinterest.FieldCategory:
		m.ResetCategory()
		return nil
	case pointsofinterest.FieldRating:
		m.ResetRating()
		return nil
	case pointsofinterest.FieldRecommendedDurationMinutes:
		m.ResetRecommendedDurationMinutes()
		return nil
	}
	return fmt.Errorf("unknown PointsOfInterest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PointsOfInterestMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.city != nil {
		edges = append(edges, pointsofinterest.EdgeCity)
	}
	if m.state != nil {
		edges = append(edges, pointsofinterest.EdgeState)
	}
	if m.country != nil {
		edges = append(edges, pointsofinterest.EdgeCountry)
	}
	if m.continent != nil {
		edges = append(edges, pointsofinterest.EdgeContinent)
	}
	if m.daily_itinerary != nil {
		edges = append(edges, pointsofinterest.EdgeDailyItinerary)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PointsOfInterestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pointsofinterest.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case pointsofinterest.EdgeState:
		if id := m.state; id != nil {
			return []ent.Value{*id}
		}
	case pointsofinterest.EdgeCountry:
		if id := m.country; id != nil {
			return []ent.Value{*id}
		}
	case pointsofinterest.EdgeContinent:
		if id := m.continent; id != nil {
			return []ent.Value{*id}
		}
	case pointsofinterest.EdgeDailyItinerary:
		ids := make([]ent.Value, 0, len(m.daily_itinerary))
		for id := range m.daily_itinerary {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PointsOfInterestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removeddaily_itinerary != nil {
		edges = append(edges, pointsofinterest.EdgeDailyItinerary)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PointsOfInterestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pointsofinterest.EdgeDailyItinerary:
		ids := make([]ent.Value, 0, len(m.removeddaily_itinerary))
		for id := range m.removeddaily_itinerary {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PointsOfInterestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedcity {
		edges = append(edges, pointsofinterest.EdgeCity)
	}
	if m.clearedstate {
		edges = append(edges, pointsofinterest.EdgeState)
	}
	if m.clearedcountry {
		edges = append(edges, pointsofinterest.EdgeCountry)
	}
	if m.clearedcontinent {
		edges = append(edges, pointsofinterest.EdgeContinent)
	}
	if m.cleareddaily_itinerary {
		edges = append(edges, pointsofinterest.EdgeDailyItinerary)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PointsOfInterestMutation) EdgeCleared(name string) bool {
	switch name {
	case pointsofinterest.EdgeCity:
		return m.clearedcity
	case pointsofinterest.EdgeState:
		return m.clearedstate
	case pointsofinterest.EdgeCountry:
		return m.clearedcountry
	case pointsofinterest.EdgeContinent:
		return m.clearedcontinent
	case pointsofinterest.EdgeDailyItinerary:
		return m.cleareddaily_itinerary
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PointsOfInterestMutation) ClearEdge(name string) error {
	switch name {
	case pointsofinterest.EdgeCity:
		m.ClearCity()
		return nil
	case pointsofinterest.EdgeState:
		m.ClearState()
		return nil
	case pointsofinterest.EdgeCountry:
		m.ClearCountry()
		return nil
	case pointsofinterest.EdgeContinent:
		m.ClearContinent()
		return nil
	}
	return fmt.Errorf("unknown PointsOfInterest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PointsOfInterestMutation) ResetEdge(name string) error {
	switch name {
	case pointsofinterest.EdgeCity:
		m.ResetCity()
		return nil
	case pointsofinterest.EdgeState:
		m.ResetState()
		return nil
	case pointsofinterest.EdgeCountry:
		m.ResetCountry()
		return nil
	case pointsofinterest.EdgeContinent:
		m.ResetContinent()
		return nil
	case pointsofinterest.EdgeDailyItinerary:
		m.ResetDailyItinerary()
		return nil
	}
	return fmt.Errorf("unknown PointsOfInterest edge %s", name)
}

// RefreshTokenMutation represents an operation that mutates the RefreshToken nodes in the graph.
type RefreshTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	token         *string
	expires_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*RefreshToken, error)
	predicates    []predicate.RefreshToken
}

var _ ent.Mutation = (*RefreshTokenMutation)(nil)

// refreshtokenOption allows management of the mutation configuration using functional options.
type refreshtokenOption func(*RefreshTokenMutation)

// newRefreshTokenMutation creates new mutation for the RefreshToken entity.
func newRefreshTokenMutation(c config, op Op, opts ...refreshtokenOption) *RefreshTokenMutation {
	m := &RefreshTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeRefreshToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRefreshTokenID sets the ID field of the mutation.
func withRefreshTokenID(id uuid.UUID) refreshtokenOption {
	return func(m *RefreshTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *RefreshToken
		)
		m.oldValue = func(ctx context.Context) (*RefreshToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RefreshToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRefreshToken sets the old RefreshToken of the mutation.
func withRefreshToken(node *RefreshToken) refreshtokenOption {
	return func(m *RefreshTokenMutation) {
		m.oldValue = func(context.Context) (*RefreshToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RefreshTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RefreshTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RefreshToken entities.
func (m *RefreshTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RefreshTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RefreshTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RefreshToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RefreshTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RefreshTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RefreshTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RefreshTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RefreshTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RefreshTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetToken sets the "token" field.
func (m *RefreshTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *RefreshTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *RefreshTokenMutation) ResetToken() {
	m.token = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *RefreshTokenMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *RefreshTokenMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *RefreshTokenMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetUserID sets the "user_id" field.
func (m *RefreshTokenMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *RefreshTokenMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *RefreshTokenMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *RefreshTokenMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[refreshtoken.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RefreshTokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RefreshTokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RefreshTokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the RefreshTokenMutation builder.
func (m *RefreshTokenMutation) Where(ps ...predicate.RefreshToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RefreshTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RefreshTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RefreshToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RefreshTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RefreshTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RefreshToken).
func (m *RefreshTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RefreshTokenMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, refreshtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, refreshtoken.FieldUpdatedAt)
	}
	if m.token != nil {
		fields = append(fields, refreshtoken.FieldToken)
	}
	if m.expires_at != nil {
		fields = append(fields, refreshtoken.FieldExpiresAt)
	}
	if m.user != nil {
		fields = append(fields, refreshtoken.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RefreshTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case refreshtoken.FieldCreatedAt:
		return m.CreatedAt()
	case refreshtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case refreshtoken.FieldToken:
		return m.Token()
	case refreshtoken.FieldExpiresAt:
		return m.ExpiresAt()
	case refreshtoken.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RefreshTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case refreshtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case refreshtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case refreshtoken.FieldToken:
		return m.OldToken(ctx)
	case refreshtoken.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case refreshtoken.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown RefreshToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case refreshtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case refreshtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case refreshtoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case refreshtoken.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case refreshtoken.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown RefreshToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RefreshTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RefreshTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RefreshToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RefreshTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RefreshTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RefreshTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RefreshToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RefreshTokenMutation) ResetField(name string) error {
	switch name {
	case refreshtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case refreshtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case refreshtoken.FieldToken:
		m.ResetToken()
		return nil
	case refreshtoken.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case refreshtoken.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RefreshTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, refreshtoken.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RefreshTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case refreshtoken.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RefreshTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RefreshTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RefreshTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, refreshtoken.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RefreshTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case refreshtoken.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RefreshTokenMutation) ClearEdge(name string) error {
	switch name {
	case refreshtoken.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RefreshTokenMutation) ResetEdge(name string) error {
	switch name {
	case refreshtoken.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken edge %s", name)
}

// StateMutation represents an operation that mutates the State nodes in the graph.
type StateMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	name_en       *string
	name_cn       *string
	clearedFields map[string]struct{}
	poi           map[uuid.UUID]struct{}
	removedpoi    map[uuid.UUID]struct{}
	clearedpoi    bool
	done          bool
	oldValue      func(context.Context) (*State, error)
	predicates    []predicate.State
}

var _ ent.Mutation = (*StateMutation)(nil)

// stateOption allows management of the mutation configuration using functional options.
type stateOption func(*StateMutation)

// newStateMutation creates new mutation for the State entity.
func newStateMutation(c config, op Op, opts ...stateOption) *StateMutation {
	m := &StateMutation{
		config:        c,
		op:            op,
		typ:           TypeState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStateID sets the ID field of the mutation.
func withStateID(id uuid.UUID) stateOption {
	return func(m *StateMutation) {
		var (
			err   error
			once  sync.Once
			value *State
		)
		m.oldValue = func(ctx context.Context) (*State, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().State.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withState sets the old State of the mutation.
func withState(node *State) stateOption {
	return func(m *StateMutation) {
		m.oldValue = func(context.Context) (*State, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of State entities.
func (m *StateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StateMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().State.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the State entity.
// If the State object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the State entity.
// If the State object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *StateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the State entity.
// If the State object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StateMutation) ResetName() {
	m.name = nil
}

// SetNameEn sets the "name_en" field.
func (m *StateMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *StateMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the State entity.
// If the State object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StateMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *StateMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameCn sets the "name_cn" field.
func (m *StateMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *StateMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the State entity.
// If the State object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StateMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *StateMutation) ResetNameCn() {
	m.name_cn = nil
}

// AddPoiIDs adds the "poi" edge to the PointsOfInterest entity by ids.
func (m *StateMutation) AddPoiIDs(ids ...uuid.UUID) {
	if m.poi == nil {
		m.poi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.poi[ids[i]] = struct{}{}
	}
}

// ClearPoi clears the "poi" edge to the PointsOfInterest entity.
func (m *StateMutation) ClearPoi() {
	m.clearedpoi = true
}

// PoiCleared reports if the "poi" edge to the PointsOfInterest entity was cleared.
func (m *StateMutation) PoiCleared() bool {
	return m.clearedpoi
}

// RemovePoiIDs removes the "poi" edge to the PointsOfInterest entity by IDs.
func (m *StateMutation) RemovePoiIDs(ids ...uuid.UUID) {
	if m.removedpoi == nil {
		m.removedpoi = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.poi, ids[i])
		m.removedpoi[ids[i]] = struct{}{}
	}
}

// RemovedPoi returns the removed IDs of the "poi" edge to the PointsOfInterest entity.
func (m *StateMutation) RemovedPoiIDs() (ids []uuid.UUID) {
	for id := range m.removedpoi {
		ids = append(ids, id)
	}
	return
}

// PoiIDs returns the "poi" edge IDs in the mutation.
func (m *StateMutation) PoiIDs() (ids []uuid.UUID) {
	for id := range m.poi {
		ids = append(ids, id)
	}
	return
}

// ResetPoi resets all changes to the "poi" edge.
func (m *StateMutation) ResetPoi() {
	m.poi = nil
	m.clearedpoi = false
	m.removedpoi = nil
}

// Where appends a list predicates to the StateMutation builder.
func (m *StateMutation) Where(ps ...predicate.State) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.State, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (State).
func (m *StateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StateMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, state.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, state.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, state.FieldName)
	}
	if m.name_en != nil {
		fields = append(fields, state.FieldNameEn)
	}
	if m.name_cn != nil {
		fields = append(fields, state.FieldNameCn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case state.FieldCreatedAt:
		return m.CreatedAt()
	case state.FieldUpdatedAt:
		return m.UpdatedAt()
	case state.FieldName:
		return m.Name()
	case state.FieldNameEn:
		return m.NameEn()
	case state.FieldNameCn:
		return m.NameCn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case state.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case state.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case state.FieldName:
		return m.OldName(ctx)
	case state.FieldNameEn:
		return m.OldNameEn(ctx)
	case state.FieldNameCn:
		return m.OldNameCn(ctx)
	}
	return nil, fmt.Errorf("unknown State field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case state.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case state.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case state.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case state.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case state.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	}
	return fmt.Errorf("unknown State field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown State numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown State nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StateMutation) ResetField(name string) error {
	switch name {
	case state.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case state.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case state.FieldName:
		m.ResetName()
		return nil
	case state.FieldNameEn:
		m.ResetNameEn()
		return nil
	case state.FieldNameCn:
		m.ResetNameCn()
		return nil
	}
	return fmt.Errorf("unknown State field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.poi != nil {
		edges = append(edges, state.EdgePoi)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case state.EdgePoi:
		ids := make([]ent.Value, 0, len(m.poi))
		for id := range m.poi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpoi != nil {
		edges = append(edges, state.EdgePoi)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case state.EdgePoi:
		ids := make([]ent.Value, 0, len(m.removedpoi))
		for id := range m.removedpoi {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpoi {
		edges = append(edges, state.EdgePoi)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StateMutation) EdgeCleared(name string) bool {
	switch name {
	case state.EdgePoi:
		return m.clearedpoi
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown State unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StateMutation) ResetEdge(name string) error {
	switch name {
	case state.EdgePoi:
		m.ResetPoi()
		return nil
	}
	return fmt.Errorf("unknown State edge %s", name)
}

// TripMutation represents an operation that mutates the Trip nodes in the graph.
type TripMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	status                 *bool
	title                  *string
	description            *string
	start_date             *time.Time
	end_date               *time.Time
	clearedFields          map[string]struct{}
	user                   *uuid.UUID
	cleareduser            bool
	daily_trip             map[uuid.UUID]struct{}
	removeddaily_trip      map[uuid.UUID]struct{}
	cleareddaily_trip      bool
	daily_itinerary        map[uuid.UUID]struct{}
	removeddaily_itinerary map[uuid.UUID]struct{}
	cleareddaily_itinerary bool
	done                   bool
	oldValue               func(context.Context) (*Trip, error)
	predicates             []predicate.Trip
}

var _ ent.Mutation = (*TripMutation)(nil)

// tripOption allows management of the mutation configuration using functional options.
type tripOption func(*TripMutation)

// newTripMutation creates new mutation for the Trip entity.
func newTripMutation(c config, op Op, opts ...tripOption) *TripMutation {
	m := &TripMutation{
		config:        c,
		op:            op,
		typ:           TypeTrip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTripID sets the ID field of the mutation.
func withTripID(id uuid.UUID) tripOption {
	return func(m *TripMutation) {
		var (
			err   error
			once  sync.Once
			value *Trip
		)
		m.oldValue = func(ctx context.Context) (*Trip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Trip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrip sets the old Trip of the mutation.
func withTrip(node *Trip) tripOption {
	return func(m *TripMutation) {
		m.oldValue = func(context.Context) (*Trip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TripMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TripMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Trip entities.
func (m *TripMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TripMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TripMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Trip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TripMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TripMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TripMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TripMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TripMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TripMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *TripMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TripMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TripMutation) ResetUserID() {
	m.user = nil
}

// SetStatus sets the "status" field.
func (m *TripMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *TripMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TripMutation) ResetStatus() {
	m.status = nil
}

// SetTitle sets the "title" field.
func (m *TripMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TripMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TripMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TripMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TripMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TripMutation) ResetDescription() {
	m.description = nil
}

// SetStartDate sets the "start_date" field.
func (m *TripMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *TripMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *TripMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *TripMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *TripMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *TripMutation) ResetEndDate() {
	m.end_date = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *TripMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[trip.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TripMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TripMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TripMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddDailyTripIDs adds the "daily_trip" edge to the DailyTrip entity by ids.
func (m *TripMutation) AddDailyTripIDs(ids ...uuid.UUID) {
	if m.daily_trip == nil {
		m.daily_trip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_trip[ids[i]] = struct{}{}
	}
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (m *TripMutation) ClearDailyTrip() {
	m.cleareddaily_trip = true
}

// DailyTripCleared reports if the "daily_trip" edge to the DailyTrip entity was cleared.
func (m *TripMutation) DailyTripCleared() bool {
	return m.cleareddaily_trip
}

// RemoveDailyTripIDs removes the "daily_trip" edge to the DailyTrip entity by IDs.
func (m *TripMutation) RemoveDailyTripIDs(ids ...uuid.UUID) {
	if m.removeddaily_trip == nil {
		m.removeddaily_trip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_trip, ids[i])
		m.removeddaily_trip[ids[i]] = struct{}{}
	}
}

// RemovedDailyTrip returns the removed IDs of the "daily_trip" edge to the DailyTrip entity.
func (m *TripMutation) RemovedDailyTripIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_trip {
		ids = append(ids, id)
	}
	return
}

// DailyTripIDs returns the "daily_trip" edge IDs in the mutation.
func (m *TripMutation) DailyTripIDs() (ids []uuid.UUID) {
	for id := range m.daily_trip {
		ids = append(ids, id)
	}
	return
}

// ResetDailyTrip resets all changes to the "daily_trip" edge.
func (m *TripMutation) ResetDailyTrip() {
	m.daily_trip = nil
	m.cleareddaily_trip = false
	m.removeddaily_trip = nil
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by ids.
func (m *TripMutation) AddDailyItineraryIDs(ids ...uuid.UUID) {
	if m.daily_itinerary == nil {
		m.daily_itinerary = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_itinerary[ids[i]] = struct{}{}
	}
}

// ClearDailyItinerary clears the "daily_itinerary" edge to the DailyItinerary entity.
func (m *TripMutation) ClearDailyItinerary() {
	m.cleareddaily_itinerary = true
}

// DailyItineraryCleared reports if the "daily_itinerary" edge to the DailyItinerary entity was cleared.
func (m *TripMutation) DailyItineraryCleared() bool {
	return m.cleareddaily_itinerary
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (m *TripMutation) RemoveDailyItineraryIDs(ids ...uuid.UUID) {
	if m.removeddaily_itinerary == nil {
		m.removeddaily_itinerary = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_itinerary, ids[i])
		m.removeddaily_itinerary[ids[i]] = struct{}{}
	}
}

// RemovedDailyItinerary returns the removed IDs of the "daily_itinerary" edge to the DailyItinerary entity.
func (m *TripMutation) RemovedDailyItineraryIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_itinerary {
		ids = append(ids, id)
	}
	return
}

// DailyItineraryIDs returns the "daily_itinerary" edge IDs in the mutation.
func (m *TripMutation) DailyItineraryIDs() (ids []uuid.UUID) {
	for id := range m.daily_itinerary {
		ids = append(ids, id)
	}
	return
}

// ResetDailyItinerary resets all changes to the "daily_itinerary" edge.
func (m *TripMutation) ResetDailyItinerary() {
	m.daily_itinerary = nil
	m.cleareddaily_itinerary = false
	m.removeddaily_itinerary = nil
}

// Where appends a list predicates to the TripMutation builder.
func (m *TripMutation) Where(ps ...predicate.Trip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TripMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TripMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Trip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TripMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TripMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Trip).
func (m *TripMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TripMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, trip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, trip.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, trip.FieldUserID)
	}
	if m.status != nil {
		fields = append(fields, trip.FieldStatus)
	}
	if m.title != nil {
		fields = append(fields, trip.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, trip.FieldDescription)
	}
	if m.start_date != nil {
		fields = append(fields, trip.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, trip.FieldEndDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TripMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trip.FieldCreatedAt:
		return m.CreatedAt()
	case trip.FieldUpdatedAt:
		return m.UpdatedAt()
	case trip.FieldUserID:
		return m.UserID()
	case trip.FieldStatus:
		return m.Status()
	case trip.FieldTitle:
		return m.Title()
	case trip.FieldDescription:
		return m.Description()
	case trip.FieldStartDate:
		return m.StartDate()
	case trip.FieldEndDate:
		return m.EndDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TripMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case trip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case trip.FieldUserID:
		return m.OldUserID(ctx)
	case trip.FieldStatus:
		return m.OldStatus(ctx)
	case trip.FieldTitle:
		return m.OldTitle(ctx)
	case trip.FieldDescription:
		return m.OldDescription(ctx)
	case trip.FieldStartDate:
		return m.OldStartDate(ctx)
	case trip.FieldEndDate:
		return m.OldEndDate(ctx)
	}
	return nil, fmt.Errorf("unknown Trip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TripMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case trip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case trip.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case trip.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case trip.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case trip.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case trip.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case trip.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	}
	return fmt.Errorf("unknown Trip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TripMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TripMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TripMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Trip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TripMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TripMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TripMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Trip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TripMutation) ResetField(name string) error {
	switch name {
	case trip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case trip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case trip.FieldUserID:
		m.ResetUserID()
		return nil
	case trip.FieldStatus:
		m.ResetStatus()
		return nil
	case trip.FieldTitle:
		m.ResetTitle()
		return nil
	case trip.FieldDescription:
		m.ResetDescription()
		return nil
	case trip.FieldStartDate:
		m.ResetStartDate()
		return nil
	case trip.FieldEndDate:
		m.ResetEndDate()
		return nil
	}
	return fmt.Errorf("unknown Trip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TripMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, trip.EdgeUser)
	}
	if m.daily_trip != nil {
		edges = append(edges, trip.EdgeDailyTrip)
	}
	if m.daily_itinerary != nil {
		edges = append(edges, trip.EdgeDailyItinerary)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TripMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case trip.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case trip.EdgeDailyTrip:
		ids := make([]ent.Value, 0, len(m.daily_trip))
		for id := range m.daily_trip {
			ids = append(ids, id)
		}
		return ids
	case trip.EdgeDailyItinerary:
		ids := make([]ent.Value, 0, len(m.daily_itinerary))
		for id := range m.daily_itinerary {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TripMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddaily_trip != nil {
		edges = append(edges, trip.EdgeDailyTrip)
	}
	if m.removeddaily_itinerary != nil {
		edges = append(edges, trip.EdgeDailyItinerary)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TripMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case trip.EdgeDailyTrip:
		ids := make([]ent.Value, 0, len(m.removeddaily_trip))
		for id := range m.removeddaily_trip {
			ids = append(ids, id)
		}
		return ids
	case trip.EdgeDailyItinerary:
		ids := make([]ent.Value, 0, len(m.removeddaily_itinerary))
		for id := range m.removeddaily_itinerary {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TripMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, trip.EdgeUser)
	}
	if m.cleareddaily_trip {
		edges = append(edges, trip.EdgeDailyTrip)
	}
	if m.cleareddaily_itinerary {
		edges = append(edges, trip.EdgeDailyItinerary)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TripMutation) EdgeCleared(name string) bool {
	switch name {
	case trip.EdgeUser:
		return m.cleareduser
	case trip.EdgeDailyTrip:
		return m.cleareddaily_trip
	case trip.EdgeDailyItinerary:
		return m.cleareddaily_itinerary
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TripMutation) ClearEdge(name string) error {
	switch name {
	case trip.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Trip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TripMutation) ResetEdge(name string) error {
	switch name {
	case trip.EdgeUser:
		m.ResetUser()
		return nil
	case trip.EdgeDailyTrip:
		m.ResetDailyTrip()
		return nil
	case trip.EdgeDailyItinerary:
		m.ResetDailyItinerary()
		return nil
	}
	return fmt.Errorf("unknown Trip edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	status               *bool
	username             *string
	password             *string
	email                *string
	avatar_url           *string
	clearedFields        map[string]struct{}
	refresh_token        map[uuid.UUID]struct{}
	removedrefresh_token map[uuid.UUID]struct{}
	clearedrefresh_token bool
	trip                 map[uuid.UUID]struct{}
	removedtrip          map[uuid.UUID]struct{}
	clearedtrip          bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (m *UserMutation) ClearAvatarURL() {
	m.avatar_url = nil
	m.clearedFields[user.FieldAvatarURL] = struct{}{}
}

// AvatarURLCleared returns if the "avatar_url" field was cleared in this mutation.
func (m *UserMutation) AvatarURLCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarURL]
	return ok
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
	delete(m.clearedFields, user.FieldAvatarURL)
}

// AddRefreshTokenIDs adds the "refresh_token" edge to the RefreshToken entity by ids.
func (m *UserMutation) AddRefreshTokenIDs(ids ...uuid.UUID) {
	if m.refresh_token == nil {
		m.refresh_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.refresh_token[ids[i]] = struct{}{}
	}
}

// ClearRefreshToken clears the "refresh_token" edge to the RefreshToken entity.
func (m *UserMutation) ClearRefreshToken() {
	m.clearedrefresh_token = true
}

// RefreshTokenCleared reports if the "refresh_token" edge to the RefreshToken entity was cleared.
func (m *UserMutation) RefreshTokenCleared() bool {
	return m.clearedrefresh_token
}

// RemoveRefreshTokenIDs removes the "refresh_token" edge to the RefreshToken entity by IDs.
func (m *UserMutation) RemoveRefreshTokenIDs(ids ...uuid.UUID) {
	if m.removedrefresh_token == nil {
		m.removedrefresh_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.refresh_token, ids[i])
		m.removedrefresh_token[ids[i]] = struct{}{}
	}
}

// RemovedRefreshToken returns the removed IDs of the "refresh_token" edge to the RefreshToken entity.
func (m *UserMutation) RemovedRefreshTokenIDs() (ids []uuid.UUID) {
	for id := range m.removedrefresh_token {
		ids = append(ids, id)
	}
	return
}

// RefreshTokenIDs returns the "refresh_token" edge IDs in the mutation.
func (m *UserMutation) RefreshTokenIDs() (ids []uuid.UUID) {
	for id := range m.refresh_token {
		ids = append(ids, id)
	}
	return
}

// ResetRefreshToken resets all changes to the "refresh_token" edge.
func (m *UserMutation) ResetRefreshToken() {
	m.refresh_token = nil
	m.clearedrefresh_token = false
	m.removedrefresh_token = nil
}

// AddTripIDs adds the "trip" edge to the Trip entity by ids.
func (m *UserMutation) AddTripIDs(ids ...uuid.UUID) {
	if m.trip == nil {
		m.trip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.trip[ids[i]] = struct{}{}
	}
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (m *UserMutation) ClearTrip() {
	m.clearedtrip = true
}

// TripCleared reports if the "trip" edge to the Trip entity was cleared.
func (m *UserMutation) TripCleared() bool {
	return m.clearedtrip
}

// RemoveTripIDs removes the "trip" edge to the Trip entity by IDs.
func (m *UserMutation) RemoveTripIDs(ids ...uuid.UUID) {
	if m.removedtrip == nil {
		m.removedtrip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.trip, ids[i])
		m.removedtrip[ids[i]] = struct{}{}
	}
}

// RemovedTrip returns the removed IDs of the "trip" edge to the Trip entity.
func (m *UserMutation) RemovedTripIDs() (ids []uuid.UUID) {
	for id := range m.removedtrip {
		ids = append(ids, id)
	}
	return
}

// TripIDs returns the "trip" edge IDs in the mutation.
func (m *UserMutation) TripIDs() (ids []uuid.UUID) {
	for id := range m.trip {
		ids = append(ids, id)
	}
	return
}

// ResetTrip resets all changes to the "trip" edge.
func (m *UserMutation) ResetTrip() {
	m.trip = nil
	m.clearedtrip = false
	m.removedtrip = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldStatus:
		return m.Status()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAvatarURL) {
		fields = append(fields, user.FieldAvatarURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAvatarURL:
		m.ClearAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.refresh_token != nil {
		edges = append(edges, user.EdgeRefreshToken)
	}
	if m.trip != nil {
		edges = append(edges, user.EdgeTrip)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.refresh_token))
		for id := range m.refresh_token {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTrip:
		ids := make([]ent.Value, 0, len(m.trip))
		for id := range m.trip {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrefresh_token != nil {
		edges = append(edges, user.EdgeRefreshToken)
	}
	if m.removedtrip != nil {
		edges = append(edges, user.EdgeTrip)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.removedrefresh_token))
		for id := range m.removedrefresh_token {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTrip:
		ids := make([]ent.Value, 0, len(m.removedtrip))
		for id := range m.removedtrip {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrefresh_token {
		edges = append(edges, user.EdgeRefreshToken)
	}
	if m.clearedtrip {
		edges = append(edges, user.EdgeTrip)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRefreshToken:
		return m.clearedrefresh_token
	case user.EdgeTrip:
		return m.clearedtrip
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRefreshToken:
		m.ResetRefreshToken()
		return nil
	case user.EdgeTrip:
		m.ResetTrip()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
