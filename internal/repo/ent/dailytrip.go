// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
)

// DailyTrip is the model entity for the DailyTrip schema.
type DailyTrip struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TripID holds the value of the "trip_id" field.
	TripID uuid.UUID `json:"trip_id,omitempty"`
	// Day holds the value of the "day" field.
	Day int32 `json:"day,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DailyTripQuery when eager-loading is set.
	Edges        DailyTripEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DailyTripEdges holds the relations/edges for other nodes in the graph.
type DailyTripEdges struct {
	// Trip holds the value of the trip edge.
	Trip *Trip `json:"trip,omitempty"`
	// DailyTripItem holds the value of the daily_trip_item edge.
	DailyTripItem []*DailyTripItem `json:"daily_trip_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TripOrErr returns the Trip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyTripEdges) TripOrErr() (*Trip, error) {
	if e.Trip != nil {
		return e.Trip, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: trip.Label}
	}
	return nil, &NotLoadedError{edge: "trip"}
}

// DailyTripItemOrErr returns the DailyTripItem value or an error if the edge
// was not loaded in eager-loading.
func (e DailyTripEdges) DailyTripItemOrErr() ([]*DailyTripItem, error) {
	if e.loadedTypes[1] {
		return e.DailyTripItem, nil
	}
	return nil, &NotLoadedError{edge: "daily_trip_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyTrip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailytrip.FieldDay:
			values[i] = new(sql.NullInt64)
		case dailytrip.FieldNotes:
			values[i] = new(sql.NullString)
		case dailytrip.FieldCreatedAt, dailytrip.FieldUpdatedAt, dailytrip.FieldDate:
			values[i] = new(sql.NullTime)
		case dailytrip.FieldID, dailytrip.FieldTripID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyTrip fields.
func (dt *DailyTrip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailytrip.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dt.ID = *value
			}
		case dailytrip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dt.CreatedAt = value.Time
			}
		case dailytrip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dt.UpdatedAt = value.Time
			}
		case dailytrip.FieldTripID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field trip_id", values[i])
			} else if value != nil {
				dt.TripID = *value
			}
		case dailytrip.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				dt.Day = int32(value.Int64)
			}
		case dailytrip.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				dt.Date = value.Time
			}
		case dailytrip.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				dt.Notes = value.String
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DailyTrip.
// This includes values selected through modifiers, order, etc.
func (dt *DailyTrip) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// QueryTrip queries the "trip" edge of the DailyTrip entity.
func (dt *DailyTrip) QueryTrip() *TripQuery {
	return NewDailyTripClient(dt.config).QueryTrip(dt)
}

// QueryDailyTripItem queries the "daily_trip_item" edge of the DailyTrip entity.
func (dt *DailyTrip) QueryDailyTripItem() *DailyTripItemQuery {
	return NewDailyTripClient(dt.config).QueryDailyTripItem(dt)
}

// Update returns a builder for updating this DailyTrip.
// Note that you need to call DailyTrip.Unwrap() before calling this method if this DailyTrip
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DailyTrip) Update() *DailyTripUpdateOne {
	return NewDailyTripClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DailyTrip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DailyTrip) Unwrap() *DailyTrip {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyTrip is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DailyTrip) String() string {
	var builder strings.Builder
	builder.WriteString("DailyTrip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("trip_id=")
	builder.WriteString(fmt.Sprintf("%v", dt.TripID))
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", dt.Day))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(dt.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(dt.Notes)
	builder.WriteByte(')')
	return builder.String()
}

// DailyTrips is a parsable slice of DailyTrip.
type DailyTrips []*DailyTrip
