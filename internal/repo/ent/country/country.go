// Code generated by ent, DO NOT EDIT.

package country

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the country type in the database.
	Label = "country"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// FieldNameCn holds the string denoting the name_cn field in the database.
	FieldNameCn = "name_cn"
	// EdgePoi holds the string denoting the poi edge name in mutations.
	EdgePoi = "poi"
	// Table holds the table name of the country in the database.
	Table = "countries"
	// PoiTable is the table that holds the poi relation/edge.
	PoiTable = "points_of_interest"
	// PoiInverseTable is the table name for the PointsOfInterest entity.
	// It exists in this package in order to avoid circular dependency with the "pointsofinterest" package.
	PoiInverseTable = "points_of_interest"
	// PoiColumn is the table column denoting the poi relation/edge.
	PoiColumn = "country_id"
)

// Columns holds all SQL columns for country fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldNameEn,
	FieldNameCn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// NameEnValidator is a validator for the "name_en" field. It is called by the builders before save.
	NameEnValidator func(string) error
	// NameCnValidator is a validator for the "name_cn" field. It is called by the builders before save.
	NameCnValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Country queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNameEn orders the results by the name_en field.
func ByNameEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameEn, opts...).ToFunc()
}

// ByNameCn orders the results by the name_cn field.
func ByNameCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameCn, opts...).ToFunc()
}

// ByPoiCount orders the results by poi count.
func ByPoiCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPoiStep(), opts...)
	}
}

// ByPoi orders the results by poi terms.
func ByPoi(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPoiStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPoiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PoiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PoiTable, PoiColumn),
	)
}
