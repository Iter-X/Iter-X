// Code generated by ent, DO NOT EDIT.

package pointsofinterest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldName, v))
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldNameEn, v))
}

// NameCn applies equality check predicate on the "name_cn" field. It's identical to NameCnEQ.
func NameCn(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldNameCn, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldDescription, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldAddress, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldLongitude, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldType, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCategory, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldRating, v))
}

// RecommendedDurationMinutes applies equality check predicate on the "recommended_duration_minutes" field. It's identical to RecommendedDurationMinutesEQ.
func RecommendedDurationMinutes(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldRecommendedDurationMinutes, v))
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCityID, v))
}

// StateID applies equality check predicate on the "state_id" field. It's identical to StateIDEQ.
func StateID(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldStateID, v))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCountryID, v))
}

// ContinentID applies equality check predicate on the "continent_id" field. It's identical to ContinentIDEQ.
func ContinentID(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldContinentID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldName, v))
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldNameEn, v))
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldNameEn, v))
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldNameEn, vs...))
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldNameEn, vs...))
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldNameEn, v))
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldNameEn, v))
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldNameEn, v))
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldNameEn, v))
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldNameEn, v))
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldNameEn, v))
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldNameEn, v))
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldNameEn, v))
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldNameEn, v))
}

// NameCnEQ applies the EQ predicate on the "name_cn" field.
func NameCnEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldNameCn, v))
}

// NameCnNEQ applies the NEQ predicate on the "name_cn" field.
func NameCnNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldNameCn, v))
}

// NameCnIn applies the In predicate on the "name_cn" field.
func NameCnIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldNameCn, vs...))
}

// NameCnNotIn applies the NotIn predicate on the "name_cn" field.
func NameCnNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldNameCn, vs...))
}

// NameCnGT applies the GT predicate on the "name_cn" field.
func NameCnGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldNameCn, v))
}

// NameCnGTE applies the GTE predicate on the "name_cn" field.
func NameCnGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldNameCn, v))
}

// NameCnLT applies the LT predicate on the "name_cn" field.
func NameCnLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldNameCn, v))
}

// NameCnLTE applies the LTE predicate on the "name_cn" field.
func NameCnLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldNameCn, v))
}

// NameCnContains applies the Contains predicate on the "name_cn" field.
func NameCnContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldNameCn, v))
}

// NameCnHasPrefix applies the HasPrefix predicate on the "name_cn" field.
func NameCnHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldNameCn, v))
}

// NameCnHasSuffix applies the HasSuffix predicate on the "name_cn" field.
func NameCnHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldNameCn, v))
}

// NameCnEqualFold applies the EqualFold predicate on the "name_cn" field.
func NameCnEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldNameCn, v))
}

// NameCnContainsFold applies the ContainsFold predicate on the "name_cn" field.
func NameCnContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldNameCn, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldDescription, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldAddress, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldLatitude, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldLongitude, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldType, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldContainsFold(FieldCategory, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v float32) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldRating, v))
}

// RecommendedDurationMinutesEQ applies the EQ predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesEQ(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldRecommendedDurationMinutes, v))
}

// RecommendedDurationMinutesNEQ applies the NEQ predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesNEQ(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldRecommendedDurationMinutes, v))
}

// RecommendedDurationMinutesIn applies the In predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesIn(vs ...int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldRecommendedDurationMinutes, vs...))
}

// RecommendedDurationMinutesNotIn applies the NotIn predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesNotIn(vs ...int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldRecommendedDurationMinutes, vs...))
}

// RecommendedDurationMinutesGT applies the GT predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesGT(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGT(FieldRecommendedDurationMinutes, v))
}

// RecommendedDurationMinutesGTE applies the GTE predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesGTE(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldGTE(FieldRecommendedDurationMinutes, v))
}

// RecommendedDurationMinutesLT applies the LT predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesLT(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLT(FieldRecommendedDurationMinutes, v))
}

// RecommendedDurationMinutesLTE applies the LTE predicate on the "recommended_duration_minutes" field.
func RecommendedDurationMinutesLTE(v int64) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldLTE(FieldRecommendedDurationMinutes, v))
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldCityID, vs...))
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIsNull(FieldCityID))
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotNull(FieldCityID))
}

// StateIDEQ applies the EQ predicate on the "state_id" field.
func StateIDEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldStateID, v))
}

// StateIDNEQ applies the NEQ predicate on the "state_id" field.
func StateIDNEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldStateID, v))
}

// StateIDIn applies the In predicate on the "state_id" field.
func StateIDIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldStateID, vs...))
}

// StateIDNotIn applies the NotIn predicate on the "state_id" field.
func StateIDNotIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldStateID, vs...))
}

// StateIDIsNil applies the IsNil predicate on the "state_id" field.
func StateIDIsNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIsNull(FieldStateID))
}

// StateIDNotNil applies the NotNil predicate on the "state_id" field.
func StateIDNotNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotNull(FieldStateID))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldCountryID, vs...))
}

// CountryIDIsNil applies the IsNil predicate on the "country_id" field.
func CountryIDIsNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIsNull(FieldCountryID))
}

// CountryIDNotNil applies the NotNil predicate on the "country_id" field.
func CountryIDNotNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotNull(FieldCountryID))
}

// ContinentIDEQ applies the EQ predicate on the "continent_id" field.
func ContinentIDEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldEQ(FieldContinentID, v))
}

// ContinentIDNEQ applies the NEQ predicate on the "continent_id" field.
func ContinentIDNEQ(v uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNEQ(FieldContinentID, v))
}

// ContinentIDIn applies the In predicate on the "continent_id" field.
func ContinentIDIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIn(FieldContinentID, vs...))
}

// ContinentIDNotIn applies the NotIn predicate on the "continent_id" field.
func ContinentIDNotIn(vs ...uuid.UUID) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotIn(FieldContinentID, vs...))
}

// ContinentIDIsNil applies the IsNil predicate on the "continent_id" field.
func ContinentIDIsNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldIsNull(FieldContinentID))
}

// ContinentIDNotNil applies the NotNil predicate on the "continent_id" field.
func ContinentIDNotNil() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.FieldNotNull(FieldContinentID))
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := newCityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasState applies the HasEdge predicate on the "state" edge.
func HasState() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StateTable, StateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStateWith applies the HasEdge predicate on the "state" edge with a given conditions (other predicates).
func HasStateWith(preds ...predicate.State) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := newStateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContinent applies the HasEdge predicate on the "continent" edge.
func HasContinent() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContinentTable, ContinentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContinentWith applies the HasEdge predicate on the "continent" edge with a given conditions (other predicates).
func HasContinentWith(preds ...predicate.Continent) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := newContinentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyItinerary applies the HasEdge predicate on the "daily_itinerary" edge.
func HasDailyItinerary() predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DailyItineraryTable, DailyItineraryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyItineraryWith applies the HasEdge predicate on the "daily_itinerary" edge with a given conditions (other predicates).
func HasDailyItineraryWith(preds ...predicate.DailyItinerary) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(func(s *sql.Selector) {
		step := newDailyItineraryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PointsOfInterest) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PointsOfInterest) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PointsOfInterest) predicate.PointsOfInterest {
	return predicate.PointsOfInterest(sql.NotPredicates(p))
}
