// Code generated by ent, DO NOT EDIT.

package pointsofinterest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the pointsofinterest type in the database.
	Label = "points_of_interest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// FieldNameCn holds the string denoting the name_cn field in the database.
	FieldNameCn = "name_cn"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldRecommendedDurationMinutes holds the string denoting the recommended_duration_minutes field in the database.
	FieldRecommendedDurationMinutes = "recommended_duration_minutes"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldStateID holds the string denoting the state_id field in the database.
	FieldStateID = "state_id"
	// FieldCountryID holds the string denoting the country_id field in the database.
	FieldCountryID = "country_id"
	// FieldContinentID holds the string denoting the continent_id field in the database.
	FieldContinentID = "continent_id"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// EdgeContinent holds the string denoting the continent edge name in mutations.
	EdgeContinent = "continent"
	// EdgeDailyItinerary holds the string denoting the daily_itinerary edge name in mutations.
	EdgeDailyItinerary = "daily_itinerary"
	// Table holds the table name of the pointsofinterest in the database.
	Table = "points_of_interest"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "points_of_interest"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "points_of_interest"
	// StateInverseTable is the table name for the State entity.
	// It exists in this package in order to avoid circular dependency with the "state" package.
	StateInverseTable = "states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "state_id"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "points_of_interest"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_id"
	// ContinentTable is the table that holds the continent relation/edge.
	ContinentTable = "points_of_interest"
	// ContinentInverseTable is the table name for the Continent entity.
	// It exists in this package in order to avoid circular dependency with the "continent" package.
	ContinentInverseTable = "continents"
	// ContinentColumn is the table column denoting the continent relation/edge.
	ContinentColumn = "continent_id"
	// DailyItineraryTable is the table that holds the daily_itinerary relation/edge.
	DailyItineraryTable = "daily_itineraries"
	// DailyItineraryInverseTable is the table name for the DailyItinerary entity.
	// It exists in this package in order to avoid circular dependency with the "dailyitinerary" package.
	DailyItineraryInverseTable = "daily_itineraries"
	// DailyItineraryColumn is the table column denoting the daily_itinerary relation/edge.
	DailyItineraryColumn = "poi_id"
)

// Columns holds all SQL columns for pointsofinterest fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldNameEn,
	FieldNameCn,
	FieldDescription,
	FieldAddress,
	FieldLatitude,
	FieldLongitude,
	FieldType,
	FieldCategory,
	FieldRating,
	FieldRecommendedDurationMinutes,
	FieldCityID,
	FieldStateID,
	FieldCountryID,
	FieldContinentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// NameEnValidator is a validator for the "name_en" field. It is called by the builders before save.
	NameEnValidator func(string) error
	// NameCnValidator is a validator for the "name_cn" field. It is called by the builders before save.
	NameCnValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(float32) error
	// RecommendedDurationMinutesValidator is a validator for the "recommended_duration_minutes" field. It is called by the builders before save.
	RecommendedDurationMinutesValidator func(int64) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PointsOfInterest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNameEn orders the results by the name_en field.
func ByNameEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameEn, opts...).ToFunc()
}

// ByNameCn orders the results by the name_cn field.
func ByNameCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameCn, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByRecommendedDurationMinutes orders the results by the recommended_duration_minutes field.
func ByRecommendedDurationMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendedDurationMinutes, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByStateID orders the results by the state_id field.
func ByStateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateID, opts...).ToFunc()
}

// ByCountryID orders the results by the country_id field.
func ByCountryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryID, opts...).ToFunc()
}

// ByContinentID orders the results by the continent_id field.
func ByContinentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContinentID, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByStateField orders the results by state field.
func ByStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStateStep(), sql.OrderByField(field, opts...))
	}
}

// ByCountryField orders the results by country field.
func ByCountryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), sql.OrderByField(field, opts...))
	}
}

// ByContinentField orders the results by continent field.
func ByContinentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContinentStep(), sql.OrderByField(field, opts...))
	}
}

// ByDailyItineraryCount orders the results by daily_itinerary count.
func ByDailyItineraryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDailyItineraryStep(), opts...)
	}
}

// ByDailyItinerary orders the results by daily_itinerary terms.
func ByDailyItinerary(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDailyItineraryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
	)
}
func newStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StateTable, StateColumn),
	)
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
	)
}
func newContinentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContinentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContinentTable, ContinentColumn),
	)
}
func newDailyItineraryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DailyItineraryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DailyItineraryTable, DailyItineraryColumn),
	)
}
