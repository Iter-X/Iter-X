// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/city"
	"github.com/iter-x/iter-x/internal/repo/ent/continent"
	"github.com/iter-x/iter-x/internal/repo/ent/country"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/pointsofinterest"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
)

// PointsOfInterestQuery is the builder for querying PointsOfInterest entities.
type PointsOfInterestQuery struct {
	config
	ctx                *QueryContext
	order              []pointsofinterest.OrderOption
	inters             []Interceptor
	predicates         []predicate.PointsOfInterest
	withCity           *CityQuery
	withState          *StateQuery
	withCountry        *CountryQuery
	withContinent      *ContinentQuery
	withDailyItinerary *DailyItineraryQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PointsOfInterestQuery builder.
func (poiq *PointsOfInterestQuery) Where(ps ...predicate.PointsOfInterest) *PointsOfInterestQuery {
	poiq.predicates = append(poiq.predicates, ps...)
	return poiq
}

// Limit the number of records to be returned by this query.
func (poiq *PointsOfInterestQuery) Limit(limit int) *PointsOfInterestQuery {
	poiq.ctx.Limit = &limit
	return poiq
}

// Offset to start from.
func (poiq *PointsOfInterestQuery) Offset(offset int) *PointsOfInterestQuery {
	poiq.ctx.Offset = &offset
	return poiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (poiq *PointsOfInterestQuery) Unique(unique bool) *PointsOfInterestQuery {
	poiq.ctx.Unique = &unique
	return poiq
}

// Order specifies how the records should be ordered.
func (poiq *PointsOfInterestQuery) Order(o ...pointsofinterest.OrderOption) *PointsOfInterestQuery {
	poiq.order = append(poiq.order, o...)
	return poiq
}

// QueryCity chains the current query on the "city" edge.
func (poiq *PointsOfInterestQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: poiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.CityTable, pointsofinterest.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(poiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryState chains the current query on the "state" edge.
func (poiq *PointsOfInterestQuery) QueryState() *StateQuery {
	query := (&StateClient{config: poiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, selector),
			sqlgraph.To(state.Table, state.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.StateTable, pointsofinterest.StateColumn),
		)
		fromU = sqlgraph.SetNeighbors(poiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (poiq *PointsOfInterestQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: poiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.CountryTable, pointsofinterest.CountryColumn),
		)
		fromU = sqlgraph.SetNeighbors(poiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContinent chains the current query on the "continent" edge.
func (poiq *PointsOfInterestQuery) QueryContinent() *ContinentQuery {
	query := (&ContinentClient{config: poiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, selector),
			sqlgraph.To(continent.Table, continent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pointsofinterest.ContinentTable, pointsofinterest.ContinentColumn),
		)
		fromU = sqlgraph.SetNeighbors(poiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDailyItinerary chains the current query on the "daily_itinerary" edge.
func (poiq *PointsOfInterestQuery) QueryDailyItinerary() *DailyItineraryQuery {
	query := (&DailyItineraryClient{config: poiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pointsofinterest.Table, pointsofinterest.FieldID, selector),
			sqlgraph.To(dailyitinerary.Table, dailyitinerary.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pointsofinterest.DailyItineraryTable, pointsofinterest.DailyItineraryColumn),
		)
		fromU = sqlgraph.SetNeighbors(poiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PointsOfInterest entity from the query.
// Returns a *NotFoundError when no PointsOfInterest was found.
func (poiq *PointsOfInterestQuery) First(ctx context.Context) (*PointsOfInterest, error) {
	nodes, err := poiq.Limit(1).All(setContextOp(ctx, poiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{pointsofinterest.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) FirstX(ctx context.Context) *PointsOfInterest {
	node, err := poiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PointsOfInterest ID from the query.
// Returns a *NotFoundError when no PointsOfInterest ID was found.
func (poiq *PointsOfInterestQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = poiq.Limit(1).IDs(setContextOp(ctx, poiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{pointsofinterest.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := poiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PointsOfInterest entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PointsOfInterest entity is found.
// Returns a *NotFoundError when no PointsOfInterest entities are found.
func (poiq *PointsOfInterestQuery) Only(ctx context.Context) (*PointsOfInterest, error) {
	nodes, err := poiq.Limit(2).All(setContextOp(ctx, poiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{pointsofinterest.Label}
	default:
		return nil, &NotSingularError{pointsofinterest.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) OnlyX(ctx context.Context) *PointsOfInterest {
	node, err := poiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PointsOfInterest ID in the query.
// Returns a *NotSingularError when more than one PointsOfInterest ID is found.
// Returns a *NotFoundError when no entities are found.
func (poiq *PointsOfInterestQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = poiq.Limit(2).IDs(setContextOp(ctx, poiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{pointsofinterest.Label}
	default:
		err = &NotSingularError{pointsofinterest.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := poiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PointsOfInterests.
func (poiq *PointsOfInterestQuery) All(ctx context.Context) ([]*PointsOfInterest, error) {
	ctx = setContextOp(ctx, poiq.ctx, ent.OpQueryAll)
	if err := poiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PointsOfInterest, *PointsOfInterestQuery]()
	return withInterceptors[[]*PointsOfInterest](ctx, poiq, qr, poiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) AllX(ctx context.Context) []*PointsOfInterest {
	nodes, err := poiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PointsOfInterest IDs.
func (poiq *PointsOfInterestQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if poiq.ctx.Unique == nil && poiq.path != nil {
		poiq.Unique(true)
	}
	ctx = setContextOp(ctx, poiq.ctx, ent.OpQueryIDs)
	if err = poiq.Select(pointsofinterest.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := poiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (poiq *PointsOfInterestQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, poiq.ctx, ent.OpQueryCount)
	if err := poiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, poiq, querierCount[*PointsOfInterestQuery](), poiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) CountX(ctx context.Context) int {
	count, err := poiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (poiq *PointsOfInterestQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, poiq.ctx, ent.OpQueryExist)
	switch _, err := poiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (poiq *PointsOfInterestQuery) ExistX(ctx context.Context) bool {
	exist, err := poiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PointsOfInterestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (poiq *PointsOfInterestQuery) Clone() *PointsOfInterestQuery {
	if poiq == nil {
		return nil
	}
	return &PointsOfInterestQuery{
		config:             poiq.config,
		ctx:                poiq.ctx.Clone(),
		order:              append([]pointsofinterest.OrderOption{}, poiq.order...),
		inters:             append([]Interceptor{}, poiq.inters...),
		predicates:         append([]predicate.PointsOfInterest{}, poiq.predicates...),
		withCity:           poiq.withCity.Clone(),
		withState:          poiq.withState.Clone(),
		withCountry:        poiq.withCountry.Clone(),
		withContinent:      poiq.withContinent.Clone(),
		withDailyItinerary: poiq.withDailyItinerary.Clone(),
		// clone intermediate query.
		sql:  poiq.sql.Clone(),
		path: poiq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (poiq *PointsOfInterestQuery) WithCity(opts ...func(*CityQuery)) *PointsOfInterestQuery {
	query := (&CityClient{config: poiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poiq.withCity = query
	return poiq
}

// WithState tells the query-builder to eager-load the nodes that are connected to
// the "state" edge. The optional arguments are used to configure the query builder of the edge.
func (poiq *PointsOfInterestQuery) WithState(opts ...func(*StateQuery)) *PointsOfInterestQuery {
	query := (&StateClient{config: poiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poiq.withState = query
	return poiq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (poiq *PointsOfInterestQuery) WithCountry(opts ...func(*CountryQuery)) *PointsOfInterestQuery {
	query := (&CountryClient{config: poiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poiq.withCountry = query
	return poiq
}

// WithContinent tells the query-builder to eager-load the nodes that are connected to
// the "continent" edge. The optional arguments are used to configure the query builder of the edge.
func (poiq *PointsOfInterestQuery) WithContinent(opts ...func(*ContinentQuery)) *PointsOfInterestQuery {
	query := (&ContinentClient{config: poiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poiq.withContinent = query
	return poiq
}

// WithDailyItinerary tells the query-builder to eager-load the nodes that are connected to
// the "daily_itinerary" edge. The optional arguments are used to configure the query builder of the edge.
func (poiq *PointsOfInterestQuery) WithDailyItinerary(opts ...func(*DailyItineraryQuery)) *PointsOfInterestQuery {
	query := (&DailyItineraryClient{config: poiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poiq.withDailyItinerary = query
	return poiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PointsOfInterest.Query().
//		GroupBy(pointsofinterest.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (poiq *PointsOfInterestQuery) GroupBy(field string, fields ...string) *PointsOfInterestGroupBy {
	poiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PointsOfInterestGroupBy{build: poiq}
	grbuild.flds = &poiq.ctx.Fields
	grbuild.label = pointsofinterest.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PointsOfInterest.Query().
//		Select(pointsofinterest.FieldCreatedAt).
//		Scan(ctx, &v)
func (poiq *PointsOfInterestQuery) Select(fields ...string) *PointsOfInterestSelect {
	poiq.ctx.Fields = append(poiq.ctx.Fields, fields...)
	sbuild := &PointsOfInterestSelect{PointsOfInterestQuery: poiq}
	sbuild.label = pointsofinterest.Label
	sbuild.flds, sbuild.scan = &poiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PointsOfInterestSelect configured with the given aggregations.
func (poiq *PointsOfInterestQuery) Aggregate(fns ...AggregateFunc) *PointsOfInterestSelect {
	return poiq.Select().Aggregate(fns...)
}

func (poiq *PointsOfInterestQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range poiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, poiq); err != nil {
				return err
			}
		}
	}
	for _, f := range poiq.ctx.Fields {
		if !pointsofinterest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if poiq.path != nil {
		prev, err := poiq.path(ctx)
		if err != nil {
			return err
		}
		poiq.sql = prev
	}
	return nil
}

func (poiq *PointsOfInterestQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PointsOfInterest, error) {
	var (
		nodes       = []*PointsOfInterest{}
		withFKs     = poiq.withFKs
		_spec       = poiq.querySpec()
		loadedTypes = [5]bool{
			poiq.withCity != nil,
			poiq.withState != nil,
			poiq.withCountry != nil,
			poiq.withContinent != nil,
			poiq.withDailyItinerary != nil,
		}
	)
	if poiq.withCity != nil || poiq.withState != nil || poiq.withCountry != nil || poiq.withContinent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, pointsofinterest.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PointsOfInterest).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PointsOfInterest{config: poiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, poiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := poiq.withCity; query != nil {
		if err := poiq.loadCity(ctx, query, nodes, nil,
			func(n *PointsOfInterest, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := poiq.withState; query != nil {
		if err := poiq.loadState(ctx, query, nodes, nil,
			func(n *PointsOfInterest, e *State) { n.Edges.State = e }); err != nil {
			return nil, err
		}
	}
	if query := poiq.withCountry; query != nil {
		if err := poiq.loadCountry(ctx, query, nodes, nil,
			func(n *PointsOfInterest, e *Country) { n.Edges.Country = e }); err != nil {
			return nil, err
		}
	}
	if query := poiq.withContinent; query != nil {
		if err := poiq.loadContinent(ctx, query, nodes, nil,
			func(n *PointsOfInterest, e *Continent) { n.Edges.Continent = e }); err != nil {
			return nil, err
		}
	}
	if query := poiq.withDailyItinerary; query != nil {
		if err := poiq.loadDailyItinerary(ctx, query, nodes,
			func(n *PointsOfInterest) { n.Edges.DailyItinerary = []*DailyItinerary{} },
			func(n *PointsOfInterest, e *DailyItinerary) {
				n.Edges.DailyItinerary = append(n.Edges.DailyItinerary, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (poiq *PointsOfInterestQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*PointsOfInterest, init func(*PointsOfInterest), assign func(*PointsOfInterest, *City)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PointsOfInterest)
	for i := range nodes {
		if nodes[i].city_poi == nil {
			continue
		}
		fk := *nodes[i].city_poi
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_poi" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (poiq *PointsOfInterestQuery) loadState(ctx context.Context, query *StateQuery, nodes []*PointsOfInterest, init func(*PointsOfInterest), assign func(*PointsOfInterest, *State)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PointsOfInterest)
	for i := range nodes {
		if nodes[i].state_poi == nil {
			continue
		}
		fk := *nodes[i].state_poi
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(state.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "state_poi" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (poiq *PointsOfInterestQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*PointsOfInterest, init func(*PointsOfInterest), assign func(*PointsOfInterest, *Country)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PointsOfInterest)
	for i := range nodes {
		if nodes[i].country_poi == nil {
			continue
		}
		fk := *nodes[i].country_poi
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(country.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "country_poi" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (poiq *PointsOfInterestQuery) loadContinent(ctx context.Context, query *ContinentQuery, nodes []*PointsOfInterest, init func(*PointsOfInterest), assign func(*PointsOfInterest, *Continent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PointsOfInterest)
	for i := range nodes {
		if nodes[i].continent_poi == nil {
			continue
		}
		fk := *nodes[i].continent_poi
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(continent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "continent_poi" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (poiq *PointsOfInterestQuery) loadDailyItinerary(ctx context.Context, query *DailyItineraryQuery, nodes []*PointsOfInterest, init func(*PointsOfInterest), assign func(*PointsOfInterest, *DailyItinerary)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PointsOfInterest)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(dailyitinerary.FieldPoiID)
	}
	query.Where(predicate.DailyItinerary(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(pointsofinterest.DailyItineraryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PoiID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "poi_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (poiq *PointsOfInterestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := poiq.querySpec()
	_spec.Node.Columns = poiq.ctx.Fields
	if len(poiq.ctx.Fields) > 0 {
		_spec.Unique = poiq.ctx.Unique != nil && *poiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, poiq.driver, _spec)
}

func (poiq *PointsOfInterestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(pointsofinterest.Table, pointsofinterest.Columns, sqlgraph.NewFieldSpec(pointsofinterest.FieldID, field.TypeUUID))
	_spec.From = poiq.sql
	if unique := poiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if poiq.path != nil {
		_spec.Unique = true
	}
	if fields := poiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pointsofinterest.FieldID)
		for i := range fields {
			if fields[i] != pointsofinterest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := poiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := poiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := poiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := poiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (poiq *PointsOfInterestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(poiq.driver.Dialect())
	t1 := builder.Table(pointsofinterest.Table)
	columns := poiq.ctx.Fields
	if len(columns) == 0 {
		columns = pointsofinterest.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if poiq.sql != nil {
		selector = poiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if poiq.ctx.Unique != nil && *poiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range poiq.predicates {
		p(selector)
	}
	for _, p := range poiq.order {
		p(selector)
	}
	if offset := poiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := poiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PointsOfInterestGroupBy is the group-by builder for PointsOfInterest entities.
type PointsOfInterestGroupBy struct {
	selector
	build *PointsOfInterestQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (poigb *PointsOfInterestGroupBy) Aggregate(fns ...AggregateFunc) *PointsOfInterestGroupBy {
	poigb.fns = append(poigb.fns, fns...)
	return poigb
}

// Scan applies the selector query and scans the result into the given value.
func (poigb *PointsOfInterestGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, poigb.build.ctx, ent.OpQueryGroupBy)
	if err := poigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PointsOfInterestQuery, *PointsOfInterestGroupBy](ctx, poigb.build, poigb, poigb.build.inters, v)
}

func (poigb *PointsOfInterestGroupBy) sqlScan(ctx context.Context, root *PointsOfInterestQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(poigb.fns))
	for _, fn := range poigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*poigb.flds)+len(poigb.fns))
		for _, f := range *poigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*poigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := poigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PointsOfInterestSelect is the builder for selecting fields of PointsOfInterest entities.
type PointsOfInterestSelect struct {
	*PointsOfInterestQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pois *PointsOfInterestSelect) Aggregate(fns ...AggregateFunc) *PointsOfInterestSelect {
	pois.fns = append(pois.fns, fns...)
	return pois
}

// Scan applies the selector query and scans the result into the given value.
func (pois *PointsOfInterestSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pois.ctx, ent.OpQuerySelect)
	if err := pois.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PointsOfInterestQuery, *PointsOfInterestSelect](ctx, pois.PointsOfInterestQuery, pois, pois.inters, v)
}

func (pois *PointsOfInterestSelect) sqlScan(ctx context.Context, root *PointsOfInterestQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pois.fns))
	for _, fn := range pois.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pois.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pois.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
