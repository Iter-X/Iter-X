// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/dailyitinerary"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
	"github.com/iter-x/iter-x/internal/repo/ent/trip"
)

// DailyTripUpdate is the builder for updating DailyTrip entities.
type DailyTripUpdate struct {
	config
	hooks    []Hook
	mutation *DailyTripMutation
}

// Where appends a list predicates to the DailyTripUpdate builder.
func (dtu *DailyTripUpdate) Where(ps ...predicate.DailyTrip) *DailyTripUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetUpdatedAt sets the "updated_at" field.
func (dtu *DailyTripUpdate) SetUpdatedAt(t time.Time) *DailyTripUpdate {
	dtu.mutation.SetUpdatedAt(t)
	return dtu
}

// SetTripID sets the "trip_id" field.
func (dtu *DailyTripUpdate) SetTripID(u uuid.UUID) *DailyTripUpdate {
	dtu.mutation.SetTripID(u)
	return dtu
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (dtu *DailyTripUpdate) SetNillableTripID(u *uuid.UUID) *DailyTripUpdate {
	if u != nil {
		dtu.SetTripID(*u)
	}
	return dtu
}

// SetDay sets the "day" field.
func (dtu *DailyTripUpdate) SetDay(i int32) *DailyTripUpdate {
	dtu.mutation.ResetDay()
	dtu.mutation.SetDay(i)
	return dtu
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (dtu *DailyTripUpdate) SetNillableDay(i *int32) *DailyTripUpdate {
	if i != nil {
		dtu.SetDay(*i)
	}
	return dtu
}

// AddDay adds i to the "day" field.
func (dtu *DailyTripUpdate) AddDay(i int32) *DailyTripUpdate {
	dtu.mutation.AddDay(i)
	return dtu
}

// SetDate sets the "date" field.
func (dtu *DailyTripUpdate) SetDate(t time.Time) *DailyTripUpdate {
	dtu.mutation.SetDate(t)
	return dtu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (dtu *DailyTripUpdate) SetNillableDate(t *time.Time) *DailyTripUpdate {
	if t != nil {
		dtu.SetDate(*t)
	}
	return dtu
}

// SetNotes sets the "notes" field.
func (dtu *DailyTripUpdate) SetNotes(s string) *DailyTripUpdate {
	dtu.mutation.SetNotes(s)
	return dtu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dtu *DailyTripUpdate) SetNillableNotes(s *string) *DailyTripUpdate {
	if s != nil {
		dtu.SetNotes(*s)
	}
	return dtu
}

// ClearNotes clears the value of the "notes" field.
func (dtu *DailyTripUpdate) ClearNotes() *DailyTripUpdate {
	dtu.mutation.ClearNotes()
	return dtu
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dtu *DailyTripUpdate) SetTrip(t *Trip) *DailyTripUpdate {
	return dtu.SetTripID(t.ID)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (dtu *DailyTripUpdate) AddDailyItineraryIDs(ids ...uuid.UUID) *DailyTripUpdate {
	dtu.mutation.AddDailyItineraryIDs(ids...)
	return dtu
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (dtu *DailyTripUpdate) AddDailyItinerary(d ...*DailyItinerary) *DailyTripUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtu.AddDailyItineraryIDs(ids...)
}

// Mutation returns the DailyTripMutation object of the builder.
func (dtu *DailyTripUpdate) Mutation() *DailyTripMutation {
	return dtu.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (dtu *DailyTripUpdate) ClearTrip() *DailyTripUpdate {
	dtu.mutation.ClearTrip()
	return dtu
}

// ClearDailyItinerary clears all "daily_itinerary" edges to the DailyItinerary entity.
func (dtu *DailyTripUpdate) ClearDailyItinerary() *DailyTripUpdate {
	dtu.mutation.ClearDailyItinerary()
	return dtu
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to DailyItinerary entities by IDs.
func (dtu *DailyTripUpdate) RemoveDailyItineraryIDs(ids ...uuid.UUID) *DailyTripUpdate {
	dtu.mutation.RemoveDailyItineraryIDs(ids...)
	return dtu
}

// RemoveDailyItinerary removes "daily_itinerary" edges to DailyItinerary entities.
func (dtu *DailyTripUpdate) RemoveDailyItinerary(d ...*DailyItinerary) *DailyTripUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtu.RemoveDailyItineraryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DailyTripUpdate) Save(ctx context.Context) (int, error) {
	dtu.defaults()
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DailyTripUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DailyTripUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DailyTripUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtu *DailyTripUpdate) defaults() {
	if _, ok := dtu.mutation.UpdatedAt(); !ok {
		v := dailytrip.UpdateDefaultUpdatedAt()
		dtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtu *DailyTripUpdate) check() error {
	if v, ok := dtu.mutation.Day(); ok {
		if err := dailytrip.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "DailyTrip.day": %w`, err)}
		}
	}
	if v, ok := dtu.mutation.Notes(); ok {
		if err := dailytrip.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyTrip.notes": %w`, err)}
		}
	}
	if dtu.mutation.TripCleared() && len(dtu.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTrip.trip"`)
	}
	return nil
}

func (dtu *DailyTripUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailytrip.Table, dailytrip.Columns, sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.UpdatedAt(); ok {
		_spec.SetField(dailytrip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dtu.mutation.Day(); ok {
		_spec.SetField(dailytrip.FieldDay, field.TypeInt32, value)
	}
	if value, ok := dtu.mutation.AddedDay(); ok {
		_spec.AddField(dailytrip.FieldDay, field.TypeInt32, value)
	}
	if value, ok := dtu.mutation.Date(); ok {
		_spec.SetField(dailytrip.FieldDate, field.TypeTime, value)
	}
	if value, ok := dtu.mutation.Notes(); ok {
		_spec.SetField(dailytrip.FieldNotes, field.TypeString, value)
	}
	if dtu.mutation.NotesCleared() {
		_spec.ClearField(dailytrip.FieldNotes, field.TypeString)
	}
	if dtu.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytrip.TripTable,
			Columns: []string{dailytrip.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytrip.TripTable,
			Columns: []string{dailytrip.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtu.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyItineraryTable,
			Columns: []string{dailytrip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.RemovedDailyItineraryIDs(); len(nodes) > 0 && !dtu.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyItineraryTable,
			Columns: []string{dailytrip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyItineraryTable,
			Columns: []string{dailytrip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailytrip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DailyTripUpdateOne is the builder for updating a single DailyTrip entity.
type DailyTripUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DailyTripMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (dtuo *DailyTripUpdateOne) SetUpdatedAt(t time.Time) *DailyTripUpdateOne {
	dtuo.mutation.SetUpdatedAt(t)
	return dtuo
}

// SetTripID sets the "trip_id" field.
func (dtuo *DailyTripUpdateOne) SetTripID(u uuid.UUID) *DailyTripUpdateOne {
	dtuo.mutation.SetTripID(u)
	return dtuo
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (dtuo *DailyTripUpdateOne) SetNillableTripID(u *uuid.UUID) *DailyTripUpdateOne {
	if u != nil {
		dtuo.SetTripID(*u)
	}
	return dtuo
}

// SetDay sets the "day" field.
func (dtuo *DailyTripUpdateOne) SetDay(i int32) *DailyTripUpdateOne {
	dtuo.mutation.ResetDay()
	dtuo.mutation.SetDay(i)
	return dtuo
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (dtuo *DailyTripUpdateOne) SetNillableDay(i *int32) *DailyTripUpdateOne {
	if i != nil {
		dtuo.SetDay(*i)
	}
	return dtuo
}

// AddDay adds i to the "day" field.
func (dtuo *DailyTripUpdateOne) AddDay(i int32) *DailyTripUpdateOne {
	dtuo.mutation.AddDay(i)
	return dtuo
}

// SetDate sets the "date" field.
func (dtuo *DailyTripUpdateOne) SetDate(t time.Time) *DailyTripUpdateOne {
	dtuo.mutation.SetDate(t)
	return dtuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (dtuo *DailyTripUpdateOne) SetNillableDate(t *time.Time) *DailyTripUpdateOne {
	if t != nil {
		dtuo.SetDate(*t)
	}
	return dtuo
}

// SetNotes sets the "notes" field.
func (dtuo *DailyTripUpdateOne) SetNotes(s string) *DailyTripUpdateOne {
	dtuo.mutation.SetNotes(s)
	return dtuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dtuo *DailyTripUpdateOne) SetNillableNotes(s *string) *DailyTripUpdateOne {
	if s != nil {
		dtuo.SetNotes(*s)
	}
	return dtuo
}

// ClearNotes clears the value of the "notes" field.
func (dtuo *DailyTripUpdateOne) ClearNotes() *DailyTripUpdateOne {
	dtuo.mutation.ClearNotes()
	return dtuo
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dtuo *DailyTripUpdateOne) SetTrip(t *Trip) *DailyTripUpdateOne {
	return dtuo.SetTripID(t.ID)
}

// AddDailyItineraryIDs adds the "daily_itinerary" edge to the DailyItinerary entity by IDs.
func (dtuo *DailyTripUpdateOne) AddDailyItineraryIDs(ids ...uuid.UUID) *DailyTripUpdateOne {
	dtuo.mutation.AddDailyItineraryIDs(ids...)
	return dtuo
}

// AddDailyItinerary adds the "daily_itinerary" edges to the DailyItinerary entity.
func (dtuo *DailyTripUpdateOne) AddDailyItinerary(d ...*DailyItinerary) *DailyTripUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtuo.AddDailyItineraryIDs(ids...)
}

// Mutation returns the DailyTripMutation object of the builder.
func (dtuo *DailyTripUpdateOne) Mutation() *DailyTripMutation {
	return dtuo.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (dtuo *DailyTripUpdateOne) ClearTrip() *DailyTripUpdateOne {
	dtuo.mutation.ClearTrip()
	return dtuo
}

// ClearDailyItinerary clears all "daily_itinerary" edges to the DailyItinerary entity.
func (dtuo *DailyTripUpdateOne) ClearDailyItinerary() *DailyTripUpdateOne {
	dtuo.mutation.ClearDailyItinerary()
	return dtuo
}

// RemoveDailyItineraryIDs removes the "daily_itinerary" edge to DailyItinerary entities by IDs.
func (dtuo *DailyTripUpdateOne) RemoveDailyItineraryIDs(ids ...uuid.UUID) *DailyTripUpdateOne {
	dtuo.mutation.RemoveDailyItineraryIDs(ids...)
	return dtuo
}

// RemoveDailyItinerary removes "daily_itinerary" edges to DailyItinerary entities.
func (dtuo *DailyTripUpdateOne) RemoveDailyItinerary(d ...*DailyItinerary) *DailyTripUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtuo.RemoveDailyItineraryIDs(ids...)
}

// Where appends a list predicates to the DailyTripUpdate builder.
func (dtuo *DailyTripUpdateOne) Where(ps ...predicate.DailyTrip) *DailyTripUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DailyTripUpdateOne) Select(field string, fields ...string) *DailyTripUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DailyTrip entity.
func (dtuo *DailyTripUpdateOne) Save(ctx context.Context) (*DailyTrip, error) {
	dtuo.defaults()
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DailyTripUpdateOne) SaveX(ctx context.Context) *DailyTrip {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DailyTripUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DailyTripUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtuo *DailyTripUpdateOne) defaults() {
	if _, ok := dtuo.mutation.UpdatedAt(); !ok {
		v := dailytrip.UpdateDefaultUpdatedAt()
		dtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtuo *DailyTripUpdateOne) check() error {
	if v, ok := dtuo.mutation.Day(); ok {
		if err := dailytrip.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "DailyTrip.day": %w`, err)}
		}
	}
	if v, ok := dtuo.mutation.Notes(); ok {
		if err := dailytrip.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyTrip.notes": %w`, err)}
		}
	}
	if dtuo.mutation.TripCleared() && len(dtuo.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTrip.trip"`)
	}
	return nil
}

func (dtuo *DailyTripUpdateOne) sqlSave(ctx context.Context) (_node *DailyTrip, err error) {
	if err := dtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailytrip.Table, dailytrip.Columns, sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DailyTrip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailytrip.FieldID)
		for _, f := range fields {
			if !dailytrip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dailytrip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dailytrip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dtuo.mutation.Day(); ok {
		_spec.SetField(dailytrip.FieldDay, field.TypeInt32, value)
	}
	if value, ok := dtuo.mutation.AddedDay(); ok {
		_spec.AddField(dailytrip.FieldDay, field.TypeInt32, value)
	}
	if value, ok := dtuo.mutation.Date(); ok {
		_spec.SetField(dailytrip.FieldDate, field.TypeTime, value)
	}
	if value, ok := dtuo.mutation.Notes(); ok {
		_spec.SetField(dailytrip.FieldNotes, field.TypeString, value)
	}
	if dtuo.mutation.NotesCleared() {
		_spec.ClearField(dailytrip.FieldNotes, field.TypeString)
	}
	if dtuo.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytrip.TripTable,
			Columns: []string{dailytrip.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytrip.TripTable,
			Columns: []string{dailytrip.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtuo.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyItineraryTable,
			Columns: []string{dailytrip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.RemovedDailyItineraryIDs(); len(nodes) > 0 && !dtuo.mutation.DailyItineraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyItineraryTable,
			Columns: []string{dailytrip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.DailyItineraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dailytrip.DailyItineraryTable,
			Columns: []string{dailytrip.DailyItineraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailyitinerary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DailyTrip{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailytrip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
