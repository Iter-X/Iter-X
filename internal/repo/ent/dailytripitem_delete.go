// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iter-x/iter-x/internal/repo/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
)

// DailyTripItemDelete is the builder for deleting a DailyTripItem entity.
type DailyTripItemDelete struct {
	config
	hooks    []Hook
	mutation *DailyTripItemMutation
}

// Where appends a list predicates to the DailyTripItemDelete builder.
func (dtid *DailyTripItemDelete) Where(ps ...predicate.DailyTripItem) *DailyTripItemDelete {
	dtid.mutation.Where(ps...)
	return dtid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dtid *DailyTripItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dtid.sqlExec, dtid.mutation, dtid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dtid *DailyTripItemDelete) ExecX(ctx context.Context) int {
	n, err := dtid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dtid *DailyTripItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(dailytripitem.Table, sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID))
	if ps := dtid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dtid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dtid.mutation.done = true
	return affected, err
}

// DailyTripItemDeleteOne is the builder for deleting a single DailyTripItem entity.
type DailyTripItemDeleteOne struct {
	dtid *DailyTripItemDelete
}

// Where appends a list predicates to the DailyTripItemDelete builder.
func (dtido *DailyTripItemDeleteOne) Where(ps ...predicate.DailyTripItem) *DailyTripItemDeleteOne {
	dtido.dtid.mutation.Where(ps...)
	return dtido
}

// Exec executes the deletion query.
func (dtido *DailyTripItemDeleteOne) Exec(ctx context.Context) error {
	n, err := dtido.dtid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{dailytripitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dtido *DailyTripItemDeleteOne) ExecX(ctx context.Context) {
	if err := dtido.Exec(ctx); err != nil {
		panic(err)
	}
}
