// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/repo/ent/state"
)

// State is the model entity for the State schema.
type State struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NameEn holds the value of the "name_en" field.
	NameEn string `json:"name_en,omitempty"`
	// NameCn holds the value of the "name_cn" field.
	NameCn string `json:"name_cn,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StateQuery when eager-loading is set.
	Edges        StateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StateEdges holds the relations/edges for other nodes in the graph.
type StateEdges struct {
	// Poi holds the value of the poi edge.
	Poi []*PointsOfInterest `json:"poi,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PoiOrErr returns the Poi value or an error if the edge
// was not loaded in eager-loading.
func (e StateEdges) PoiOrErr() ([]*PointsOfInterest, error) {
	if e.loadedTypes[0] {
		return e.Poi, nil
	}
	return nil, &NotLoadedError{edge: "poi"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*State) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case state.FieldName, state.FieldNameEn, state.FieldNameCn:
			values[i] = new(sql.NullString)
		case state.FieldCreatedAt, state.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case state.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the State fields.
func (s *State) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case state.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case state.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case state.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case state.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case state.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				s.NameEn = value.String
			}
		case state.FieldNameCn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_cn", values[i])
			} else if value.Valid {
				s.NameCn = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the State.
// This includes values selected through modifiers, order, etc.
func (s *State) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPoi queries the "poi" edge of the State entity.
func (s *State) QueryPoi() *PointsOfInterestQuery {
	return NewStateClient(s.config).QueryPoi(s)
}

// Update returns a builder for updating this State.
// Note that you need to call State.Unwrap() before calling this method if this State
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *State) Update() *StateUpdateOne {
	return NewStateClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the State entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *State) Unwrap() *State {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: State is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *State) String() string {
	var builder strings.Builder
	builder.WriteString("State(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(s.NameEn)
	builder.WriteString(", ")
	builder.WriteString("name_cn=")
	builder.WriteString(s.NameCn)
	builder.WriteByte(')')
	return builder.String()
}

// States is a parsable slice of State.
type States []*State
