// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iter-x/iter-x/internal/common/model"
	"github.com/iter-x/iter-x/internal/repo/ent/media"
	"github.com/iter-x/iter-x/internal/repo/ent/predicate"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MediaUpdate) SetUpdatedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetFilename sets the "filename" field.
func (mu *MediaUpdate) SetFilename(s string) *MediaUpdate {
	mu.mutation.SetFilename(s)
	return mu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableFilename(s *string) *MediaUpdate {
	if s != nil {
		mu.SetFilename(*s)
	}
	return mu
}

// SetFileType sets the "file_type" field.
func (mu *MediaUpdate) SetFileType(s string) *MediaUpdate {
	mu.mutation.SetFileType(s)
	return mu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableFileType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetFileType(*s)
	}
	return mu
}

// SetStorageType sets the "storage_type" field.
func (mu *MediaUpdate) SetStorageType(mt model.StorageType) *MediaUpdate {
	mu.mutation.ResetStorageType()
	mu.mutation.SetStorageType(mt)
	return mu
}

// SetNillableStorageType sets the "storage_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableStorageType(mt *model.StorageType) *MediaUpdate {
	if mt != nil {
		mu.SetStorageType(*mt)
	}
	return mu
}

// AddStorageType adds mt to the "storage_type" field.
func (mu *MediaUpdate) AddStorageType(mt model.StorageType) *MediaUpdate {
	mu.mutation.AddStorageType(mt)
	return mu
}

// SetPath sets the "path" field.
func (mu *MediaUpdate) SetPath(s string) *MediaUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mu *MediaUpdate) SetNillablePath(s *string) *MediaUpdate {
	if s != nil {
		mu.SetPath(*s)
	}
	return mu
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MediaUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := media.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MediaUpdate) check() error {
	if v, ok := mu.mutation.Filename(); ok {
		if err := media.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Media.filename": %w`, err)}
		}
	}
	if v, ok := mu.mutation.FileType(); ok {
		if err := media.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`ent: validator failed for field "Media.file_type": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Path(); ok {
		if err := media.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Media.path": %w`, err)}
		}
	}
	return nil
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Filename(); ok {
		_spec.SetField(media.FieldFilename, field.TypeString, value)
	}
	if value, ok := mu.mutation.FileType(); ok {
		_spec.SetField(media.FieldFileType, field.TypeString, value)
	}
	if value, ok := mu.mutation.StorageType(); ok {
		_spec.SetField(media.FieldStorageType, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.AddedStorageType(); ok {
		_spec.AddField(media.FieldStorageType, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(media.FieldPath, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MediaUpdateOne) SetUpdatedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetFilename sets the "filename" field.
func (muo *MediaUpdateOne) SetFilename(s string) *MediaUpdateOne {
	muo.mutation.SetFilename(s)
	return muo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableFilename(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetFilename(*s)
	}
	return muo
}

// SetFileType sets the "file_type" field.
func (muo *MediaUpdateOne) SetFileType(s string) *MediaUpdateOne {
	muo.mutation.SetFileType(s)
	return muo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableFileType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetFileType(*s)
	}
	return muo
}

// SetStorageType sets the "storage_type" field.
func (muo *MediaUpdateOne) SetStorageType(mt model.StorageType) *MediaUpdateOne {
	muo.mutation.ResetStorageType()
	muo.mutation.SetStorageType(mt)
	return muo
}

// SetNillableStorageType sets the "storage_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableStorageType(mt *model.StorageType) *MediaUpdateOne {
	if mt != nil {
		muo.SetStorageType(*mt)
	}
	return muo
}

// AddStorageType adds mt to the "storage_type" field.
func (muo *MediaUpdateOne) AddStorageType(mt model.StorageType) *MediaUpdateOne {
	muo.mutation.AddStorageType(mt)
	return muo
}

// SetPath sets the "path" field.
func (muo *MediaUpdateOne) SetPath(s string) *MediaUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillablePath(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetPath(*s)
	}
	return muo
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MediaUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := media.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MediaUpdateOne) check() error {
	if v, ok := muo.mutation.Filename(); ok {
		if err := media.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Media.filename": %w`, err)}
		}
	}
	if v, ok := muo.mutation.FileType(); ok {
		if err := media.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`ent: validator failed for field "Media.file_type": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Path(); ok {
		if err := media.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Media.path": %w`, err)}
		}
	}
	return nil
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Filename(); ok {
		_spec.SetField(media.FieldFilename, field.TypeString, value)
	}
	if value, ok := muo.mutation.FileType(); ok {
		_spec.SetField(media.FieldFileType, field.TypeString, value)
	}
	if value, ok := muo.mutation.StorageType(); ok {
		_spec.SetField(media.FieldStorageType, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.AddedStorageType(); ok {
		_spec.AddField(media.FieldStorageType, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(media.FieldPath, field.TypeString, value)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
