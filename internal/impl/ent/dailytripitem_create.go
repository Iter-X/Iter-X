// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/impl/ent/trip"
)

// DailyTripItemCreate is the builder for creating a DailyTripItem entity.
type DailyTripItemCreate struct {
	config
	mutation *DailyTripItemMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dtic *DailyTripItemCreate) SetCreatedAt(t time.Time) *DailyTripItemCreate {
	dtic.mutation.SetCreatedAt(t)
	return dtic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtic *DailyTripItemCreate) SetNillableCreatedAt(t *time.Time) *DailyTripItemCreate {
	if t != nil {
		dtic.SetCreatedAt(*t)
	}
	return dtic
}

// SetUpdatedAt sets the "updated_at" field.
func (dtic *DailyTripItemCreate) SetUpdatedAt(t time.Time) *DailyTripItemCreate {
	dtic.mutation.SetUpdatedAt(t)
	return dtic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtic *DailyTripItemCreate) SetNillableUpdatedAt(t *time.Time) *DailyTripItemCreate {
	if t != nil {
		dtic.SetUpdatedAt(*t)
	}
	return dtic
}

// SetTripID sets the "trip_id" field.
func (dtic *DailyTripItemCreate) SetTripID(u uuid.UUID) *DailyTripItemCreate {
	dtic.mutation.SetTripID(u)
	return dtic
}

// SetDailyTripID sets the "daily_trip_id" field.
func (dtic *DailyTripItemCreate) SetDailyTripID(u uuid.UUID) *DailyTripItemCreate {
	dtic.mutation.SetDailyTripID(u)
	return dtic
}

// SetNotes sets the "notes" field.
func (dtic *DailyTripItemCreate) SetNotes(s string) *DailyTripItemCreate {
	dtic.mutation.SetNotes(s)
	return dtic
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dtic *DailyTripItemCreate) SetNillableNotes(s *string) *DailyTripItemCreate {
	if s != nil {
		dtic.SetNotes(*s)
	}
	return dtic
}

// SetID sets the "id" field.
func (dtic *DailyTripItemCreate) SetID(u uuid.UUID) *DailyTripItemCreate {
	dtic.mutation.SetID(u)
	return dtic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dtic *DailyTripItemCreate) SetNillableID(u *uuid.UUID) *DailyTripItemCreate {
	if u != nil {
		dtic.SetID(*u)
	}
	return dtic
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dtic *DailyTripItemCreate) SetTrip(t *Trip) *DailyTripItemCreate {
	return dtic.SetTripID(t.ID)
}

// SetDailyTrip sets the "daily_trip" edge to the DailyTrip entity.
func (dtic *DailyTripItemCreate) SetDailyTrip(d *DailyTrip) *DailyTripItemCreate {
	return dtic.SetDailyTripID(d.ID)
}

// Mutation returns the DailyTripItemMutation object of the builder.
func (dtic *DailyTripItemCreate) Mutation() *DailyTripItemMutation {
	return dtic.mutation
}

// Save creates the DailyTripItem in the database.
func (dtic *DailyTripItemCreate) Save(ctx context.Context) (*DailyTripItem, error) {
	dtic.defaults()
	return withHooks(ctx, dtic.sqlSave, dtic.mutation, dtic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dtic *DailyTripItemCreate) SaveX(ctx context.Context) *DailyTripItem {
	v, err := dtic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtic *DailyTripItemCreate) Exec(ctx context.Context) error {
	_, err := dtic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtic *DailyTripItemCreate) ExecX(ctx context.Context) {
	if err := dtic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtic *DailyTripItemCreate) defaults() {
	if _, ok := dtic.mutation.CreatedAt(); !ok {
		v := dailytripitem.DefaultCreatedAt()
		dtic.mutation.SetCreatedAt(v)
	}
	if _, ok := dtic.mutation.UpdatedAt(); !ok {
		v := dailytripitem.DefaultUpdatedAt()
		dtic.mutation.SetUpdatedAt(v)
	}
	if _, ok := dtic.mutation.ID(); !ok {
		v := dailytripitem.DefaultID()
		dtic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtic *DailyTripItemCreate) check() error {
	if _, ok := dtic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DailyTripItem.created_at"`)}
	}
	if _, ok := dtic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DailyTripItem.updated_at"`)}
	}
	if _, ok := dtic.mutation.TripID(); !ok {
		return &ValidationError{Name: "trip_id", err: errors.New(`ent: missing required field "DailyTripItem.trip_id"`)}
	}
	if _, ok := dtic.mutation.DailyTripID(); !ok {
		return &ValidationError{Name: "daily_trip_id", err: errors.New(`ent: missing required field "DailyTripItem.daily_trip_id"`)}
	}
	if v, ok := dtic.mutation.Notes(); ok {
		if err := dailytripitem.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyTripItem.notes": %w`, err)}
		}
	}
	if len(dtic.mutation.TripIDs()) == 0 {
		return &ValidationError{Name: "trip", err: errors.New(`ent: missing required edge "DailyTripItem.trip"`)}
	}
	if len(dtic.mutation.DailyTripIDs()) == 0 {
		return &ValidationError{Name: "daily_trip", err: errors.New(`ent: missing required edge "DailyTripItem.daily_trip"`)}
	}
	return nil
}

func (dtic *DailyTripItemCreate) sqlSave(ctx context.Context) (*DailyTripItem, error) {
	if err := dtic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dtic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dtic.mutation.id = &_node.ID
	dtic.mutation.done = true
	return _node, nil
}

func (dtic *DailyTripItemCreate) createSpec() (*DailyTripItem, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyTripItem{config: dtic.config}
		_spec = sqlgraph.NewCreateSpec(dailytripitem.Table, sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID))
	)
	if id, ok := dtic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dtic.mutation.CreatedAt(); ok {
		_spec.SetField(dailytripitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dtic.mutation.UpdatedAt(); ok {
		_spec.SetField(dailytripitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dtic.mutation.Notes(); ok {
		_spec.SetField(dailytripitem.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := dtic.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.TripTable,
			Columns: []string{dailytripitem.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TripID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dtic.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.DailyTripTable,
			Columns: []string{dailytripitem.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DailyTripID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DailyTripItemCreateBulk is the builder for creating many DailyTripItem entities in bulk.
type DailyTripItemCreateBulk struct {
	config
	err      error
	builders []*DailyTripItemCreate
}

// Save creates the DailyTripItem entities in the database.
func (dticb *DailyTripItemCreateBulk) Save(ctx context.Context) ([]*DailyTripItem, error) {
	if dticb.err != nil {
		return nil, dticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dticb.builders))
	nodes := make([]*DailyTripItem, len(dticb.builders))
	mutators := make([]Mutator, len(dticb.builders))
	for i := range dticb.builders {
		func(i int, root context.Context) {
			builder := dticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyTripItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dticb *DailyTripItemCreateBulk) SaveX(ctx context.Context) []*DailyTripItem {
	v, err := dticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dticb *DailyTripItemCreateBulk) Exec(ctx context.Context) error {
	_, err := dticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dticb *DailyTripItemCreateBulk) ExecX(ctx context.Context) {
	if err := dticb.Exec(ctx); err != nil {
		panic(err)
	}
}
