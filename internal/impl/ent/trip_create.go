// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/impl/ent/trip"
	"github.com/iter-x/iter-x/internal/impl/ent/user"
)

// TripCreate is the builder for creating a Trip entity.
type TripCreate struct {
	config
	mutation *TripMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TripCreate) SetCreatedAt(t time.Time) *TripCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableCreatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TripCreate) SetUpdatedAt(t time.Time) *TripCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableUpdatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetUserID sets the "user_id" field.
func (tc *TripCreate) SetUserID(u uuid.UUID) *TripCreate {
	tc.mutation.SetUserID(u)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TripCreate) SetStatus(b bool) *TripCreate {
	tc.mutation.SetStatus(b)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TripCreate) SetNillableStatus(b *bool) *TripCreate {
	if b != nil {
		tc.SetStatus(*b)
	}
	return tc
}

// SetTitle sets the "title" field.
func (tc *TripCreate) SetTitle(s string) *TripCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TripCreate) SetDescription(s string) *TripCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetStartDate sets the "start_date" field.
func (tc *TripCreate) SetStartDate(t time.Time) *TripCreate {
	tc.mutation.SetStartDate(t)
	return tc
}

// SetEndDate sets the "end_date" field.
func (tc *TripCreate) SetEndDate(t time.Time) *TripCreate {
	tc.mutation.SetEndDate(t)
	return tc
}

// SetID sets the "id" field.
func (tc *TripCreate) SetID(u uuid.UUID) *TripCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TripCreate) SetNillableID(u *uuid.UUID) *TripCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetUser sets the "user" edge to the User entity.
func (tc *TripCreate) SetUser(u *User) *TripCreate {
	return tc.SetUserID(u.ID)
}

// AddDailyTripIDs adds the "daily_trip" edge to the DailyTrip entity by IDs.
func (tc *TripCreate) AddDailyTripIDs(ids ...uuid.UUID) *TripCreate {
	tc.mutation.AddDailyTripIDs(ids...)
	return tc
}

// AddDailyTrip adds the "daily_trip" edges to the DailyTrip entity.
func (tc *TripCreate) AddDailyTrip(d ...*DailyTrip) *TripCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tc.AddDailyTripIDs(ids...)
}

// AddDailyTripItemIDs adds the "daily_trip_item" edge to the DailyTripItem entity by IDs.
func (tc *TripCreate) AddDailyTripItemIDs(ids ...uuid.UUID) *TripCreate {
	tc.mutation.AddDailyTripItemIDs(ids...)
	return tc
}

// AddDailyTripItem adds the "daily_trip_item" edges to the DailyTripItem entity.
func (tc *TripCreate) AddDailyTripItem(d ...*DailyTripItem) *TripCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tc.AddDailyTripItemIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tc *TripCreate) Mutation() *TripMutation {
	return tc.mutation
}

// Save creates the Trip in the database.
func (tc *TripCreate) Save(ctx context.Context) (*Trip, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TripCreate) SaveX(ctx context.Context) *Trip {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TripCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TripCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TripCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := trip.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := trip.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := trip.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := trip.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TripCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Trip.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Trip.updated_at"`)}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Trip.user_id"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Trip.status"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Trip.title"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := trip.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Trip.title": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Trip.description"`)}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := trip.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Trip.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Trip.start_date"`)}
	}
	if _, ok := tc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Trip.end_date"`)}
	}
	if len(tc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Trip.user"`)}
	}
	return nil
}

func (tc *TripCreate) sqlSave(ctx context.Context) (*Trip, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TripCreate) createSpec() (*Trip, *sqlgraph.CreateSpec) {
	var (
		_node = &Trip{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(trip.Table, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(trip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(trip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(trip.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(trip.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.StartDate(); ok {
		_spec.SetField(trip.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := tc.mutation.EndDate(); ok {
		_spec.SetField(trip.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripTable,
			Columns: []string{trip.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DailyTripItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.DailyTripItemTable,
			Columns: []string{trip.DailyTripItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TripCreateBulk is the builder for creating many Trip entities in bulk.
type TripCreateBulk struct {
	config
	err      error
	builders []*TripCreate
}

// Save creates the Trip entities in the database.
func (tcb *TripCreateBulk) Save(ctx context.Context) ([]*Trip, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Trip, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TripMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TripCreateBulk) SaveX(ctx context.Context) []*Trip {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TripCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TripCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
