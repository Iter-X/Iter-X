// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/common/model"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/impl/ent/media"
	"github.com/iter-x/iter-x/internal/impl/ent/predicate"
	"github.com/iter-x/iter-x/internal/impl/ent/refreshtoken"
	"github.com/iter-x/iter-x/internal/impl/ent/trip"
	"github.com/iter-x/iter-x/internal/impl/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDailyTrip     = "DailyTrip"
	TypeDailyTripItem = "DailyTripItem"
	TypeMedia         = "Media"
	TypeRefreshToken  = "RefreshToken"
	TypeTrip          = "Trip"
	TypeUser          = "User"
)

// DailyTripMutation represents an operation that mutates the DailyTrip nodes in the graph.
type DailyTripMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	day                    *int32
	addday                 *int32
	date                   *time.Time
	notes                  *string
	clearedFields          map[string]struct{}
	trip                   *uuid.UUID
	clearedtrip            bool
	daily_trip_item        map[uuid.UUID]struct{}
	removeddaily_trip_item map[uuid.UUID]struct{}
	cleareddaily_trip_item bool
	done                   bool
	oldValue               func(context.Context) (*DailyTrip, error)
	predicates             []predicate.DailyTrip
}

var _ ent.Mutation = (*DailyTripMutation)(nil)

// dailytripOption allows management of the mutation configuration using functional options.
type dailytripOption func(*DailyTripMutation)

// newDailyTripMutation creates new mutation for the DailyTrip entity.
func newDailyTripMutation(c config, op Op, opts ...dailytripOption) *DailyTripMutation {
	m := &DailyTripMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyTrip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyTripID sets the ID field of the mutation.
func withDailyTripID(id uuid.UUID) dailytripOption {
	return func(m *DailyTripMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyTrip
		)
		m.oldValue = func(ctx context.Context) (*DailyTrip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyTrip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyTrip sets the old DailyTrip of the mutation.
func withDailyTrip(node *DailyTrip) dailytripOption {
	return func(m *DailyTripMutation) {
		m.oldValue = func(context.Context) (*DailyTrip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyTripMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyTripMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyTrip entities.
func (m *DailyTripMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyTripMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyTripMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyTrip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DailyTripMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DailyTripMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DailyTripMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DailyTripMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DailyTripMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DailyTripMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTripID sets the "trip_id" field.
func (m *DailyTripMutation) SetTripID(u uuid.UUID) {
	m.trip = &u
}

// TripID returns the value of the "trip_id" field in the mutation.
func (m *DailyTripMutation) TripID() (r uuid.UUID, exists bool) {
	v := m.trip
	if v == nil {
		return
	}
	return *v, true
}

// OldTripID returns the old "trip_id" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldTripID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTripID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTripID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTripID: %w", err)
	}
	return oldValue.TripID, nil
}

// ResetTripID resets all changes to the "trip_id" field.
func (m *DailyTripMutation) ResetTripID() {
	m.trip = nil
}

// SetDay sets the "day" field.
func (m *DailyTripMutation) SetDay(i int32) {
	m.day = &i
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *DailyTripMutation) Day() (r int32, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldDay(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds i to the "day" field.
func (m *DailyTripMutation) AddDay(i int32) {
	if m.addday != nil {
		*m.addday += i
	} else {
		m.addday = &i
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *DailyTripMutation) AddedDay() (r int32, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *DailyTripMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetDate sets the "date" field.
func (m *DailyTripMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DailyTripMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DailyTripMutation) ResetDate() {
	m.date = nil
}

// SetNotes sets the "notes" field.
func (m *DailyTripMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *DailyTripMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the DailyTrip entity.
// If the DailyTrip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ClearNotes clears the value of the "notes" field.
func (m *DailyTripMutation) ClearNotes() {
	m.notes = nil
	m.clearedFields[dailytrip.FieldNotes] = struct{}{}
}

// NotesCleared returns if the "notes" field was cleared in this mutation.
func (m *DailyTripMutation) NotesCleared() bool {
	_, ok := m.clearedFields[dailytrip.FieldNotes]
	return ok
}

// ResetNotes resets all changes to the "notes" field.
func (m *DailyTripMutation) ResetNotes() {
	m.notes = nil
	delete(m.clearedFields, dailytrip.FieldNotes)
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (m *DailyTripMutation) ClearTrip() {
	m.clearedtrip = true
	m.clearedFields[dailytrip.FieldTripID] = struct{}{}
}

// TripCleared reports if the "trip" edge to the Trip entity was cleared.
func (m *DailyTripMutation) TripCleared() bool {
	return m.clearedtrip
}

// TripIDs returns the "trip" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TripID instead. It exists only for internal usage by the builders.
func (m *DailyTripMutation) TripIDs() (ids []uuid.UUID) {
	if id := m.trip; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTrip resets all changes to the "trip" edge.
func (m *DailyTripMutation) ResetTrip() {
	m.trip = nil
	m.clearedtrip = false
}

// AddDailyTripItemIDs adds the "daily_trip_item" edge to the DailyTripItem entity by ids.
func (m *DailyTripMutation) AddDailyTripItemIDs(ids ...uuid.UUID) {
	if m.daily_trip_item == nil {
		m.daily_trip_item = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_trip_item[ids[i]] = struct{}{}
	}
}

// ClearDailyTripItem clears the "daily_trip_item" edge to the DailyTripItem entity.
func (m *DailyTripMutation) ClearDailyTripItem() {
	m.cleareddaily_trip_item = true
}

// DailyTripItemCleared reports if the "daily_trip_item" edge to the DailyTripItem entity was cleared.
func (m *DailyTripMutation) DailyTripItemCleared() bool {
	return m.cleareddaily_trip_item
}

// RemoveDailyTripItemIDs removes the "daily_trip_item" edge to the DailyTripItem entity by IDs.
func (m *DailyTripMutation) RemoveDailyTripItemIDs(ids ...uuid.UUID) {
	if m.removeddaily_trip_item == nil {
		m.removeddaily_trip_item = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_trip_item, ids[i])
		m.removeddaily_trip_item[ids[i]] = struct{}{}
	}
}

// RemovedDailyTripItem returns the removed IDs of the "daily_trip_item" edge to the DailyTripItem entity.
func (m *DailyTripMutation) RemovedDailyTripItemIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_trip_item {
		ids = append(ids, id)
	}
	return
}

// DailyTripItemIDs returns the "daily_trip_item" edge IDs in the mutation.
func (m *DailyTripMutation) DailyTripItemIDs() (ids []uuid.UUID) {
	for id := range m.daily_trip_item {
		ids = append(ids, id)
	}
	return
}

// ResetDailyTripItem resets all changes to the "daily_trip_item" edge.
func (m *DailyTripMutation) ResetDailyTripItem() {
	m.daily_trip_item = nil
	m.cleareddaily_trip_item = false
	m.removeddaily_trip_item = nil
}

// Where appends a list predicates to the DailyTripMutation builder.
func (m *DailyTripMutation) Where(ps ...predicate.DailyTrip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyTripMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyTripMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyTrip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyTripMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyTripMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyTrip).
func (m *DailyTripMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyTripMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, dailytrip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dailytrip.FieldUpdatedAt)
	}
	if m.trip != nil {
		fields = append(fields, dailytrip.FieldTripID)
	}
	if m.day != nil {
		fields = append(fields, dailytrip.FieldDay)
	}
	if m.date != nil {
		fields = append(fields, dailytrip.FieldDate)
	}
	if m.notes != nil {
		fields = append(fields, dailytrip.FieldNotes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyTripMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailytrip.FieldCreatedAt:
		return m.CreatedAt()
	case dailytrip.FieldUpdatedAt:
		return m.UpdatedAt()
	case dailytrip.FieldTripID:
		return m.TripID()
	case dailytrip.FieldDay:
		return m.Day()
	case dailytrip.FieldDate:
		return m.Date()
	case dailytrip.FieldNotes:
		return m.Notes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyTripMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailytrip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dailytrip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dailytrip.FieldTripID:
		return m.OldTripID(ctx)
	case dailytrip.FieldDay:
		return m.OldDay(ctx)
	case dailytrip.FieldDate:
		return m.OldDate(ctx)
	case dailytrip.FieldNotes:
		return m.OldNotes(ctx)
	}
	return nil, fmt.Errorf("unknown DailyTrip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyTripMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailytrip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dailytrip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dailytrip.FieldTripID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTripID(v)
		return nil
	case dailytrip.FieldDay:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	case dailytrip.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case dailytrip.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	}
	return fmt.Errorf("unknown DailyTrip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyTripMutation) AddedFields() []string {
	var fields []string
	if m.addday != nil {
		fields = append(fields, dailytrip.FieldDay)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyTripMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dailytrip.FieldDay:
		return m.AddedDay()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyTripMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dailytrip.FieldDay:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	}
	return fmt.Errorf("unknown DailyTrip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyTripMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dailytrip.FieldNotes) {
		fields = append(fields, dailytrip.FieldNotes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyTripMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyTripMutation) ClearField(name string) error {
	switch name {
	case dailytrip.FieldNotes:
		m.ClearNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyTripMutation) ResetField(name string) error {
	switch name {
	case dailytrip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dailytrip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dailytrip.FieldTripID:
		m.ResetTripID()
		return nil
	case dailytrip.FieldDay:
		m.ResetDay()
		return nil
	case dailytrip.FieldDate:
		m.ResetDate()
		return nil
	case dailytrip.FieldNotes:
		m.ResetNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyTripMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.trip != nil {
		edges = append(edges, dailytrip.EdgeTrip)
	}
	if m.daily_trip_item != nil {
		edges = append(edges, dailytrip.EdgeDailyTripItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyTripMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailytrip.EdgeTrip:
		if id := m.trip; id != nil {
			return []ent.Value{*id}
		}
	case dailytrip.EdgeDailyTripItem:
		ids := make([]ent.Value, 0, len(m.daily_trip_item))
		for id := range m.daily_trip_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyTripMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddaily_trip_item != nil {
		edges = append(edges, dailytrip.EdgeDailyTripItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyTripMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dailytrip.EdgeDailyTripItem:
		ids := make([]ent.Value, 0, len(m.removeddaily_trip_item))
		for id := range m.removeddaily_trip_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyTripMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtrip {
		edges = append(edges, dailytrip.EdgeTrip)
	}
	if m.cleareddaily_trip_item {
		edges = append(edges, dailytrip.EdgeDailyTripItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyTripMutation) EdgeCleared(name string) bool {
	switch name {
	case dailytrip.EdgeTrip:
		return m.clearedtrip
	case dailytrip.EdgeDailyTripItem:
		return m.cleareddaily_trip_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyTripMutation) ClearEdge(name string) error {
	switch name {
	case dailytrip.EdgeTrip:
		m.ClearTrip()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyTripMutation) ResetEdge(name string) error {
	switch name {
	case dailytrip.EdgeTrip:
		m.ResetTrip()
		return nil
	case dailytrip.EdgeDailyTripItem:
		m.ResetDailyTripItem()
		return nil
	}
	return fmt.Errorf("unknown DailyTrip edge %s", name)
}

// DailyTripItemMutation represents an operation that mutates the DailyTripItem nodes in the graph.
type DailyTripItemMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	notes             *string
	clearedFields     map[string]struct{}
	trip              *uuid.UUID
	clearedtrip       bool
	daily_trip        *uuid.UUID
	cleareddaily_trip bool
	done              bool
	oldValue          func(context.Context) (*DailyTripItem, error)
	predicates        []predicate.DailyTripItem
}

var _ ent.Mutation = (*DailyTripItemMutation)(nil)

// dailytripitemOption allows management of the mutation configuration using functional options.
type dailytripitemOption func(*DailyTripItemMutation)

// newDailyTripItemMutation creates new mutation for the DailyTripItem entity.
func newDailyTripItemMutation(c config, op Op, opts ...dailytripitemOption) *DailyTripItemMutation {
	m := &DailyTripItemMutation{
		config:        c,
		op:            op,
		typ:           TypeDailyTripItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDailyTripItemID sets the ID field of the mutation.
func withDailyTripItemID(id uuid.UUID) dailytripitemOption {
	return func(m *DailyTripItemMutation) {
		var (
			err   error
			once  sync.Once
			value *DailyTripItem
		)
		m.oldValue = func(ctx context.Context) (*DailyTripItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DailyTripItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDailyTripItem sets the old DailyTripItem of the mutation.
func withDailyTripItem(node *DailyTripItem) dailytripitemOption {
	return func(m *DailyTripItemMutation) {
		m.oldValue = func(context.Context) (*DailyTripItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DailyTripItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DailyTripItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DailyTripItem entities.
func (m *DailyTripItemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DailyTripItemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DailyTripItemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DailyTripItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DailyTripItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DailyTripItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DailyTripItem entity.
// If the DailyTripItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DailyTripItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DailyTripItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DailyTripItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DailyTripItem entity.
// If the DailyTripItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DailyTripItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTripID sets the "trip_id" field.
func (m *DailyTripItemMutation) SetTripID(u uuid.UUID) {
	m.trip = &u
}

// TripID returns the value of the "trip_id" field in the mutation.
func (m *DailyTripItemMutation) TripID() (r uuid.UUID, exists bool) {
	v := m.trip
	if v == nil {
		return
	}
	return *v, true
}

// OldTripID returns the old "trip_id" field's value of the DailyTripItem entity.
// If the DailyTripItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripItemMutation) OldTripID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTripID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTripID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTripID: %w", err)
	}
	return oldValue.TripID, nil
}

// ResetTripID resets all changes to the "trip_id" field.
func (m *DailyTripItemMutation) ResetTripID() {
	m.trip = nil
}

// SetDailyTripID sets the "daily_trip_id" field.
func (m *DailyTripItemMutation) SetDailyTripID(u uuid.UUID) {
	m.daily_trip = &u
}

// DailyTripID returns the value of the "daily_trip_id" field in the mutation.
func (m *DailyTripItemMutation) DailyTripID() (r uuid.UUID, exists bool) {
	v := m.daily_trip
	if v == nil {
		return
	}
	return *v, true
}

// OldDailyTripID returns the old "daily_trip_id" field's value of the DailyTripItem entity.
// If the DailyTripItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripItemMutation) OldDailyTripID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDailyTripID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDailyTripID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDailyTripID: %w", err)
	}
	return oldValue.DailyTripID, nil
}

// ResetDailyTripID resets all changes to the "daily_trip_id" field.
func (m *DailyTripItemMutation) ResetDailyTripID() {
	m.daily_trip = nil
}

// SetNotes sets the "notes" field.
func (m *DailyTripItemMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *DailyTripItemMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the DailyTripItem entity.
// If the DailyTripItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DailyTripItemMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ClearNotes clears the value of the "notes" field.
func (m *DailyTripItemMutation) ClearNotes() {
	m.notes = nil
	m.clearedFields[dailytripitem.FieldNotes] = struct{}{}
}

// NotesCleared returns if the "notes" field was cleared in this mutation.
func (m *DailyTripItemMutation) NotesCleared() bool {
	_, ok := m.clearedFields[dailytripitem.FieldNotes]
	return ok
}

// ResetNotes resets all changes to the "notes" field.
func (m *DailyTripItemMutation) ResetNotes() {
	m.notes = nil
	delete(m.clearedFields, dailytripitem.FieldNotes)
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (m *DailyTripItemMutation) ClearTrip() {
	m.clearedtrip = true
	m.clearedFields[dailytripitem.FieldTripID] = struct{}{}
}

// TripCleared reports if the "trip" edge to the Trip entity was cleared.
func (m *DailyTripItemMutation) TripCleared() bool {
	return m.clearedtrip
}

// TripIDs returns the "trip" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TripID instead. It exists only for internal usage by the builders.
func (m *DailyTripItemMutation) TripIDs() (ids []uuid.UUID) {
	if id := m.trip; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTrip resets all changes to the "trip" edge.
func (m *DailyTripItemMutation) ResetTrip() {
	m.trip = nil
	m.clearedtrip = false
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (m *DailyTripItemMutation) ClearDailyTrip() {
	m.cleareddaily_trip = true
	m.clearedFields[dailytripitem.FieldDailyTripID] = struct{}{}
}

// DailyTripCleared reports if the "daily_trip" edge to the DailyTrip entity was cleared.
func (m *DailyTripItemMutation) DailyTripCleared() bool {
	return m.cleareddaily_trip
}

// DailyTripIDs returns the "daily_trip" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DailyTripID instead. It exists only for internal usage by the builders.
func (m *DailyTripItemMutation) DailyTripIDs() (ids []uuid.UUID) {
	if id := m.daily_trip; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDailyTrip resets all changes to the "daily_trip" edge.
func (m *DailyTripItemMutation) ResetDailyTrip() {
	m.daily_trip = nil
	m.cleareddaily_trip = false
}

// Where appends a list predicates to the DailyTripItemMutation builder.
func (m *DailyTripItemMutation) Where(ps ...predicate.DailyTripItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DailyTripItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DailyTripItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DailyTripItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DailyTripItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DailyTripItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DailyTripItem).
func (m *DailyTripItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DailyTripItemMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, dailytripitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dailytripitem.FieldUpdatedAt)
	}
	if m.trip != nil {
		fields = append(fields, dailytripitem.FieldTripID)
	}
	if m.daily_trip != nil {
		fields = append(fields, dailytripitem.FieldDailyTripID)
	}
	if m.notes != nil {
		fields = append(fields, dailytripitem.FieldNotes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DailyTripItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dailytripitem.FieldCreatedAt:
		return m.CreatedAt()
	case dailytripitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case dailytripitem.FieldTripID:
		return m.TripID()
	case dailytripitem.FieldDailyTripID:
		return m.DailyTripID()
	case dailytripitem.FieldNotes:
		return m.Notes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DailyTripItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dailytripitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dailytripitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dailytripitem.FieldTripID:
		return m.OldTripID(ctx)
	case dailytripitem.FieldDailyTripID:
		return m.OldDailyTripID(ctx)
	case dailytripitem.FieldNotes:
		return m.OldNotes(ctx)
	}
	return nil, fmt.Errorf("unknown DailyTripItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyTripItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dailytripitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dailytripitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dailytripitem.FieldTripID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTripID(v)
		return nil
	case dailytripitem.FieldDailyTripID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDailyTripID(v)
		return nil
	case dailytripitem.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	}
	return fmt.Errorf("unknown DailyTripItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DailyTripItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DailyTripItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DailyTripItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DailyTripItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DailyTripItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dailytripitem.FieldNotes) {
		fields = append(fields, dailytripitem.FieldNotes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DailyTripItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DailyTripItemMutation) ClearField(name string) error {
	switch name {
	case dailytripitem.FieldNotes:
		m.ClearNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyTripItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DailyTripItemMutation) ResetField(name string) error {
	switch name {
	case dailytripitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dailytripitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dailytripitem.FieldTripID:
		m.ResetTripID()
		return nil
	case dailytripitem.FieldDailyTripID:
		m.ResetDailyTripID()
		return nil
	case dailytripitem.FieldNotes:
		m.ResetNotes()
		return nil
	}
	return fmt.Errorf("unknown DailyTripItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DailyTripItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.trip != nil {
		edges = append(edges, dailytripitem.EdgeTrip)
	}
	if m.daily_trip != nil {
		edges = append(edges, dailytripitem.EdgeDailyTrip)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DailyTripItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dailytripitem.EdgeTrip:
		if id := m.trip; id != nil {
			return []ent.Value{*id}
		}
	case dailytripitem.EdgeDailyTrip:
		if id := m.daily_trip; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DailyTripItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DailyTripItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DailyTripItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtrip {
		edges = append(edges, dailytripitem.EdgeTrip)
	}
	if m.cleareddaily_trip {
		edges = append(edges, dailytripitem.EdgeDailyTrip)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DailyTripItemMutation) EdgeCleared(name string) bool {
	switch name {
	case dailytripitem.EdgeTrip:
		return m.clearedtrip
	case dailytripitem.EdgeDailyTrip:
		return m.cleareddaily_trip
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DailyTripItemMutation) ClearEdge(name string) error {
	switch name {
	case dailytripitem.EdgeTrip:
		m.ClearTrip()
		return nil
	case dailytripitem.EdgeDailyTrip:
		m.ClearDailyTrip()
		return nil
	}
	return fmt.Errorf("unknown DailyTripItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DailyTripItemMutation) ResetEdge(name string) error {
	switch name {
	case dailytripitem.EdgeTrip:
		m.ResetTrip()
		return nil
	case dailytripitem.EdgeDailyTrip:
		m.ResetDailyTrip()
		return nil
	}
	return fmt.Errorf("unknown DailyTripItem edge %s", name)
}

// MediaMutation represents an operation that mutates the Media nodes in the graph.
type MediaMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	filename        *string
	file_type       *string
	storage_type    *model.StorageType
	addstorage_type *model.StorageType
	_path           *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Media, error)
	predicates      []predicate.Media
}

var _ ent.Mutation = (*MediaMutation)(nil)

// mediaOption allows management of the mutation configuration using functional options.
type mediaOption func(*MediaMutation)

// newMediaMutation creates new mutation for the Media entity.
func newMediaMutation(c config, op Op, opts ...mediaOption) *MediaMutation {
	m := &MediaMutation{
		config:        c,
		op:            op,
		typ:           TypeMedia,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaID sets the ID field of the mutation.
func withMediaID(id uuid.UUID) mediaOption {
	return func(m *MediaMutation) {
		var (
			err   error
			once  sync.Once
			value *Media
		)
		m.oldValue = func(ctx context.Context) (*Media, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Media.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedia sets the old Media of the mutation.
func withMedia(node *Media) mediaOption {
	return func(m *MediaMutation) {
		m.oldValue = func(context.Context) (*Media, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Media entities.
func (m *MediaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Media.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MediaMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MediaMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MediaMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MediaMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MediaMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MediaMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFilename sets the "filename" field.
func (m *MediaMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *MediaMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *MediaMutation) ResetFilename() {
	m.filename = nil
}

// SetFileType sets the "file_type" field.
func (m *MediaMutation) SetFileType(s string) {
	m.file_type = &s
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *MediaMutation) FileType() (r string, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFileType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ResetFileType resets all changes to the "file_type" field.
func (m *MediaMutation) ResetFileType() {
	m.file_type = nil
}

// SetStorageType sets the "storage_type" field.
func (m *MediaMutation) SetStorageType(mt model.StorageType) {
	m.storage_type = &mt
	m.addstorage_type = nil
}

// StorageType returns the value of the "storage_type" field in the mutation.
func (m *MediaMutation) StorageType() (r model.StorageType, exists bool) {
	v := m.storage_type
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageType returns the old "storage_type" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldStorageType(ctx context.Context) (v model.StorageType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageType: %w", err)
	}
	return oldValue.StorageType, nil
}

// AddStorageType adds mt to the "storage_type" field.
func (m *MediaMutation) AddStorageType(mt model.StorageType) {
	if m.addstorage_type != nil {
		*m.addstorage_type += mt
	} else {
		m.addstorage_type = &mt
	}
}

// AddedStorageType returns the value that was added to the "storage_type" field in this mutation.
func (m *MediaMutation) AddedStorageType() (r model.StorageType, exists bool) {
	v := m.addstorage_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetStorageType resets all changes to the "storage_type" field.
func (m *MediaMutation) ResetStorageType() {
	m.storage_type = nil
	m.addstorage_type = nil
}

// SetPath sets the "path" field.
func (m *MediaMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *MediaMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *MediaMutation) ResetPath() {
	m._path = nil
}

// Where appends a list predicates to the MediaMutation builder.
func (m *MediaMutation) Where(ps ...predicate.Media) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Media, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Media).
func (m *MediaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, media.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, media.FieldUpdatedAt)
	}
	if m.filename != nil {
		fields = append(fields, media.FieldFilename)
	}
	if m.file_type != nil {
		fields = append(fields, media.FieldFileType)
	}
	if m.storage_type != nil {
		fields = append(fields, media.FieldStorageType)
	}
	if m._path != nil {
		fields = append(fields, media.FieldPath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case media.FieldCreatedAt:
		return m.CreatedAt()
	case media.FieldUpdatedAt:
		return m.UpdatedAt()
	case media.FieldFilename:
		return m.Filename()
	case media.FieldFileType:
		return m.FileType()
	case media.FieldStorageType:
		return m.StorageType()
	case media.FieldPath:
		return m.Path()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case media.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case media.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case media.FieldFilename:
		return m.OldFilename(ctx)
	case media.FieldFileType:
		return m.OldFileType(ctx)
	case media.FieldStorageType:
		return m.OldStorageType(ctx)
	case media.FieldPath:
		return m.OldPath(ctx)
	}
	return nil, fmt.Errorf("unknown Media field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case media.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case media.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case media.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case media.FieldFileType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	case media.FieldStorageType:
		v, ok := value.(model.StorageType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageType(v)
		return nil
	case media.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaMutation) AddedFields() []string {
	var fields []string
	if m.addstorage_type != nil {
		fields = append(fields, media.FieldStorageType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case media.FieldStorageType:
		return m.AddedStorageType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case media.FieldStorageType:
		v, ok := value.(model.StorageType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStorageType(v)
		return nil
	}
	return fmt.Errorf("unknown Media numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Media nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaMutation) ResetField(name string) error {
	switch name {
	case media.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case media.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case media.FieldFilename:
		m.ResetFilename()
		return nil
	case media.FieldFileType:
		m.ResetFileType()
		return nil
	case media.FieldStorageType:
		m.ResetStorageType()
		return nil
	case media.FieldPath:
		m.ResetPath()
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Media unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Media edge %s", name)
}

// RefreshTokenMutation represents an operation that mutates the RefreshToken nodes in the graph.
type RefreshTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	token         *string
	expires_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*RefreshToken, error)
	predicates    []predicate.RefreshToken
}

var _ ent.Mutation = (*RefreshTokenMutation)(nil)

// refreshtokenOption allows management of the mutation configuration using functional options.
type refreshtokenOption func(*RefreshTokenMutation)

// newRefreshTokenMutation creates new mutation for the RefreshToken entity.
func newRefreshTokenMutation(c config, op Op, opts ...refreshtokenOption) *RefreshTokenMutation {
	m := &RefreshTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeRefreshToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRefreshTokenID sets the ID field of the mutation.
func withRefreshTokenID(id uuid.UUID) refreshtokenOption {
	return func(m *RefreshTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *RefreshToken
		)
		m.oldValue = func(ctx context.Context) (*RefreshToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RefreshToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRefreshToken sets the old RefreshToken of the mutation.
func withRefreshToken(node *RefreshToken) refreshtokenOption {
	return func(m *RefreshTokenMutation) {
		m.oldValue = func(context.Context) (*RefreshToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RefreshTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RefreshTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RefreshToken entities.
func (m *RefreshTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RefreshTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RefreshTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RefreshToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RefreshTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RefreshTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RefreshTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RefreshTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RefreshTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RefreshTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetToken sets the "token" field.
func (m *RefreshTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *RefreshTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *RefreshTokenMutation) ResetToken() {
	m.token = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *RefreshTokenMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *RefreshTokenMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *RefreshTokenMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetUserID sets the "user_id" field.
func (m *RefreshTokenMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *RefreshTokenMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *RefreshTokenMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *RefreshTokenMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[refreshtoken.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RefreshTokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RefreshTokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RefreshTokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the RefreshTokenMutation builder.
func (m *RefreshTokenMutation) Where(ps ...predicate.RefreshToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RefreshTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RefreshTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RefreshToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RefreshTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RefreshTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RefreshToken).
func (m *RefreshTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RefreshTokenMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, refreshtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, refreshtoken.FieldUpdatedAt)
	}
	if m.token != nil {
		fields = append(fields, refreshtoken.FieldToken)
	}
	if m.expires_at != nil {
		fields = append(fields, refreshtoken.FieldExpiresAt)
	}
	if m.user != nil {
		fields = append(fields, refreshtoken.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RefreshTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case refreshtoken.FieldCreatedAt:
		return m.CreatedAt()
	case refreshtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case refreshtoken.FieldToken:
		return m.Token()
	case refreshtoken.FieldExpiresAt:
		return m.ExpiresAt()
	case refreshtoken.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RefreshTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case refreshtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case refreshtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case refreshtoken.FieldToken:
		return m.OldToken(ctx)
	case refreshtoken.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case refreshtoken.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown RefreshToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case refreshtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case refreshtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case refreshtoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case refreshtoken.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case refreshtoken.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown RefreshToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RefreshTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RefreshTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RefreshToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RefreshTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RefreshTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RefreshTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RefreshToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RefreshTokenMutation) ResetField(name string) error {
	switch name {
	case refreshtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case refreshtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case refreshtoken.FieldToken:
		m.ResetToken()
		return nil
	case refreshtoken.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case refreshtoken.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RefreshTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, refreshtoken.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RefreshTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case refreshtoken.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RefreshTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RefreshTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RefreshTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, refreshtoken.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RefreshTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case refreshtoken.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RefreshTokenMutation) ClearEdge(name string) error {
	switch name {
	case refreshtoken.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RefreshTokenMutation) ResetEdge(name string) error {
	switch name {
	case refreshtoken.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken edge %s", name)
}

// TripMutation represents an operation that mutates the Trip nodes in the graph.
type TripMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	status                 *bool
	title                  *string
	description            *string
	start_date             *time.Time
	end_date               *time.Time
	clearedFields          map[string]struct{}
	user                   *uuid.UUID
	cleareduser            bool
	daily_trip             map[uuid.UUID]struct{}
	removeddaily_trip      map[uuid.UUID]struct{}
	cleareddaily_trip      bool
	daily_trip_item        map[uuid.UUID]struct{}
	removeddaily_trip_item map[uuid.UUID]struct{}
	cleareddaily_trip_item bool
	done                   bool
	oldValue               func(context.Context) (*Trip, error)
	predicates             []predicate.Trip
}

var _ ent.Mutation = (*TripMutation)(nil)

// tripOption allows management of the mutation configuration using functional options.
type tripOption func(*TripMutation)

// newTripMutation creates new mutation for the Trip entity.
func newTripMutation(c config, op Op, opts ...tripOption) *TripMutation {
	m := &TripMutation{
		config:        c,
		op:            op,
		typ:           TypeTrip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTripID sets the ID field of the mutation.
func withTripID(id uuid.UUID) tripOption {
	return func(m *TripMutation) {
		var (
			err   error
			once  sync.Once
			value *Trip
		)
		m.oldValue = func(ctx context.Context) (*Trip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Trip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrip sets the old Trip of the mutation.
func withTrip(node *Trip) tripOption {
	return func(m *TripMutation) {
		m.oldValue = func(context.Context) (*Trip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TripMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TripMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Trip entities.
func (m *TripMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TripMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TripMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Trip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TripMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TripMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TripMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TripMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TripMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TripMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *TripMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TripMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TripMutation) ResetUserID() {
	m.user = nil
}

// SetStatus sets the "status" field.
func (m *TripMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *TripMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TripMutation) ResetStatus() {
	m.status = nil
}

// SetTitle sets the "title" field.
func (m *TripMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TripMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TripMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TripMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TripMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TripMutation) ResetDescription() {
	m.description = nil
}

// SetStartDate sets the "start_date" field.
func (m *TripMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *TripMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *TripMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *TripMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *TripMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Trip entity.
// If the Trip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TripMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *TripMutation) ResetEndDate() {
	m.end_date = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *TripMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[trip.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TripMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TripMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TripMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddDailyTripIDs adds the "daily_trip" edge to the DailyTrip entity by ids.
func (m *TripMutation) AddDailyTripIDs(ids ...uuid.UUID) {
	if m.daily_trip == nil {
		m.daily_trip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_trip[ids[i]] = struct{}{}
	}
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (m *TripMutation) ClearDailyTrip() {
	m.cleareddaily_trip = true
}

// DailyTripCleared reports if the "daily_trip" edge to the DailyTrip entity was cleared.
func (m *TripMutation) DailyTripCleared() bool {
	return m.cleareddaily_trip
}

// RemoveDailyTripIDs removes the "daily_trip" edge to the DailyTrip entity by IDs.
func (m *TripMutation) RemoveDailyTripIDs(ids ...uuid.UUID) {
	if m.removeddaily_trip == nil {
		m.removeddaily_trip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_trip, ids[i])
		m.removeddaily_trip[ids[i]] = struct{}{}
	}
}

// RemovedDailyTrip returns the removed IDs of the "daily_trip" edge to the DailyTrip entity.
func (m *TripMutation) RemovedDailyTripIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_trip {
		ids = append(ids, id)
	}
	return
}

// DailyTripIDs returns the "daily_trip" edge IDs in the mutation.
func (m *TripMutation) DailyTripIDs() (ids []uuid.UUID) {
	for id := range m.daily_trip {
		ids = append(ids, id)
	}
	return
}

// ResetDailyTrip resets all changes to the "daily_trip" edge.
func (m *TripMutation) ResetDailyTrip() {
	m.daily_trip = nil
	m.cleareddaily_trip = false
	m.removeddaily_trip = nil
}

// AddDailyTripItemIDs adds the "daily_trip_item" edge to the DailyTripItem entity by ids.
func (m *TripMutation) AddDailyTripItemIDs(ids ...uuid.UUID) {
	if m.daily_trip_item == nil {
		m.daily_trip_item = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.daily_trip_item[ids[i]] = struct{}{}
	}
}

// ClearDailyTripItem clears the "daily_trip_item" edge to the DailyTripItem entity.
func (m *TripMutation) ClearDailyTripItem() {
	m.cleareddaily_trip_item = true
}

// DailyTripItemCleared reports if the "daily_trip_item" edge to the DailyTripItem entity was cleared.
func (m *TripMutation) DailyTripItemCleared() bool {
	return m.cleareddaily_trip_item
}

// RemoveDailyTripItemIDs removes the "daily_trip_item" edge to the DailyTripItem entity by IDs.
func (m *TripMutation) RemoveDailyTripItemIDs(ids ...uuid.UUID) {
	if m.removeddaily_trip_item == nil {
		m.removeddaily_trip_item = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.daily_trip_item, ids[i])
		m.removeddaily_trip_item[ids[i]] = struct{}{}
	}
}

// RemovedDailyTripItem returns the removed IDs of the "daily_trip_item" edge to the DailyTripItem entity.
func (m *TripMutation) RemovedDailyTripItemIDs() (ids []uuid.UUID) {
	for id := range m.removeddaily_trip_item {
		ids = append(ids, id)
	}
	return
}

// DailyTripItemIDs returns the "daily_trip_item" edge IDs in the mutation.
func (m *TripMutation) DailyTripItemIDs() (ids []uuid.UUID) {
	for id := range m.daily_trip_item {
		ids = append(ids, id)
	}
	return
}

// ResetDailyTripItem resets all changes to the "daily_trip_item" edge.
func (m *TripMutation) ResetDailyTripItem() {
	m.daily_trip_item = nil
	m.cleareddaily_trip_item = false
	m.removeddaily_trip_item = nil
}

// Where appends a list predicates to the TripMutation builder.
func (m *TripMutation) Where(ps ...predicate.Trip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TripMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TripMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Trip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TripMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TripMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Trip).
func (m *TripMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TripMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, trip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, trip.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, trip.FieldUserID)
	}
	if m.status != nil {
		fields = append(fields, trip.FieldStatus)
	}
	if m.title != nil {
		fields = append(fields, trip.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, trip.FieldDescription)
	}
	if m.start_date != nil {
		fields = append(fields, trip.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, trip.FieldEndDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TripMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trip.FieldCreatedAt:
		return m.CreatedAt()
	case trip.FieldUpdatedAt:
		return m.UpdatedAt()
	case trip.FieldUserID:
		return m.UserID()
	case trip.FieldStatus:
		return m.Status()
	case trip.FieldTitle:
		return m.Title()
	case trip.FieldDescription:
		return m.Description()
	case trip.FieldStartDate:
		return m.StartDate()
	case trip.FieldEndDate:
		return m.EndDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TripMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case trip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case trip.FieldUserID:
		return m.OldUserID(ctx)
	case trip.FieldStatus:
		return m.OldStatus(ctx)
	case trip.FieldTitle:
		return m.OldTitle(ctx)
	case trip.FieldDescription:
		return m.OldDescription(ctx)
	case trip.FieldStartDate:
		return m.OldStartDate(ctx)
	case trip.FieldEndDate:
		return m.OldEndDate(ctx)
	}
	return nil, fmt.Errorf("unknown Trip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TripMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case trip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case trip.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case trip.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case trip.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case trip.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case trip.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case trip.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	}
	return fmt.Errorf("unknown Trip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TripMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TripMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TripMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Trip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TripMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TripMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TripMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Trip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TripMutation) ResetField(name string) error {
	switch name {
	case trip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case trip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case trip.FieldUserID:
		m.ResetUserID()
		return nil
	case trip.FieldStatus:
		m.ResetStatus()
		return nil
	case trip.FieldTitle:
		m.ResetTitle()
		return nil
	case trip.FieldDescription:
		m.ResetDescription()
		return nil
	case trip.FieldStartDate:
		m.ResetStartDate()
		return nil
	case trip.FieldEndDate:
		m.ResetEndDate()
		return nil
	}
	return fmt.Errorf("unknown Trip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TripMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, trip.EdgeUser)
	}
	if m.daily_trip != nil {
		edges = append(edges, trip.EdgeDailyTrip)
	}
	if m.daily_trip_item != nil {
		edges = append(edges, trip.EdgeDailyTripItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TripMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case trip.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case trip.EdgeDailyTrip:
		ids := make([]ent.Value, 0, len(m.daily_trip))
		for id := range m.daily_trip {
			ids = append(ids, id)
		}
		return ids
	case trip.EdgeDailyTripItem:
		ids := make([]ent.Value, 0, len(m.daily_trip_item))
		for id := range m.daily_trip_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TripMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddaily_trip != nil {
		edges = append(edges, trip.EdgeDailyTrip)
	}
	if m.removeddaily_trip_item != nil {
		edges = append(edges, trip.EdgeDailyTripItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TripMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case trip.EdgeDailyTrip:
		ids := make([]ent.Value, 0, len(m.removeddaily_trip))
		for id := range m.removeddaily_trip {
			ids = append(ids, id)
		}
		return ids
	case trip.EdgeDailyTripItem:
		ids := make([]ent.Value, 0, len(m.removeddaily_trip_item))
		for id := range m.removeddaily_trip_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TripMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, trip.EdgeUser)
	}
	if m.cleareddaily_trip {
		edges = append(edges, trip.EdgeDailyTrip)
	}
	if m.cleareddaily_trip_item {
		edges = append(edges, trip.EdgeDailyTripItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TripMutation) EdgeCleared(name string) bool {
	switch name {
	case trip.EdgeUser:
		return m.cleareduser
	case trip.EdgeDailyTrip:
		return m.cleareddaily_trip
	case trip.EdgeDailyTripItem:
		return m.cleareddaily_trip_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TripMutation) ClearEdge(name string) error {
	switch name {
	case trip.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Trip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TripMutation) ResetEdge(name string) error {
	switch name {
	case trip.EdgeUser:
		m.ResetUser()
		return nil
	case trip.EdgeDailyTrip:
		m.ResetDailyTrip()
		return nil
	case trip.EdgeDailyTripItem:
		m.ResetDailyTripItem()
		return nil
	}
	return fmt.Errorf("unknown Trip edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	status               *bool
	username             *string
	password             *string
	email                *string
	avatar_url           *string
	clearedFields        map[string]struct{}
	refresh_token        map[uuid.UUID]struct{}
	removedrefresh_token map[uuid.UUID]struct{}
	clearedrefresh_token bool
	trip                 map[uuid.UUID]struct{}
	removedtrip          map[uuid.UUID]struct{}
	clearedtrip          bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (m *UserMutation) ClearAvatarURL() {
	m.avatar_url = nil
	m.clearedFields[user.FieldAvatarURL] = struct{}{}
}

// AvatarURLCleared returns if the "avatar_url" field was cleared in this mutation.
func (m *UserMutation) AvatarURLCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarURL]
	return ok
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
	delete(m.clearedFields, user.FieldAvatarURL)
}

// AddRefreshTokenIDs adds the "refresh_token" edge to the RefreshToken entity by ids.
func (m *UserMutation) AddRefreshTokenIDs(ids ...uuid.UUID) {
	if m.refresh_token == nil {
		m.refresh_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.refresh_token[ids[i]] = struct{}{}
	}
}

// ClearRefreshToken clears the "refresh_token" edge to the RefreshToken entity.
func (m *UserMutation) ClearRefreshToken() {
	m.clearedrefresh_token = true
}

// RefreshTokenCleared reports if the "refresh_token" edge to the RefreshToken entity was cleared.
func (m *UserMutation) RefreshTokenCleared() bool {
	return m.clearedrefresh_token
}

// RemoveRefreshTokenIDs removes the "refresh_token" edge to the RefreshToken entity by IDs.
func (m *UserMutation) RemoveRefreshTokenIDs(ids ...uuid.UUID) {
	if m.removedrefresh_token == nil {
		m.removedrefresh_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.refresh_token, ids[i])
		m.removedrefresh_token[ids[i]] = struct{}{}
	}
}

// RemovedRefreshToken returns the removed IDs of the "refresh_token" edge to the RefreshToken entity.
func (m *UserMutation) RemovedRefreshTokenIDs() (ids []uuid.UUID) {
	for id := range m.removedrefresh_token {
		ids = append(ids, id)
	}
	return
}

// RefreshTokenIDs returns the "refresh_token" edge IDs in the mutation.
func (m *UserMutation) RefreshTokenIDs() (ids []uuid.UUID) {
	for id := range m.refresh_token {
		ids = append(ids, id)
	}
	return
}

// ResetRefreshToken resets all changes to the "refresh_token" edge.
func (m *UserMutation) ResetRefreshToken() {
	m.refresh_token = nil
	m.clearedrefresh_token = false
	m.removedrefresh_token = nil
}

// AddTripIDs adds the "trip" edge to the Trip entity by ids.
func (m *UserMutation) AddTripIDs(ids ...uuid.UUID) {
	if m.trip == nil {
		m.trip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.trip[ids[i]] = struct{}{}
	}
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (m *UserMutation) ClearTrip() {
	m.clearedtrip = true
}

// TripCleared reports if the "trip" edge to the Trip entity was cleared.
func (m *UserMutation) TripCleared() bool {
	return m.clearedtrip
}

// RemoveTripIDs removes the "trip" edge to the Trip entity by IDs.
func (m *UserMutation) RemoveTripIDs(ids ...uuid.UUID) {
	if m.removedtrip == nil {
		m.removedtrip = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.trip, ids[i])
		m.removedtrip[ids[i]] = struct{}{}
	}
}

// RemovedTrip returns the removed IDs of the "trip" edge to the Trip entity.
func (m *UserMutation) RemovedTripIDs() (ids []uuid.UUID) {
	for id := range m.removedtrip {
		ids = append(ids, id)
	}
	return
}

// TripIDs returns the "trip" edge IDs in the mutation.
func (m *UserMutation) TripIDs() (ids []uuid.UUID) {
	for id := range m.trip {
		ids = append(ids, id)
	}
	return
}

// ResetTrip resets all changes to the "trip" edge.
func (m *UserMutation) ResetTrip() {
	m.trip = nil
	m.clearedtrip = false
	m.removedtrip = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldStatus:
		return m.Status()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAvatarURL) {
		fields = append(fields, user.FieldAvatarURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAvatarURL:
		m.ClearAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.refresh_token != nil {
		edges = append(edges, user.EdgeRefreshToken)
	}
	if m.trip != nil {
		edges = append(edges, user.EdgeTrip)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.refresh_token))
		for id := range m.refresh_token {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTrip:
		ids := make([]ent.Value, 0, len(m.trip))
		for id := range m.trip {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrefresh_token != nil {
		edges = append(edges, user.EdgeRefreshToken)
	}
	if m.removedtrip != nil {
		edges = append(edges, user.EdgeTrip)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.removedrefresh_token))
		for id := range m.removedrefresh_token {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTrip:
		ids := make([]ent.Value, 0, len(m.removedtrip))
		for id := range m.removedtrip {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrefresh_token {
		edges = append(edges, user.EdgeRefreshToken)
	}
	if m.clearedtrip {
		edges = append(edges, user.EdgeTrip)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRefreshToken:
		return m.clearedrefresh_token
	case user.EdgeTrip:
		return m.clearedtrip
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRefreshToken:
		m.ResetRefreshToken()
		return nil
	case user.EdgeTrip:
		m.ResetTrip()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
