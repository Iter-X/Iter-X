// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/impl/ent/trip"
	"github.com/iter-x/iter-x/internal/impl/ent/user"
)

// Trip is the model entity for the Trip schema.
type Trip struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TripQuery when eager-loading is set.
	Edges        TripEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TripEdges holds the relations/edges for other nodes in the graph.
type TripEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// DailyTrip holds the value of the daily_trip edge.
	DailyTrip []*DailyTrip `json:"daily_trip,omitempty"`
	// DailyTripItem holds the value of the daily_trip_item edge.
	DailyTripItem []*DailyTripItem `json:"daily_trip_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TripEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DailyTripOrErr returns the DailyTrip value or an error if the edge
// was not loaded in eager-loading.
func (e TripEdges) DailyTripOrErr() ([]*DailyTrip, error) {
	if e.loadedTypes[1] {
		return e.DailyTrip, nil
	}
	return nil, &NotLoadedError{edge: "daily_trip"}
}

// DailyTripItemOrErr returns the DailyTripItem value or an error if the edge
// was not loaded in eager-loading.
func (e TripEdges) DailyTripItemOrErr() ([]*DailyTripItem, error) {
	if e.loadedTypes[2] {
		return e.DailyTripItem, nil
	}
	return nil, &NotLoadedError{edge: "daily_trip_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Trip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trip.FieldStatus:
			values[i] = new(sql.NullBool)
		case trip.FieldTitle, trip.FieldDescription:
			values[i] = new(sql.NullString)
		case trip.FieldCreatedAt, trip.FieldUpdatedAt, trip.FieldStartDate, trip.FieldEndDate:
			values[i] = new(sql.NullTime)
		case trip.FieldID, trip.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Trip fields.
func (t *Trip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trip.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case trip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case trip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case trip.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				t.UserID = *value
			}
		case trip.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.Bool
			}
		case trip.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case trip.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case trip.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				t.StartDate = value.Time
			}
		case trip.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				t.EndDate = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Trip.
// This includes values selected through modifiers, order, etc.
func (t *Trip) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Trip entity.
func (t *Trip) QueryUser() *UserQuery {
	return NewTripClient(t.config).QueryUser(t)
}

// QueryDailyTrip queries the "daily_trip" edge of the Trip entity.
func (t *Trip) QueryDailyTrip() *DailyTripQuery {
	return NewTripClient(t.config).QueryDailyTrip(t)
}

// QueryDailyTripItem queries the "daily_trip_item" edge of the Trip entity.
func (t *Trip) QueryDailyTripItem() *DailyTripItemQuery {
	return NewTripClient(t.config).QueryDailyTripItem(t)
}

// Update returns a builder for updating this Trip.
// Note that you need to call Trip.Unwrap() before calling this method if this Trip
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Trip) Update() *TripUpdateOne {
	return NewTripClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Trip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Trip) Unwrap() *Trip {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Trip is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Trip) String() string {
	var builder strings.Builder
	builder.WriteString("Trip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(t.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(t.EndDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Trips is a parsable slice of Trip.
type Trips []*Trip
