// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytrip"
	"github.com/iter-x/iter-x/internal/impl/ent/dailytripitem"
	"github.com/iter-x/iter-x/internal/impl/ent/predicate"
	"github.com/iter-x/iter-x/internal/impl/ent/trip"
)

// DailyTripItemUpdate is the builder for updating DailyTripItem entities.
type DailyTripItemUpdate struct {
	config
	hooks    []Hook
	mutation *DailyTripItemMutation
}

// Where appends a list predicates to the DailyTripItemUpdate builder.
func (dtiu *DailyTripItemUpdate) Where(ps ...predicate.DailyTripItem) *DailyTripItemUpdate {
	dtiu.mutation.Where(ps...)
	return dtiu
}

// SetUpdatedAt sets the "updated_at" field.
func (dtiu *DailyTripItemUpdate) SetUpdatedAt(t time.Time) *DailyTripItemUpdate {
	dtiu.mutation.SetUpdatedAt(t)
	return dtiu
}

// SetTripID sets the "trip_id" field.
func (dtiu *DailyTripItemUpdate) SetTripID(u uuid.UUID) *DailyTripItemUpdate {
	dtiu.mutation.SetTripID(u)
	return dtiu
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (dtiu *DailyTripItemUpdate) SetNillableTripID(u *uuid.UUID) *DailyTripItemUpdate {
	if u != nil {
		dtiu.SetTripID(*u)
	}
	return dtiu
}

// SetDailyTripID sets the "daily_trip_id" field.
func (dtiu *DailyTripItemUpdate) SetDailyTripID(u uuid.UUID) *DailyTripItemUpdate {
	dtiu.mutation.SetDailyTripID(u)
	return dtiu
}

// SetNillableDailyTripID sets the "daily_trip_id" field if the given value is not nil.
func (dtiu *DailyTripItemUpdate) SetNillableDailyTripID(u *uuid.UUID) *DailyTripItemUpdate {
	if u != nil {
		dtiu.SetDailyTripID(*u)
	}
	return dtiu
}

// SetNotes sets the "notes" field.
func (dtiu *DailyTripItemUpdate) SetNotes(s string) *DailyTripItemUpdate {
	dtiu.mutation.SetNotes(s)
	return dtiu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dtiu *DailyTripItemUpdate) SetNillableNotes(s *string) *DailyTripItemUpdate {
	if s != nil {
		dtiu.SetNotes(*s)
	}
	return dtiu
}

// ClearNotes clears the value of the "notes" field.
func (dtiu *DailyTripItemUpdate) ClearNotes() *DailyTripItemUpdate {
	dtiu.mutation.ClearNotes()
	return dtiu
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dtiu *DailyTripItemUpdate) SetTrip(t *Trip) *DailyTripItemUpdate {
	return dtiu.SetTripID(t.ID)
}

// SetDailyTrip sets the "daily_trip" edge to the DailyTrip entity.
func (dtiu *DailyTripItemUpdate) SetDailyTrip(d *DailyTrip) *DailyTripItemUpdate {
	return dtiu.SetDailyTripID(d.ID)
}

// Mutation returns the DailyTripItemMutation object of the builder.
func (dtiu *DailyTripItemUpdate) Mutation() *DailyTripItemMutation {
	return dtiu.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (dtiu *DailyTripItemUpdate) ClearTrip() *DailyTripItemUpdate {
	dtiu.mutation.ClearTrip()
	return dtiu
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (dtiu *DailyTripItemUpdate) ClearDailyTrip() *DailyTripItemUpdate {
	dtiu.mutation.ClearDailyTrip()
	return dtiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtiu *DailyTripItemUpdate) Save(ctx context.Context) (int, error) {
	dtiu.defaults()
	return withHooks(ctx, dtiu.sqlSave, dtiu.mutation, dtiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtiu *DailyTripItemUpdate) SaveX(ctx context.Context) int {
	affected, err := dtiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtiu *DailyTripItemUpdate) Exec(ctx context.Context) error {
	_, err := dtiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtiu *DailyTripItemUpdate) ExecX(ctx context.Context) {
	if err := dtiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtiu *DailyTripItemUpdate) defaults() {
	if _, ok := dtiu.mutation.UpdatedAt(); !ok {
		v := dailytripitem.UpdateDefaultUpdatedAt()
		dtiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtiu *DailyTripItemUpdate) check() error {
	if v, ok := dtiu.mutation.Notes(); ok {
		if err := dailytripitem.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyTripItem.notes": %w`, err)}
		}
	}
	if dtiu.mutation.TripCleared() && len(dtiu.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTripItem.trip"`)
	}
	if dtiu.mutation.DailyTripCleared() && len(dtiu.mutation.DailyTripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTripItem.daily_trip"`)
	}
	return nil
}

func (dtiu *DailyTripItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dtiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailytripitem.Table, dailytripitem.Columns, sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID))
	if ps := dtiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtiu.mutation.UpdatedAt(); ok {
		_spec.SetField(dailytripitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dtiu.mutation.Notes(); ok {
		_spec.SetField(dailytripitem.FieldNotes, field.TypeString, value)
	}
	if dtiu.mutation.NotesCleared() {
		_spec.ClearField(dailytripitem.FieldNotes, field.TypeString)
	}
	if dtiu.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.TripTable,
			Columns: []string{dailytripitem.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiu.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.TripTable,
			Columns: []string{dailytripitem.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtiu.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.DailyTripTable,
			Columns: []string{dailytripitem.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiu.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.DailyTripTable,
			Columns: []string{dailytripitem.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailytripitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtiu.mutation.done = true
	return n, nil
}

// DailyTripItemUpdateOne is the builder for updating a single DailyTripItem entity.
type DailyTripItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DailyTripItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (dtiuo *DailyTripItemUpdateOne) SetUpdatedAt(t time.Time) *DailyTripItemUpdateOne {
	dtiuo.mutation.SetUpdatedAt(t)
	return dtiuo
}

// SetTripID sets the "trip_id" field.
func (dtiuo *DailyTripItemUpdateOne) SetTripID(u uuid.UUID) *DailyTripItemUpdateOne {
	dtiuo.mutation.SetTripID(u)
	return dtiuo
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (dtiuo *DailyTripItemUpdateOne) SetNillableTripID(u *uuid.UUID) *DailyTripItemUpdateOne {
	if u != nil {
		dtiuo.SetTripID(*u)
	}
	return dtiuo
}

// SetDailyTripID sets the "daily_trip_id" field.
func (dtiuo *DailyTripItemUpdateOne) SetDailyTripID(u uuid.UUID) *DailyTripItemUpdateOne {
	dtiuo.mutation.SetDailyTripID(u)
	return dtiuo
}

// SetNillableDailyTripID sets the "daily_trip_id" field if the given value is not nil.
func (dtiuo *DailyTripItemUpdateOne) SetNillableDailyTripID(u *uuid.UUID) *DailyTripItemUpdateOne {
	if u != nil {
		dtiuo.SetDailyTripID(*u)
	}
	return dtiuo
}

// SetNotes sets the "notes" field.
func (dtiuo *DailyTripItemUpdateOne) SetNotes(s string) *DailyTripItemUpdateOne {
	dtiuo.mutation.SetNotes(s)
	return dtiuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dtiuo *DailyTripItemUpdateOne) SetNillableNotes(s *string) *DailyTripItemUpdateOne {
	if s != nil {
		dtiuo.SetNotes(*s)
	}
	return dtiuo
}

// ClearNotes clears the value of the "notes" field.
func (dtiuo *DailyTripItemUpdateOne) ClearNotes() *DailyTripItemUpdateOne {
	dtiuo.mutation.ClearNotes()
	return dtiuo
}

// SetTrip sets the "trip" edge to the Trip entity.
func (dtiuo *DailyTripItemUpdateOne) SetTrip(t *Trip) *DailyTripItemUpdateOne {
	return dtiuo.SetTripID(t.ID)
}

// SetDailyTrip sets the "daily_trip" edge to the DailyTrip entity.
func (dtiuo *DailyTripItemUpdateOne) SetDailyTrip(d *DailyTrip) *DailyTripItemUpdateOne {
	return dtiuo.SetDailyTripID(d.ID)
}

// Mutation returns the DailyTripItemMutation object of the builder.
func (dtiuo *DailyTripItemUpdateOne) Mutation() *DailyTripItemMutation {
	return dtiuo.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (dtiuo *DailyTripItemUpdateOne) ClearTrip() *DailyTripItemUpdateOne {
	dtiuo.mutation.ClearTrip()
	return dtiuo
}

// ClearDailyTrip clears the "daily_trip" edge to the DailyTrip entity.
func (dtiuo *DailyTripItemUpdateOne) ClearDailyTrip() *DailyTripItemUpdateOne {
	dtiuo.mutation.ClearDailyTrip()
	return dtiuo
}

// Where appends a list predicates to the DailyTripItemUpdate builder.
func (dtiuo *DailyTripItemUpdateOne) Where(ps ...predicate.DailyTripItem) *DailyTripItemUpdateOne {
	dtiuo.mutation.Where(ps...)
	return dtiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtiuo *DailyTripItemUpdateOne) Select(field string, fields ...string) *DailyTripItemUpdateOne {
	dtiuo.fields = append([]string{field}, fields...)
	return dtiuo
}

// Save executes the query and returns the updated DailyTripItem entity.
func (dtiuo *DailyTripItemUpdateOne) Save(ctx context.Context) (*DailyTripItem, error) {
	dtiuo.defaults()
	return withHooks(ctx, dtiuo.sqlSave, dtiuo.mutation, dtiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtiuo *DailyTripItemUpdateOne) SaveX(ctx context.Context) *DailyTripItem {
	node, err := dtiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtiuo *DailyTripItemUpdateOne) Exec(ctx context.Context) error {
	_, err := dtiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtiuo *DailyTripItemUpdateOne) ExecX(ctx context.Context) {
	if err := dtiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtiuo *DailyTripItemUpdateOne) defaults() {
	if _, ok := dtiuo.mutation.UpdatedAt(); !ok {
		v := dailytripitem.UpdateDefaultUpdatedAt()
		dtiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtiuo *DailyTripItemUpdateOne) check() error {
	if v, ok := dtiuo.mutation.Notes(); ok {
		if err := dailytripitem.NotesValidator(v); err != nil {
			return &ValidationError{Name: "notes", err: fmt.Errorf(`ent: validator failed for field "DailyTripItem.notes": %w`, err)}
		}
	}
	if dtiuo.mutation.TripCleared() && len(dtiuo.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTripItem.trip"`)
	}
	if dtiuo.mutation.DailyTripCleared() && len(dtiuo.mutation.DailyTripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTripItem.daily_trip"`)
	}
	return nil
}

func (dtiuo *DailyTripItemUpdateOne) sqlSave(ctx context.Context) (_node *DailyTripItem, err error) {
	if err := dtiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailytripitem.Table, dailytripitem.Columns, sqlgraph.NewFieldSpec(dailytripitem.FieldID, field.TypeUUID))
	id, ok := dtiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DailyTripItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailytripitem.FieldID)
		for _, f := range fields {
			if !dailytripitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dailytripitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dailytripitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dtiuo.mutation.Notes(); ok {
		_spec.SetField(dailytripitem.FieldNotes, field.TypeString, value)
	}
	if dtiuo.mutation.NotesCleared() {
		_spec.ClearField(dailytripitem.FieldNotes, field.TypeString)
	}
	if dtiuo.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.TripTable,
			Columns: []string{dailytripitem.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiuo.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.TripTable,
			Columns: []string{dailytripitem.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtiuo.mutation.DailyTripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.DailyTripTable,
			Columns: []string{dailytripitem.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiuo.mutation.DailyTripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytripitem.DailyTripTable,
			Columns: []string{dailytripitem.DailyTripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dailytrip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DailyTripItem{config: dtiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailytripitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtiuo.mutation.done = true
	return _node, nil
}
