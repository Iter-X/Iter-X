// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: trip/v1/trip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TripService_CreateTrip_FullMethodName      = "/trip.v1.TripService/CreateTrip"
	TripService_GetTrip_FullMethodName         = "/trip.v1.TripService/GetTrip"
	TripService_UpdateTrip_FullMethodName      = "/trip.v1.TripService/UpdateTrip"
	TripService_DeleteTrip_FullMethodName      = "/trip.v1.TripService/DeleteTrip"
	TripService_ListTrips_FullMethodName       = "/trip.v1.TripService/ListTrips"
	TripService_CreateDailyTrip_FullMethodName = "/trip.v1.TripService/CreateDailyTrip"
	TripService_GetDailyTrip_FullMethodName    = "/trip.v1.TripService/GetDailyTrip"
	TripService_UpdateDailyTrip_FullMethodName = "/trip.v1.TripService/UpdateDailyTrip"
	TripService_DeleteDailyTrip_FullMethodName = "/trip.v1.TripService/DeleteDailyTrip"
	TripService_ListDailyTrips_FullMethodName  = "/trip.v1.TripService/ListDailyTrips"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error)
	GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*GetTripResponse, error)
	UpdateTrip(ctx context.Context, in *UpdateTripRequest, opts ...grpc.CallOption) (*UpdateTripResponse, error)
	DeleteTrip(ctx context.Context, in *DeleteTripRequest, opts ...grpc.CallOption) (*DeleteTripResponse, error)
	ListTrips(ctx context.Context, in *ListTripsRequest, opts ...grpc.CallOption) (*ListTripsResponse, error)
	CreateDailyTrip(ctx context.Context, in *CreateDailyTripRequest, opts ...grpc.CallOption) (*CreateDailyTripResponse, error)
	GetDailyTrip(ctx context.Context, in *GetDailyTripRequest, opts ...grpc.CallOption) (*GetDailyTripResponse, error)
	UpdateDailyTrip(ctx context.Context, in *UpdateDailyTripRequest, opts ...grpc.CallOption) (*UpdateDailyTripResponse, error)
	DeleteDailyTrip(ctx context.Context, in *DeleteDailyTripRequest, opts ...grpc.CallOption) (*DeleteDailyTripResponse, error)
	ListDailyTrips(ctx context.Context, in *ListDailyTripsRequest, opts ...grpc.CallOption) (*ListDailyTripsResponse, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTripResponse)
	err := c.cc.Invoke(ctx, TripService_CreateTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*GetTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTripResponse)
	err := c.cc.Invoke(ctx, TripService_GetTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) UpdateTrip(ctx context.Context, in *UpdateTripRequest, opts ...grpc.CallOption) (*UpdateTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTripResponse)
	err := c.cc.Invoke(ctx, TripService_UpdateTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) DeleteTrip(ctx context.Context, in *DeleteTripRequest, opts ...grpc.CallOption) (*DeleteTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTripResponse)
	err := c.cc.Invoke(ctx, TripService_DeleteTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) ListTrips(ctx context.Context, in *ListTripsRequest, opts ...grpc.CallOption) (*ListTripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTripsResponse)
	err := c.cc.Invoke(ctx, TripService_ListTrips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CreateDailyTrip(ctx context.Context, in *CreateDailyTripRequest, opts ...grpc.CallOption) (*CreateDailyTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDailyTripResponse)
	err := c.cc.Invoke(ctx, TripService_CreateDailyTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetDailyTrip(ctx context.Context, in *GetDailyTripRequest, opts ...grpc.CallOption) (*GetDailyTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyTripResponse)
	err := c.cc.Invoke(ctx, TripService_GetDailyTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) UpdateDailyTrip(ctx context.Context, in *UpdateDailyTripRequest, opts ...grpc.CallOption) (*UpdateDailyTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDailyTripResponse)
	err := c.cc.Invoke(ctx, TripService_UpdateDailyTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) DeleteDailyTrip(ctx context.Context, in *DeleteDailyTripRequest, opts ...grpc.CallOption) (*DeleteDailyTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDailyTripResponse)
	err := c.cc.Invoke(ctx, TripService_DeleteDailyTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) ListDailyTrips(ctx context.Context, in *ListDailyTripsRequest, opts ...grpc.CallOption) (*ListDailyTripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDailyTripsResponse)
	err := c.cc.Invoke(ctx, TripService_ListDailyTrips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility.
type TripServiceServer interface {
	CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error)
	GetTrip(context.Context, *GetTripRequest) (*GetTripResponse, error)
	UpdateTrip(context.Context, *UpdateTripRequest) (*UpdateTripResponse, error)
	DeleteTrip(context.Context, *DeleteTripRequest) (*DeleteTripResponse, error)
	ListTrips(context.Context, *ListTripsRequest) (*ListTripsResponse, error)
	CreateDailyTrip(context.Context, *CreateDailyTripRequest) (*CreateDailyTripResponse, error)
	GetDailyTrip(context.Context, *GetDailyTripRequest) (*GetDailyTripResponse, error)
	UpdateDailyTrip(context.Context, *UpdateDailyTripRequest) (*UpdateDailyTripResponse, error)
	DeleteDailyTrip(context.Context, *DeleteDailyTripRequest) (*DeleteDailyTripResponse, error)
	ListDailyTrips(context.Context, *ListDailyTripsRequest) (*ListDailyTripsResponse, error)
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTripServiceServer struct{}

func (UnimplementedTripServiceServer) CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrip not implemented")
}
func (UnimplementedTripServiceServer) GetTrip(context.Context, *GetTripRequest) (*GetTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrip not implemented")
}
func (UnimplementedTripServiceServer) UpdateTrip(context.Context, *UpdateTripRequest) (*UpdateTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrip not implemented")
}
func (UnimplementedTripServiceServer) DeleteTrip(context.Context, *DeleteTripRequest) (*DeleteTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrip not implemented")
}
func (UnimplementedTripServiceServer) ListTrips(context.Context, *ListTripsRequest) (*ListTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrips not implemented")
}
func (UnimplementedTripServiceServer) CreateDailyTrip(context.Context, *CreateDailyTripRequest) (*CreateDailyTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDailyTrip not implemented")
}
func (UnimplementedTripServiceServer) GetDailyTrip(context.Context, *GetDailyTripRequest) (*GetDailyTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyTrip not implemented")
}
func (UnimplementedTripServiceServer) UpdateDailyTrip(context.Context, *UpdateDailyTripRequest) (*UpdateDailyTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDailyTrip not implemented")
}
func (UnimplementedTripServiceServer) DeleteDailyTrip(context.Context, *DeleteDailyTripRequest) (*DeleteDailyTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDailyTrip not implemented")
}
func (UnimplementedTripServiceServer) ListDailyTrips(context.Context, *ListDailyTripsRequest) (*ListDailyTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyTrips not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}
func (UnimplementedTripServiceServer) testEmbeddedByValue()                     {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	// If the following call pancis, it indicates UnimplementedTripServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_CreateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CreateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CreateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CreateTrip(ctx, req.(*CreateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTrip(ctx, req.(*GetTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_UpdateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).UpdateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_UpdateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).UpdateTrip(ctx, req.(*UpdateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_DeleteTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).DeleteTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_DeleteTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).DeleteTrip(ctx, req.(*DeleteTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_ListTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).ListTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_ListTrips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).ListTrips(ctx, req.(*ListTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CreateDailyTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDailyTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CreateDailyTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CreateDailyTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CreateDailyTrip(ctx, req.(*CreateDailyTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetDailyTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetDailyTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetDailyTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetDailyTrip(ctx, req.(*GetDailyTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_UpdateDailyTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDailyTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).UpdateDailyTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_UpdateDailyTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).UpdateDailyTrip(ctx, req.(*UpdateDailyTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_DeleteDailyTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDailyTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).DeleteDailyTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_DeleteDailyTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).DeleteDailyTrip(ctx, req.(*DeleteDailyTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_ListDailyTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).ListDailyTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_ListDailyTrips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).ListDailyTrips(ctx, req.(*ListDailyTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trip.v1.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrip",
			Handler:    _TripService_CreateTrip_Handler,
		},
		{
			MethodName: "GetTrip",
			Handler:    _TripService_GetTrip_Handler,
		},
		{
			MethodName: "UpdateTrip",
			Handler:    _TripService_UpdateTrip_Handler,
		},
		{
			MethodName: "DeleteTrip",
			Handler:    _TripService_DeleteTrip_Handler,
		},
		{
			MethodName: "ListTrips",
			Handler:    _TripService_ListTrips_Handler,
		},
		{
			MethodName: "CreateDailyTrip",
			Handler:    _TripService_CreateDailyTrip_Handler,
		},
		{
			MethodName: "GetDailyTrip",
			Handler:    _TripService_GetDailyTrip_Handler,
		},
		{
			MethodName: "UpdateDailyTrip",
			Handler:    _TripService_UpdateDailyTrip_Handler,
		},
		{
			MethodName: "DeleteDailyTrip",
			Handler:    _TripService_DeleteDailyTrip_Handler,
		},
		{
			MethodName: "ListDailyTrips",
			Handler:    _TripService_ListDailyTrips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trip/v1/trip.proto",
}
