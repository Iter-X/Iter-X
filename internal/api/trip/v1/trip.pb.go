// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.28.3
// source: trip/v1/trip.proto

package v1

import (
	_ "github.com/protoc-gen/protoc-gen-validatex/validatex"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status        bool                   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Title         string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	StartTs       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	EndTs         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trip) Reset() {
	*x = Trip{}
	mi := &file_trip_v1_trip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trip) ProtoMessage() {}

func (x *Trip) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trip.ProtoReflect.Descriptor instead.
func (*Trip) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{0}
}

func (x *Trip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trip) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Trip) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Trip) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Trip) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Trip) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Trip) GetStartTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTs
	}
	return nil
}

func (x *Trip) GetEndTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTs
	}
	return nil
}

type CreateTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartTs       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	EndTs         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTripRequest) Reset() {
	*x = CreateTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTripRequest) ProtoMessage() {}

func (x *CreateTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTripRequest.ProtoReflect.Descriptor instead.
func (*CreateTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTripRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTripRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTripRequest) GetStartTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTs
	}
	return nil
}

func (x *CreateTripRequest) GetEndTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTs
	}
	return nil
}

type CreateTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trip          *Trip                  `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTripResponse) Reset() {
	*x = CreateTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTripResponse) ProtoMessage() {}

func (x *CreateTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTripResponse.ProtoReflect.Descriptor instead.
func (*CreateTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTripResponse) GetTrip() *Trip {
	if x != nil {
		return x.Trip
	}
	return nil
}

type GetTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTripRequest) Reset() {
	*x = GetTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTripRequest) ProtoMessage() {}

func (x *GetTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTripRequest.ProtoReflect.Descriptor instead.
func (*GetTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{3}
}

func (x *GetTripRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trip          *Trip                  `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTripResponse) Reset() {
	*x = GetTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTripResponse) ProtoMessage() {}

func (x *GetTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTripResponse.ProtoReflect.Descriptor instead.
func (*GetTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{4}
}

func (x *GetTripResponse) GetTrip() *Trip {
	if x != nil {
		return x.Trip
	}
	return nil
}

type UpdateTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTs       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	EndTs         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	Status        bool                   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTripRequest) Reset() {
	*x = UpdateTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTripRequest) ProtoMessage() {}

func (x *UpdateTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTripRequest.ProtoReflect.Descriptor instead.
func (*UpdateTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTripRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTripRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTripRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTripRequest) GetStartTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTs
	}
	return nil
}

func (x *UpdateTripRequest) GetEndTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTs
	}
	return nil
}

func (x *UpdateTripRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type UpdateTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trip          *Trip                  `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTripResponse) Reset() {
	*x = UpdateTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTripResponse) ProtoMessage() {}

func (x *UpdateTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTripResponse.ProtoReflect.Descriptor instead.
func (*UpdateTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTripResponse) GetTrip() *Trip {
	if x != nil {
		return x.Trip
	}
	return nil
}

type DeleteTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTripRequest) Reset() {
	*x = DeleteTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTripRequest) ProtoMessage() {}

func (x *DeleteTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTripRequest.ProtoReflect.Descriptor instead.
func (*DeleteTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTripRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTripResponse) Reset() {
	*x = DeleteTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTripResponse) ProtoMessage() {}

func (x *DeleteTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTripResponse.ProtoReflect.Descriptor instead.
func (*DeleteTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTripResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListTripsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTripsRequest) Reset() {
	*x = ListTripsRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTripsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTripsRequest) ProtoMessage() {}

func (x *ListTripsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTripsRequest.ProtoReflect.Descriptor instead.
func (*ListTripsRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{9}
}

type ListTripsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trips         []*Trip                `protobuf:"bytes,1,rep,name=trips,proto3" json:"trips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTripsResponse) Reset() {
	*x = ListTripsResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTripsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTripsResponse) ProtoMessage() {}

func (x *ListTripsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTripsResponse.ProtoReflect.Descriptor instead.
func (*ListTripsResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{10}
}

func (x *ListTripsResponse) GetTrips() []*Trip {
	if x != nil {
		return x.Trips
	}
	return nil
}

type CreateDailyTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	Day           int32                  `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Notes         string                 `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDailyTripRequest) Reset() {
	*x = CreateDailyTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDailyTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDailyTripRequest) ProtoMessage() {}

func (x *CreateDailyTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDailyTripRequest.ProtoReflect.Descriptor instead.
func (*CreateDailyTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{11}
}

func (x *CreateDailyTripRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *CreateDailyTripRequest) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *CreateDailyTripRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CreateDailyTripRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type CreateDailyTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DailyTrip     *DailyTrip             `protobuf:"bytes,1,opt,name=daily_trip,json=dailyTrip,proto3" json:"daily_trip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDailyTripResponse) Reset() {
	*x = CreateDailyTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDailyTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDailyTripResponse) ProtoMessage() {}

func (x *CreateDailyTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDailyTripResponse.ProtoReflect.Descriptor instead.
func (*CreateDailyTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDailyTripResponse) GetDailyTrip() *DailyTrip {
	if x != nil {
		return x.DailyTrip
	}
	return nil
}

type GetDailyTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	DailyId       string                 `protobuf:"bytes,2,opt,name=daily_id,json=dailyId,proto3" json:"daily_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDailyTripRequest) Reset() {
	*x = GetDailyTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyTripRequest) ProtoMessage() {}

func (x *GetDailyTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyTripRequest.ProtoReflect.Descriptor instead.
func (*GetDailyTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{13}
}

func (x *GetDailyTripRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *GetDailyTripRequest) GetDailyId() string {
	if x != nil {
		return x.DailyId
	}
	return ""
}

type GetDailyTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DailyTrip     *DailyTrip             `protobuf:"bytes,1,opt,name=daily_trip,json=dailyTrip,proto3" json:"daily_trip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDailyTripResponse) Reset() {
	*x = GetDailyTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyTripResponse) ProtoMessage() {}

func (x *GetDailyTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyTripResponse.ProtoReflect.Descriptor instead.
func (*GetDailyTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{14}
}

func (x *GetDailyTripResponse) GetDailyTrip() *DailyTrip {
	if x != nil {
		return x.DailyTrip
	}
	return nil
}

type UpdateDailyTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	DailyId       string                 `protobuf:"bytes,2,opt,name=daily_id,json=dailyId,proto3" json:"daily_id,omitempty"`
	Day           int32                  `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Notes         string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDailyTripRequest) Reset() {
	*x = UpdateDailyTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDailyTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDailyTripRequest) ProtoMessage() {}

func (x *UpdateDailyTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDailyTripRequest.ProtoReflect.Descriptor instead.
func (*UpdateDailyTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateDailyTripRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *UpdateDailyTripRequest) GetDailyId() string {
	if x != nil {
		return x.DailyId
	}
	return ""
}

func (x *UpdateDailyTripRequest) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *UpdateDailyTripRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *UpdateDailyTripRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type UpdateDailyTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DailyTrip     *DailyTrip             `protobuf:"bytes,1,opt,name=daily_trip,json=dailyTrip,proto3" json:"daily_trip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDailyTripResponse) Reset() {
	*x = UpdateDailyTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDailyTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDailyTripResponse) ProtoMessage() {}

func (x *UpdateDailyTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDailyTripResponse.ProtoReflect.Descriptor instead.
func (*UpdateDailyTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateDailyTripResponse) GetDailyTrip() *DailyTrip {
	if x != nil {
		return x.DailyTrip
	}
	return nil
}

type DeleteDailyTripRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	DailyId       string                 `protobuf:"bytes,2,opt,name=daily_id,json=dailyId,proto3" json:"daily_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDailyTripRequest) Reset() {
	*x = DeleteDailyTripRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDailyTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDailyTripRequest) ProtoMessage() {}

func (x *DeleteDailyTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDailyTripRequest.ProtoReflect.Descriptor instead.
func (*DeleteDailyTripRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteDailyTripRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *DeleteDailyTripRequest) GetDailyId() string {
	if x != nil {
		return x.DailyId
	}
	return ""
}

type DeleteDailyTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDailyTripResponse) Reset() {
	*x = DeleteDailyTripResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDailyTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDailyTripResponse) ProtoMessage() {}

func (x *DeleteDailyTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDailyTripResponse.ProtoReflect.Descriptor instead.
func (*DeleteDailyTripResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteDailyTripResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListDailyTripsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDailyTripsRequest) Reset() {
	*x = ListDailyTripsRequest{}
	mi := &file_trip_v1_trip_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDailyTripsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyTripsRequest) ProtoMessage() {}

func (x *ListDailyTripsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyTripsRequest.ProtoReflect.Descriptor instead.
func (*ListDailyTripsRequest) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{19}
}

func (x *ListDailyTripsRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

type ListDailyTripsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DailyTrips    []*DailyTrip           `protobuf:"bytes,1,rep,name=daily_trips,json=dailyTrips,proto3" json:"daily_trips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDailyTripsResponse) Reset() {
	*x = ListDailyTripsResponse{}
	mi := &file_trip_v1_trip_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDailyTripsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyTripsResponse) ProtoMessage() {}

func (x *ListDailyTripsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyTripsResponse.ProtoReflect.Descriptor instead.
func (*ListDailyTripsResponse) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{20}
}

func (x *ListDailyTripsResponse) GetDailyTrips() []*DailyTrip {
	if x != nil {
		return x.DailyTrips
	}
	return nil
}

type DailyTrip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TripId        string                 `protobuf:"bytes,4,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	Day           int32                  `protobuf:"varint,5,opt,name=day,proto3" json:"day,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Notes         string                 `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyTrip) Reset() {
	*x = DailyTrip{}
	mi := &file_trip_v1_trip_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyTrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTrip) ProtoMessage() {}

func (x *DailyTrip) ProtoReflect() protoreflect.Message {
	mi := &file_trip_v1_trip_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTrip.ProtoReflect.Descriptor instead.
func (*DailyTrip) Descriptor() ([]byte, []int) {
	return file_trip_v1_trip_proto_rawDescGZIP(), []int{21}
}

func (x *DailyTrip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DailyTrip) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DailyTrip) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DailyTrip) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *DailyTrip) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *DailyTrip) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DailyTrip) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

var File_trip_v1_trip_proto protoreflect.FileDescriptor

var file_trip_v1_trip_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x78, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x02, 0x0a, 0x04, 0x54, 0x72, 0x69, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73,
	0x22, 0xcc, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xb5, 0x18, 0x06, 0x0a, 0x04, 0x10, 0x01, 0x18,
	0x32, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a,
	0xb5, 0x18, 0x05, 0x0a, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x22,
	0x37, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x70, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70, 0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x70, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5,
	0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x72,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70, 0x22, 0x2d, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x70, 0x52, 0x05, 0x74, 0x72, 0x69, 0x70, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x06,
	0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x4c,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x22, 0x5d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x06,
	0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02,
	0x30, 0x01, 0x52, 0x07, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x09, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x06, 0x74, 0x72,
	0x69, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01,
	0x52, 0x07, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x72, 0x69, 0x70, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x22,
	0x60, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04,
	0x0a, 0x02, 0x30, 0x01, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x07, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x49,
	0x64, 0x22, 0x31, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0x8a, 0xb5, 0x18, 0x04, 0x0a, 0x02, 0x30, 0x01, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54,
	0x72, 0x69, 0x70, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x73, 0x22,
	0x82, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x32, 0xfa, 0x08, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x70, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x69, 0x70, 0x73, 0x12, 0x58, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70,
	0x12, 0x17, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x64, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x61, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x70, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x59, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x70, 0x73, 0x12, 0x7e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x70, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54,
	0x72, 0x69, 0x70, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2f, 0x7b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x70, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x2f, 0x7b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x86,
	0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72,
	0x69, 0x70, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x73, 0x2f, 0x7b, 0x74, 0x72,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x2f, 0x7b, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x70,
	0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x74, 0x65, 0x72, 0x2d, 0x78, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trip_v1_trip_proto_rawDescOnce sync.Once
	file_trip_v1_trip_proto_rawDescData = file_trip_v1_trip_proto_rawDesc
)

func file_trip_v1_trip_proto_rawDescGZIP() []byte {
	file_trip_v1_trip_proto_rawDescOnce.Do(func() {
		file_trip_v1_trip_proto_rawDescData = protoimpl.X.CompressGZIP(file_trip_v1_trip_proto_rawDescData)
	})
	return file_trip_v1_trip_proto_rawDescData
}

var file_trip_v1_trip_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_trip_v1_trip_proto_goTypes = []any{
	(*Trip)(nil),                    // 0: trip.v1.Trip
	(*CreateTripRequest)(nil),       // 1: trip.v1.CreateTripRequest
	(*CreateTripResponse)(nil),      // 2: trip.v1.CreateTripResponse
	(*GetTripRequest)(nil),          // 3: trip.v1.GetTripRequest
	(*GetTripResponse)(nil),         // 4: trip.v1.GetTripResponse
	(*UpdateTripRequest)(nil),       // 5: trip.v1.UpdateTripRequest
	(*UpdateTripResponse)(nil),      // 6: trip.v1.UpdateTripResponse
	(*DeleteTripRequest)(nil),       // 7: trip.v1.DeleteTripRequest
	(*DeleteTripResponse)(nil),      // 8: trip.v1.DeleteTripResponse
	(*ListTripsRequest)(nil),        // 9: trip.v1.ListTripsRequest
	(*ListTripsResponse)(nil),       // 10: trip.v1.ListTripsResponse
	(*CreateDailyTripRequest)(nil),  // 11: trip.v1.CreateDailyTripRequest
	(*CreateDailyTripResponse)(nil), // 12: trip.v1.CreateDailyTripResponse
	(*GetDailyTripRequest)(nil),     // 13: trip.v1.GetDailyTripRequest
	(*GetDailyTripResponse)(nil),    // 14: trip.v1.GetDailyTripResponse
	(*UpdateDailyTripRequest)(nil),  // 15: trip.v1.UpdateDailyTripRequest
	(*UpdateDailyTripResponse)(nil), // 16: trip.v1.UpdateDailyTripResponse
	(*DeleteDailyTripRequest)(nil),  // 17: trip.v1.DeleteDailyTripRequest
	(*DeleteDailyTripResponse)(nil), // 18: trip.v1.DeleteDailyTripResponse
	(*ListDailyTripsRequest)(nil),   // 19: trip.v1.ListDailyTripsRequest
	(*ListDailyTripsResponse)(nil),  // 20: trip.v1.ListDailyTripsResponse
	(*DailyTrip)(nil),               // 21: trip.v1.DailyTrip
	(*timestamppb.Timestamp)(nil),   // 22: google.protobuf.Timestamp
}
var file_trip_v1_trip_proto_depIdxs = []int32{
	22, // 0: trip.v1.Trip.created_at:type_name -> google.protobuf.Timestamp
	22, // 1: trip.v1.Trip.updated_at:type_name -> google.protobuf.Timestamp
	22, // 2: trip.v1.Trip.start_ts:type_name -> google.protobuf.Timestamp
	22, // 3: trip.v1.Trip.end_ts:type_name -> google.protobuf.Timestamp
	22, // 4: trip.v1.CreateTripRequest.start_ts:type_name -> google.protobuf.Timestamp
	22, // 5: trip.v1.CreateTripRequest.end_ts:type_name -> google.protobuf.Timestamp
	0,  // 6: trip.v1.CreateTripResponse.trip:type_name -> trip.v1.Trip
	0,  // 7: trip.v1.GetTripResponse.trip:type_name -> trip.v1.Trip
	22, // 8: trip.v1.UpdateTripRequest.start_ts:type_name -> google.protobuf.Timestamp
	22, // 9: trip.v1.UpdateTripRequest.end_ts:type_name -> google.protobuf.Timestamp
	0,  // 10: trip.v1.UpdateTripResponse.trip:type_name -> trip.v1.Trip
	0,  // 11: trip.v1.ListTripsResponse.trips:type_name -> trip.v1.Trip
	22, // 12: trip.v1.CreateDailyTripRequest.date:type_name -> google.protobuf.Timestamp
	21, // 13: trip.v1.CreateDailyTripResponse.daily_trip:type_name -> trip.v1.DailyTrip
	21, // 14: trip.v1.GetDailyTripResponse.daily_trip:type_name -> trip.v1.DailyTrip
	22, // 15: trip.v1.UpdateDailyTripRequest.date:type_name -> google.protobuf.Timestamp
	21, // 16: trip.v1.UpdateDailyTripResponse.daily_trip:type_name -> trip.v1.DailyTrip
	21, // 17: trip.v1.ListDailyTripsResponse.daily_trips:type_name -> trip.v1.DailyTrip
	22, // 18: trip.v1.DailyTrip.created_at:type_name -> google.protobuf.Timestamp
	22, // 19: trip.v1.DailyTrip.updated_at:type_name -> google.protobuf.Timestamp
	22, // 20: trip.v1.DailyTrip.date:type_name -> google.protobuf.Timestamp
	1,  // 21: trip.v1.TripService.CreateTrip:input_type -> trip.v1.CreateTripRequest
	3,  // 22: trip.v1.TripService.GetTrip:input_type -> trip.v1.GetTripRequest
	5,  // 23: trip.v1.TripService.UpdateTrip:input_type -> trip.v1.UpdateTripRequest
	7,  // 24: trip.v1.TripService.DeleteTrip:input_type -> trip.v1.DeleteTripRequest
	9,  // 25: trip.v1.TripService.ListTrips:input_type -> trip.v1.ListTripsRequest
	11, // 26: trip.v1.TripService.CreateDailyTrip:input_type -> trip.v1.CreateDailyTripRequest
	13, // 27: trip.v1.TripService.GetDailyTrip:input_type -> trip.v1.GetDailyTripRequest
	15, // 28: trip.v1.TripService.UpdateDailyTrip:input_type -> trip.v1.UpdateDailyTripRequest
	17, // 29: trip.v1.TripService.DeleteDailyTrip:input_type -> trip.v1.DeleteDailyTripRequest
	19, // 30: trip.v1.TripService.ListDailyTrips:input_type -> trip.v1.ListDailyTripsRequest
	2,  // 31: trip.v1.TripService.CreateTrip:output_type -> trip.v1.CreateTripResponse
	4,  // 32: trip.v1.TripService.GetTrip:output_type -> trip.v1.GetTripResponse
	6,  // 33: trip.v1.TripService.UpdateTrip:output_type -> trip.v1.UpdateTripResponse
	8,  // 34: trip.v1.TripService.DeleteTrip:output_type -> trip.v1.DeleteTripResponse
	10, // 35: trip.v1.TripService.ListTrips:output_type -> trip.v1.ListTripsResponse
	12, // 36: trip.v1.TripService.CreateDailyTrip:output_type -> trip.v1.CreateDailyTripResponse
	14, // 37: trip.v1.TripService.GetDailyTrip:output_type -> trip.v1.GetDailyTripResponse
	16, // 38: trip.v1.TripService.UpdateDailyTrip:output_type -> trip.v1.UpdateDailyTripResponse
	18, // 39: trip.v1.TripService.DeleteDailyTrip:output_type -> trip.v1.DeleteDailyTripResponse
	20, // 40: trip.v1.TripService.ListDailyTrips:output_type -> trip.v1.ListDailyTripsResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_trip_v1_trip_proto_init() }
func file_trip_v1_trip_proto_init() {
	if File_trip_v1_trip_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trip_v1_trip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trip_v1_trip_proto_goTypes,
		DependencyIndexes: file_trip_v1_trip_proto_depIdxs,
		MessageInfos:      file_trip_v1_trip_proto_msgTypes,
	}.Build()
	File_trip_v1_trip_proto = out.File
	file_trip_v1_trip_proto_rawDesc = nil
	file_trip_v1_trip_proto_goTypes = nil
	file_trip_v1_trip_proto_depIdxs = nil
}
