// Code generated by protoc-gen-validatex. DO NOT EDIT.

// versions:
//  protoc-gen-validatex v0.7.0

package v1

import (
	context "context"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"
	validatex "github.com/protoc-gen/protoc-gen-validatex/pkg/validatex"
)

func (x *Trip) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}
func (x *CreateTripRequest) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	if len(x.Title) < 1 {
		return validatex.NewError(
			validatex.MustLocalize(ctx, &i18n.LocalizeConfig{MessageID: "StringMinLen",
				TemplateData: map[string]string{"MinLen": "1"},
			}, "must be at least 1 characters long")).
			WithMetadata(map[string]string{"field": "title"})
	}
	if len(x.Title) > 50 {
		return validatex.NewError(
			validatex.MustLocalize(ctx, &i18n.LocalizeConfig{MessageID: "StringMaxLen",
				TemplateData: map[string]string{"MaxLen": "50"},
			}, "must be at most 50 characters long")).
			WithMetadata(map[string]string{"field": "title"})
	}
	if len(x.Description) > 255 {
		return validatex.NewError(
			validatex.MustLocalize(ctx, &i18n.LocalizeConfig{MessageID: "StringMaxLen",
				TemplateData: map[string]string{"MaxLen": "255"},
			}, "must be at most 255 characters long")).
			WithMetadata(map[string]string{"field": "description"})
	}
	return nil
}
func (x *CreateTripResponse) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}
func (x *GetTripRequest) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	if !validatex.ValidUUID(x.Id) {
		return validatex.NewError(
			validatex.MustLocalize(ctx, &i18n.LocalizeConfig{MessageID: "UUIDInvalid",
				TemplateData: map[string]string{"FieldName": "id"},
			}, "must be a valid UUID")).
			WithMetadata(map[string]string{"field": "id"})
	}
	return nil
}
func (x *GetTripResponse) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}
func (x *UpdateTripRequest) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	if !validatex.ValidUUID(x.Id) {
		return validatex.NewError(
			validatex.MustLocalize(ctx, &i18n.LocalizeConfig{MessageID: "UUIDInvalid",
				TemplateData: map[string]string{"FieldName": "id"},
			}, "must be a valid UUID")).
			WithMetadata(map[string]string{"field": "id"})
	}
	return nil
}
func (x *UpdateTripResponse) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}
func (x *DeleteTripRequest) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	if !validatex.ValidUUID(x.Id) {
		return validatex.NewError(
			validatex.MustLocalize(ctx, &i18n.LocalizeConfig{MessageID: "UUIDInvalid",
				TemplateData: map[string]string{"FieldName": "id"},
			}, "must be a valid UUID")).
			WithMetadata(map[string]string{"field": "id"})
	}
	return nil
}
func (x *DeleteTripResponse) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}
func (x *ListTripsRequest) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}
func (x *ListTripsResponse) Validate(ctx context.Context) error {
	if x == nil {
		return nil
	}
	return nil
}

func init() {
	validatex.Init18n("./i18n/validatex")
}
