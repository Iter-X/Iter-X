syntax = "proto3";

package geo.v1;

import "google/api/annotations.proto";
import "validatex/validatex.proto";

option go_package = "github.com/iter-x/iter-x/internal/api/geo/v1;v1";

service GeoService {
  rpc ListContinents(ListContinentsRequest) returns (ListContinentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/geo/continents"
    };
  }

  rpc ListCountries(ListCountriesRequest) returns (ListCountriesResponse) {
    option (google.api.http) = {
      get: "/api/v1/geo/countries"
    };
  }

  rpc ListStates(ListStatesRequest) returns (ListStatesResponse) {
    option (google.api.http) = {
      get: "/api/v1/geo/states"
    };
  }

  rpc ListCities(ListCitiesRequest) returns (ListCitiesResponse) {
    option (google.api.http) = {
      get: "/api/v1/geo/cities"
    };
  }
}

message ListContinentsRequest {
  int32 size = 1 [(validatex.rules).numeric = {
    gte: 0,
    lte: 200,
  }];
  int32 page = 2 [(validatex.rules).numeric = {
    gte: 0
  }];
}

message ListContinentsResponse {
  repeated Continent continents = 1;
  int64 total = 2;
}

message ListCountriesRequest {
  uint32 continent_id = 1;
  int32 size = 2 [(validatex.rules).numeric = {
    gte: 0,
    lte: 100,
  }];
  int32 page = 3 [(validatex.rules).numeric = {
    gte: 0
  }];
}

message ListCountriesResponse {
  repeated Country countries = 1;
  int64 total = 2;
}

message ListStatesRequest {
  uint32 country_id = 1;
  int32 size = 2 [(validatex.rules).numeric = {
    gte: 0,
    lte: 100,
  }];
  int32 page = 3 [(validatex.rules).numeric = {
    gte: 0
  }];
}

message ListStatesResponse {
  repeated State states = 1;
  int64 total = 2;
}

message ListCitiesRequest {
  uint32 state_id = 1;
  uint32 country_id = 2;
  int32 size = 3 [(validatex.rules).numeric = {
    gte: 0,
    lte: 100,
  }];
  int32 page = 4 [(validatex.rules).numeric = {
    gte: 0
  }];
}

message ListCitiesResponse {
  repeated City cities = 1;
  int64 total = 2;
}

message Continent {
  uint32 id = 1;
  string name = 2;
  string name_local = 3;
  string name_en = 4;
  string name_cn = 5;
  string code = 6;
}

message Country {
  uint32 id = 1;
  string name = 2;
  string name_local = 3;
  string name_en = 4;
  string name_cn = 5;
  string code = 6;
  uint32 continent_id = 7;
  Continent continent = 8;
  string image_url = 9;
}

message State {
  uint32 id = 1;
  string name = 2;
  string name_local = 3;
  string name_en = 4;
  string name_cn = 5;
  string code = 6;
  uint32 country_id = 7;
  Country country = 8;
}

message City {
  uint32 id = 1;
  string name = 2;
  string name_local = 3;
  string name_en = 4;
  string name_cn = 5;
  string code = 6;
  uint32 state_id = 7;
  State state = 8;
}