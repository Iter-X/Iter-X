syntax = "proto3";

package trip.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validatex/validatex.proto";
import "poi/v1/poi.proto";

option go_package = "github.com/iter-x/iter-x/internal/api/trip/v1;v1";

service TripService {
  rpc CreateTripManually(CreateTripManuallyRequest) returns (CreateTripResponse) {
    option (google.api.http) = {
      post: "/api/v1/trips/manual"
      body: "*"
    };
  }
  rpc CreateTripFromCard(CreateTripFromCardRequest) returns (CreateTripResponse) {
    option (google.api.http) = {
      post: "/api/v1/trips/card"
      body: "*"
    };
  }
  rpc CreateTripFromExternalLink(CreateTripFromExternalLinkRequest) returns (CreateTripResponse) {
    option (google.api.http) = {
      post: "/api/v1/trips/external-link"
      body: "*"
    };
  }
  rpc GetTrip(GetTripRequest) returns (GetTripResponse) {
    option (google.api.http) = {
      get: "/api/v1/trips/{id}"
    };
  }
  rpc UpdateTrip(UpdateTripRequest) returns (UpdateTripResponse) {
    option (google.api.http) = {
      put: "/api/v1/trips/{id}"
      body: "*"
    };
  }
  rpc DeleteTrip(DeleteTripRequest) returns (DeleteTripResponse) {
    option (google.api.http) = {
      delete: "/api/v1/trips/{id}"
    };
  }
  rpc ListTrips(ListTripsRequest) returns (ListTripsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trips"
    };
  }

  rpc CreateDailyTrip(CreateDailyTripRequest) returns (CreateDailyTripResponse) {
    option (google.api.http) = {
      post: "/api/v1/trips/{trip_id}/daily"
      body: "*"
    };
  }
  rpc GetDailyTrip(GetDailyTripRequest) returns (GetDailyTripResponse) {
    option (google.api.http) = {
      get: "/api/v1/trips/{trip_id}/daily/{daily_id}"
    };
  }
  rpc UpdateDailyTrip(UpdateDailyTripRequest) returns (UpdateDailyTripResponse) {
    option (google.api.http) = {
      put: "/api/v1/trips/{trip_id}/daily/{daily_id}"
      body: "*"
    };
  }
  rpc DeleteDailyTrip(DeleteDailyTripRequest) returns (DeleteDailyTripResponse) {
    option (google.api.http) = {
      delete: "/api/v1/trips/{trip_id}/daily/{daily_id}"
    };
  }
  rpc ListDailyTrips(ListDailyTripsRequest) returns (ListDailyTripsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trips/{trip_id}/daily"
    };
  }

  rpc ListTripCollaborators(ListTripCollaboratorsRequest) returns (ListTripCollaboratorsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trips/{trip_id}/collaborators"
    };
  }

  rpc ListTripPOIPool(ListTripPOIPoolRequest) returns (ListTripPOIPoolResponse) {
    option (google.api.http) = {
      get: "/api/v1/trips/{trip_id}/poi-pool"
    };
  }

  rpc CreateTripPOIPool(CreateTripPOIPoolRequest) returns (CreateTripPOIPoolResponse) {
    option (google.api.http) = {
      post: "/api/v1/trips/{trip_id}/poi-pool"
      body: "*"
    };
  }

  rpc DeleteTripPOIPool(DeleteTripPOIPoolRequest) returns (DeleteTripPOIPoolResponse) {
    option (google.api.http) = {
      delete: "/api/v1/trips/{trip_id}/poi-pool/{poi_pool_id}"
    };
  }

  rpc AddTripCollaborators(AddTripCollaboratorsRequest) returns (AddTripCollaboratorsResponse) {
    option (google.api.http) = {
      post: "/api/v1/trips/{trip_id}/collaborators"
      body: "*"
    };
  }

  rpc RemoveTripCollaborator(RemoveTripCollaboratorRequest) returns (RemoveTripCollaboratorResponse) {
    option (google.api.http) = {
      delete: "/api/v1/trips/{trip_id}/collaborators/{user_id}"
    };
  }

  rpc UpdateCollaboratorStatus(UpdateCollaboratorStatusRequest) returns (UpdateCollaboratorStatusResponse) {
    option (google.api.http) = {
      put: "/api/v1/trips/{trip_id}/collaborators/{user_id}/status"
      body: "*"
    };
  }
}

message Trip {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  bool status = 4;
  string title = 5;
  string description = 6;
  google.protobuf.Timestamp start_ts = 7;
  google.protobuf.Timestamp end_ts = 8;
  repeated DailyTrip daily_trips = 9;
  repeated poi.v1.PointOfInterest poi_pool = 10;
}

message CreateTripManuallyRequest {
  string destination = 1;
  google.protobuf.Timestamp start_ts = 2;
  google.protobuf.Timestamp end_ts = 3;
  int32 duration = 4;
}

message CreateTripFromCardRequest {
  repeated int32 city_ids = 1 [(validatex.rules).repeated.min_items = 1];
  repeated string poi_ids = 2;
  google.protobuf.Timestamp start_ts = 3;
  google.protobuf.Timestamp end_ts = 4;
  int32 duration = 5;
}

message CreateTripFromExternalLinkRequest {
  string link_url = 1 [(validatex.rules).string.non_empty = true];
  google.protobuf.Timestamp start_ts = 2;
  google.protobuf.Timestamp end_ts = 3;
  int32 duration = 4;
}

message CreateTripResponse {
  Trip trip = 1;
}

message GetTripRequest {
  string id = 1 [(validatex.rules).string.uuid = true];
}

message GetTripResponse {
  Trip trip = 1;
}

message UpdateTripRequest {
  string id = 1 [(validatex.rules).string.uuid = true];
  string title = 2;
  string description = 3;
  google.protobuf.Timestamp start_ts = 4;
  google.protobuf.Timestamp end_ts = 5;
  bool status = 7;
}

message UpdateTripResponse {
  Trip trip = 1;
}

message DeleteTripRequest {
  string id = 1 [(validatex.rules).string.uuid = true];
}

message DeleteTripResponse {
  string status = 1;
}

message ListTripsRequest {
}

message ListTripsResponse {
  repeated Trip trips = 1;
}

message CreateDailyTripRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  int32 day = 2;
  google.protobuf.Timestamp date = 3;
  string notes = 4;
}

message CreateDailyTripResponse {
  DailyTrip daily_trip = 1;
}

message GetDailyTripRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string daily_id = 2 [(validatex.rules).string.uuid = true];
}

message GetDailyTripResponse {
  DailyTrip daily_trip = 1;
}

message UpdateDailyTripRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string daily_id = 2 [(validatex.rules).string.uuid = true];
  int32 day = 3;
  google.protobuf.Timestamp date = 4;
  string notes = 5;
}

message UpdateDailyTripResponse {
  DailyTrip daily_trip = 1;
}

message DeleteDailyTripRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string daily_id = 2 [(validatex.rules).string.uuid = true];
}

message DeleteDailyTripResponse {
  string status = 1;
}

message ListDailyTripsRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
}

message ListDailyTripsResponse {
  repeated DailyTrip daily_trips = 1;
}

message ListTripCollaboratorsRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
}

message ListTripCollaboratorsResponse {
  repeated TripCollaborator collaborators = 1;
}

message TripCollaborator {
  string id = 1;
  string username = 2;
  string nickname = 3;
  string avatar_url = 4;
  CollaboratorStatus status = 5;
}

enum CollaboratorStatus {
  Invited = 0;
  Accepted = 2;
  Rejected = 3;
}

message DailyTrip {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string trip_id = 4;
  int32 day = 5;
  google.protobuf.Timestamp date = 6;
  string notes = 7;
  repeated DailyItinerary daily_itineraries = 8;
}

message DailyItinerary {
  string id = 1;
  string trip_id = 2;
  string daily_trip_id = 3;
  string poi_id = 4;
  string notes = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  poi.v1.PointOfInterest poi = 8;
}

message PointsOfInterest {
  string id = 1;
  string name = 2;
  string description = 3;
  string address = 4;
  double latitude = 5;
  double longitude = 6;
  string city_name = 7;
  string country_name = 8;
  string state_name = 9;
  string image_url = 10;
}

message TripPOIPool {
  string id = 1;
  string trip_id = 2;
  string poi_id = 3;
  string notes = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  poi.v1.PointOfInterest poi = 7;
}

message ListTripPOIPoolRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
}

message ListTripPOIPoolResponse {
  repeated TripPOIPool poi_pool = 1;
}

message CreateTripPOIPoolRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string poi_id = 2 [(validatex.rules).string.uuid = true];
  string notes = 3;
}

message CreateTripPOIPoolResponse {
  TripPOIPool poi_pool = 1;
}

message DeleteTripPOIPoolRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string poi_pool_id = 2 [(validatex.rules).string.uuid = true];
}

message DeleteTripPOIPoolResponse {
  string status = 1;
}

message AddTripCollaboratorsRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  repeated string user_ids = 2 [(validatex.rules).repeated.min_items = 1];
}

message AddTripCollaboratorsResponse {
  repeated TripCollaborator collaborators = 1;
}

message RemoveTripCollaboratorRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string user_id = 2 [(validatex.rules).string.uuid = true];
}

message RemoveTripCollaboratorResponse {
  string status = 1;
}

message UpdateCollaboratorStatusRequest {
  string trip_id = 1 [(validatex.rules).string.uuid = true];
  string user_id = 2 [(validatex.rules).string.uuid = true];
  CollaboratorStatus status = 3;
}

message UpdateCollaboratorStatusResponse {
  TripCollaborator collaborator = 1;
}
